{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","navigation/LinkingConfiguration.ts","hooks/useTheme.ts","components/Themed.tsx","hooks/useElapsedTime.ts","components/ElapsedTime.tsx","services/HapticService.ts","store/LotideContext.ts","slices/voteSlice.ts","services/LotideService/util.ts","services/LotideService/Community.ts","services/LotideService/Instance.ts","services/LotideService/Post.ts","services/LotideService/Reply.ts","hooks/useVote.ts","components/VoteCounter.tsx","components/ContentDisplay.tsx","components/ActorDisplay.tsx","components/PostDisplay.tsx","hooks/lotide.ts","hooks/useRefreshableData.ts","constants/KnownHosts.ts","services/StorageService.ts","components/HostList.tsx","components/Login.tsx","services/LotideService/User.ts","components/SuggestLogin.tsx","components/SwipeAction.tsx","screens/FeedScreen.tsx","components/CommunityFinder.tsx","screens/SearchScreen.tsx","screens/ProfileScreen.tsx","screens/NewPostScreen.tsx","screens/SettingsScreen.tsx","screens/CommunityScreen.tsx","screens/ReplyScreen.tsx","store/SelectedReplyContext.ts","components/RepliesDisplay.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","transformers/NotificationTransformer.ts","screens/NotificationScreen.tsx","services/LotideService/Notification.ts","screens/NewCommunity.tsx","screens/ForgotPasswordScreen.tsx","screens/EditCommunityScreen.tsx","navigation/index.tsx","store/reduxStore.ts","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","PlatformColor","Platform","OS","require","light","buildIOS","tint","secondaryTint","text","secondaryText","placeholderText","background","secondaryBackground","tertiaryBackground","tabIconDefault","tabIconSelected","red","orange","yellow","green","teal","blue","indigo","purple","dark","linking","prefixes","Linking","config","screens","Root","TabOne","TabOneScreen","TabTwo","TabTwoScreen","Modal","NotFound","useTheme","colorScheme","Colors","Text","props","style","secondary","otherProps","theme","color","View","backgroundColor","TextInput","forwardRef","ref","placeholderTextColor","themeStyle","paddingHorizontal","paddingVertical","borderRadius","useElapsedTime","time","useMemo","seconds","Math","round","Date","now","parse","minutes","hours","days","weeks","months","years","calculateElapsedTime","ElapsedTime","elapsedTime","Pressable","hitSlop","onPress","Alert","alert","styles","root","name","size","StyleSheet","create","impactAsync","a","async","Haptics","defaultLotideContext","apiUrl","login","undefined","createContext","ctx","setContext","voteSlice","createSlice","initialState","post","reply","reducers","setVote","state","action","p","payload","type","id","vote","actions","lotideRequest","method","path","body","noLogin","fetch","headers","buildHeaders","JSON","stringify","then","res","ok","catch","e","console","error","Authorization","token","getCommunities","onlyFollowing","page","data","json","getCommunity","communityId","getUserData","userId","followCommunity","try_wait_for_accept","editCommunity","description","getInstanceInfo","getPost","postId","getReply","replyId","getPostReplies","getReplyReplies","useVote","content","isUpvotedByAPI","your_vote","upvoteSelected","useSelector","dispatch","useDispatch","useContext","LotideContext","useEffect","dispatchVote","isUpvoted","shouldAddOne","shouldSubtractOne","score","addVote","LotideService","removeVote","VoteCounter","scoreColor","Light","hideCount","display","flexDirection","alignItems","fontSize","minWidth","ContentDisplay","html","contentHtml","markdown","contentMarkdown","replace","trim","contentText","RootComponent","value","renderNode","stylesheet","cite","fontStyle","del","textDecorationLine","textDecorationStyle","dfn","ins","samp","fontFamily","small","textComponentProps","onLinkLongPress","url","node","index","siblings","parent","defaultRenderer","includes","children","key","attribs","title","padding","borderLeftWidth","borderColor","paddingLeft","Details","width","alignSelf","borderBottomWidth","hairlineWidth","useState","isOpen","setIsOpen","filter","x","toString","summary","realChildren","fontWeight","host","React","memo","colorize","showHost","shouldDoIfLocal","when","local","shouldColorize","shouldShowHost","nameStyle","styleName","styleHost","newLine","PostDisplay","imgAspect","setImgAspect","isImage","href","some","ext","endsWith","sticky","Image","image","aspectRatio","source","uri","onLoad","event","max","nativeEvent","height","link","Medium","openURL","showHtmlContent","content_html","content_text","showAuthor","paddingTop","by","author","username","foot","navigation","navigate","community","footItem","flex","created","footText","replies_count_total","item","marginVertical","marginHorizontal","resizeMode","justifyContent","usePosts","sort","inYourFollows","posts","setPosts","setPage","nextPage","setNextPage","loadingPage","setLoadingPage","reloadId","setReloadId","effect","deps","refreshCount","setRefreshCount","isLoading","setIsLoading","c","useRefreshableData","stopLoading","join","items","next_page","refresh","KnownHosts","domain","lotideContext","AsyncStorage","getItem","ctxStr","lotideContextKV","user","serviceKV","store","k","query","listKeys","remove","storeStr","v","setItem","Object","keys","HostList","hostText","setHostText","knownHosts","setKnowHosts","existingProfiles","setExistingProfiles","map","h","i","d","hosts","h2","j","instanceInfo","object","entries","ScrollView","contentContainerStyle","length","subtitle","split","isUnlocked","hostName","find","onSelect","toLowerCase","marginRight","paddingBottom","placeholder","onChangeText","onSubmitEditing","keyboardType","returnKeyType","enabled","software","version","startsWith","renderItem","marginBottom","textAlign","marginTop","Login","isRegistering","setIsRegistering","setUsername","password","setPassword","email","setEmail","usernameRef","useRef","passwordRef","useNavigation","fail","message","register","email_address","submit","Keyboard","dismiss","KeyboardAvoidingView","behavior","loginRegister","input","textContentType","autoCompleteType","current","focus","secureTextEntry","actionButtons","Button","onGoBack","SuggestLogin","setHostName","setDomain","container","SwipeAction","distanceToActivate","isScrolling","setIsScrolling","scroll","setScroll","isLeft","setIsLeft","isRight","setIsRight","isCommitted","setIsCommitted","dimensions","useWindowDimensions","scrollRef","onLeftSide","onRightSide","onReturnToCenter","horizontal","snapToOffsets","snapToStart","snapToEnd","onScrollBeginDrag","onScrollEndDrag","scrollTo","contentOffset","y","onScroll","scrollEventThrottle","showsHorizontalScrollIndicator","overScrollMode","iconLeftSide","colorLeftSide","iconRightSide","colorRightSide","FeedScreen","route","params","isLoadingPosts","refreshPosts","loadNextPage","hasLogin","FlatList","keyExtractor","refreshing","onRefresh","onEndReachedThreshold","onEndReached","Item","isCommitting","setIsCommitting","onLongPress","Heavy","log","borderBottomColor","CommunityFinder","communities","setCommunities","filterText","setFilterText","communitiesToDisplay","onlyWhenTyping","focusId","you_are_moderator","your_follow","accepted","marginLeft","list","SearchScreen","setFocusId","addListener","ProfileScreen","profile","setProfile","profileList","setProfileList","isEditing","setIsEditing","StorageService","header","avatar","cancelable","accessibilityLabel","editView","editViewText","multiline","editViewActionButtons","altProfileButton","followingTitle","margin","separator","inputContainer","borderWidth","NewPostScreen","setCommunity","setTitle","setLink","setContent","TouchableWithoutFeedback","minHeight","content_markdown","SettingsScreen","CommunityScreen","isFollowing","buttons","ReplyScreen","setText","onFocus","scrollToEnd","animated","pop","defaultSelectedReplyContext","SelectedReplyContext","RepliesDisplay","replies","layer","highlightedReplies","nextPageData","setNextPageData","layerColors","ReplyDisplay","showChildren","setShowChildren","selectedReply","setSelectedReply","borderTopWidth","borderTopColor","flexWrap","button","s","ModalScreen","setHighlightedReplies","setReplies","useReplies","Share","share","Provider","StatusBar","currentHeight","NotFoundScreen","TouchableOpacity","linkText","originFromComment","commentId","comment","originFromPost","NotificationScreen","notifications","setNotifications","isRefreshing","setIsRefreshing","promises","n","notification","origin","unseen","transformToFullNotification","Promise","all","level1","level2","thin","NewCommunityScreen","setName","setDescription","ForgotPasswordScreen","isAwaitingKey","setIsAwaitingKey","validKey","setValidKey","autoCapitalize","newPassword","new_password","popToTop","Navigation","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","component","BottomTabNavigator","options","headerShown","EditCommunityScreen","Group","screenOptions","presentation","BottomTab","createBottomTabNavigator","setSort","initialRouteName","tabBarActiveTintColor","tabBarShowLabel","initialParams","tabBarIcon","TabBarIcon","headerRight","ActionSheetIOS","showActionSheetWithOptions","cancelButtonIndex","buttonIndex","newSort","opacity","pressed","hot","new","headerLeft","configureStore","reducer","voteReducer","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","FontAwesome","font","warn","useCachedResources","applyNewContext","reduxStore","module","exports"],"mappings":"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","file":"static/js/app.ccc26a9b.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import { ColorValue, Platform } from \"react-native\";\nconst PlatformColor =\n  Platform.OS === \"web\" ? () => {} : require(\"react-native\").PlatformColor;\n\nexport interface ColorsObject {\n  tint: ColorValue;\n  secondaryTint: ColorValue;\n  text: ColorValue;\n  secondaryText: ColorValue;\n  placeholderText: ColorValue;\n  background: ColorValue;\n  secondaryBackground: ColorValue;\n  tertiaryBackground: ColorValue;\n  tabIconDefault: ColorValue;\n  tabIconSelected: ColorValue;\n\n  red: ColorValue;\n  orange: ColorValue;\n  yellow: ColorValue;\n  green: ColorValue;\n  teal: ColorValue;\n  blue: ColorValue;\n  indigo: ColorValue;\n  purple: ColorValue;\n}\n\nexport default {\n  light: Platform.OS === \"ios\" ? buildIOS() : buildAltLight(),\n  dark: Platform.OS === \"ios\" ? buildIOS() : buildAltDark(),\n};\n\nfunction buildIOS(): ColorsObject {\n  return {\n    tint: PlatformColor(\"systemOrange\"),\n    secondaryTint: PlatformColor(\"systemPurple\"),\n    text: PlatformColor(\"label\"),\n    secondaryText: PlatformColor(\"secondaryLabel\"),\n    placeholderText: PlatformColor(\"placeholderText\"),\n    background: PlatformColor(\"systemBackground\"),\n    secondaryBackground: PlatformColor(\"secondarySystemBackground\"),\n    tertiaryBackground: PlatformColor(\"tertiarySystemBackground\"),\n    tabIconDefault: PlatformColor(\"secondaryLabel\"),\n    tabIconSelected: PlatformColor(\"systemOrange\"),\n\n    red: PlatformColor(\"systemRed\"),\n    orange: PlatformColor(\"systemOrange\"),\n    yellow: PlatformColor(\"systemYellow\"),\n    green: PlatformColor(\"systemGreen\"),\n    teal: PlatformColor(\"systemTeal\"),\n    blue: PlatformColor(\"systemBlue\"),\n    indigo: PlatformColor(\"systemIndigo\"),\n    purple: PlatformColor(\"systemPurple\"),\n  };\n}\n\nfunction buildAltLight(): ColorsObject {\n  return {\n    tint: \"orange\",\n    secondaryTint: \"purple\",\n    text: \"#111\",\n    secondaryText: \"#333\",\n    placeholderText: \"#444\",\n    background: \"#fff\",\n    secondaryBackground: \"#eee\",\n    tertiaryBackground: \"#ccc\",\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: \"orange\",\n\n    red: \"red\",\n    orange: \"orange\",\n    yellow: \"yellow\",\n    green: \"green\",\n    teal: \"eeal\",\n    blue: \"blue\",\n    indigo: \"indigo\",\n    purple: \"purple\",\n  };\n}\n\nfunction buildAltDark(): ColorsObject {\n  return {\n    tint: \"orange\",\n    secondaryTint: \"purple\",\n    text: \"#fff\",\n    secondaryText: \"#666\",\n    placeholderText: \"#aaa\",\n    background: \"#111\",\n    secondaryBackground: \"#222\",\n    tertiaryBackground: \"#222\",\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: \"orange\",\n\n    red: \"red\",\n    orange: \"orange\",\n    yellow: \"yellow\",\n    green: \"green\",\n    teal: \"eeal\",\n    blue: \"#68f\",\n    indigo: \"indigo\",\n    purple: \"purple\",\n  };\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","import Colors from \"../constants/Colors\";\nimport useColorScheme from \"./useColorScheme\";\n\nexport default function useTheme() {\n  const colorScheme = useColorScheme();\n  return Colors[colorScheme];\n}\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport React, { forwardRef } from \"react\";\nimport {\n  ColorValue,\n  Text as DefaultText,\n  View as DefaultView,\n  TextInput as DefaultTextInput,\n} from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport function useThemeColor(\n  props: { light?: ColorValue; dark?: ColorValue },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark,\n): ColorValue {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  secondary?: boolean;\n  tint?: boolean;\n};\n\nexport type TextProps = ThemeProps & DefaultText[\"props\"];\nexport type ViewProps = ThemeProps & DefaultView[\"props\"];\n\nexport function Text(props: TextProps) {\n  const { style, secondary, tint, ...otherProps } = props;\n  const theme = useTheme();\n  const color =\n    !secondary && !tint\n      ? theme.text\n      : secondary && !tint\n      ? theme.secondaryText\n      : tint && !secondary\n      ? theme.tint\n      : theme.secondaryTint;\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, ...otherProps } = props;\n  const backgroundColor = useTheme().background;\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n\nexport const TextInput = forwardRef<\n  DefaultTextInput,\n  DefaultTextInput[\"props\"]\n>((props: DefaultTextInput[\"props\"], ref) => {\n  const { style, placeholderTextColor, ...otherProps } = props;\n  const theme = useTheme();\n\n  const themeStyle = {\n    backgroundColor: theme.secondaryBackground,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 8,\n    color: theme.text,\n  };\n  return (\n    <DefaultTextInput\n      ref={ref}\n      style={[themeStyle, style]}\n      placeholderTextColor={placeholderTextColor || theme.placeholderText}\n      {...otherProps}\n    />\n  );\n});\n","import { useMemo } from \"react\";\n\nexport default function useElapsedTime(time: string): string {\n  return useMemo(() => calculateElapsedTime(time), [time]);\n}\n\nexport function calculateElapsedTime(time: string): string {\n  const seconds = Math.round((Date.now() - Date.parse(time)) / 1000);\n  const minutes = Math.round(seconds / 60);\n  const hours = Math.round(minutes / 60);\n  const days = Math.round(hours / 24);\n  const weeks = Math.round(days / 7);\n  const months = Math.round(days / 30.4);\n  const years = Math.round(days / 365);\n  const displayTime =\n    (minutes < 60 && `${minutes}min`) ||\n    (hours < 24 && `${hours}h`) ||\n    (days < 7 && `${days}d`) ||\n    (weeks < 5 && `${weeks}w`) ||\n    (months < 12 && `${months}mo`) ||\n    `${years}y`;\n  return displayTime;\n}\n","import { Ionicons as Icon } from \"@expo/vector-icons\";\nimport React from \"react\";\nimport { Alert, Pressable, StyleSheet } from \"react-native\";\nimport { Text } from \"./Themed\";\nimport useElapsedTime from \"../hooks/useElapsedTime\";\n\nexport interface ElapsedTimeProps {\n  time: string;\n}\n\nexport default function ElapsedTime(props: ElapsedTimeProps) {\n  const elapsedTime = useElapsedTime(props.time);\n  return (\n    <Pressable\n      hitSlop={8}\n      onPress={() => Alert.alert(\"Date posted\", props.time)}\n    >\n      <Text style={styles.root}>\n        <Icon name=\"time-outline\" size={14} /> {elapsedTime}\n      </Text>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {},\n});\n","import { Platform } from \"react-native\";\nimport * as Haptics from \"expo-haptics\";\n\nexport { ImpactFeedbackStyle } from \"expo-haptics\";\n\nexport async function impactAsync(style: Haptics.ImpactFeedbackStyle) {\n  if (Platform.OS === \"web\") return;\n  await Haptics.impactAsync(style);\n}\n","import { createContext } from \"react\";\n\nexport const defaultLotideContext: LotideContext = {\n  apiUrl: \"https://hoot.goldandblack.xyz/api/unstable\",\n  login: undefined,\n};\n\nexport default createContext({\n  ctx: defaultLotideContext,\n  setContext: (ctx: LotideContext) => {},\n});\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface VoteState {\n  post: { [key: PostId]: boolean };\n  reply: { [key: ReplyId]: boolean };\n}\n\nconst initialState: VoteState = {\n  post: {},\n  reply: {},\n};\n\nexport const voteSlice = createSlice({\n  name: \"vote\",\n  initialState,\n  reducers: {\n    setVote: (\n      state,\n      action: PayloadAction<{ type: ContentType; id: number; vote: boolean }>,\n    ) => {\n      const p = action.payload;\n      state[p.type][p.id] = p.vote;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setVote } = voteSlice.actions;\n\nexport default voteSlice.reducer;\n","export type RequestMethod = \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n\nexport function hasLogin(ctx: LotideContext): boolean {\n  return !!ctx.apiUrl && !!ctx.login;\n}\n\nexport async function lotideRequest(\n  ctx: LotideContext,\n  method: RequestMethod,\n  path: string,\n  body?: any,\n  noLogin: boolean = false,\n): Promise<any | undefined> {\n  if (!ctx.apiUrl) throw \"No API url\";\n  if (!noLogin && ctx.login == undefined) throw \"Not logged in\";\n  return fetch(`${ctx.apiUrl}/${path}`, {\n    method,\n    headers: buildHeaders(ctx),\n    body: body !== undefined ? JSON.stringify(body) : undefined,\n  })\n    .then(async res => {\n      if (res.ok) {\n        return res;\n      } else {\n        throw await res.text();\n      }\n    })\n    .catch(e => {\n      console.error(\n        `Lotide Service Error: ${method} ${ctx.apiUrl}/${path}\\n${e}`,\n        ctx,\n      );\n      throw e;\n    });\n}\n\nexport function buildHeaders(ctx: LotideContext): HeadersInit | undefined {\n  return ctx.login !== undefined\n    ? {\n        Authorization: `Bearer ${ctx.login.token}`,\n        \"Content-Type\": \"application/json\",\n      }\n    : undefined;\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getCommunities(\n  ctx: LotideContext,\n  onlyFollowing: boolean = false,\n  page?: string,\n): Promise<Paged<Community>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `communities?include_your=true&limit=100${\n      onlyFollowing ? \"&your_follow.accepted=true\" : \"\"\n    }${page ? `&page=${page}` : \"\"}`,\n  )\n    .then(data => data.json())\n    .then(data => {\n      return data;\n    });\n}\n\nexport async function getCommunity(\n  ctx: LotideContext,\n  communityId: CommunityId,\n): Promise<Community> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `communities/${communityId}?include_your=true`,\n  ).then(data => data.json());\n}\n\nexport async function getUserData(ctx: LotideContext, userId: number) {\n  return lotideRequest(ctx, \"GET\", `users/${userId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function followCommunity(\n  ctx: LotideContext,\n  communityId: number,\n): Promise<{ accepted: boolean }> {\n  return lotideRequest(ctx, \"POST\", `communities/${communityId}/follow`, {\n    try_wait_for_accept: true,\n  }).then(data => data.json());\n}\n\nexport async function unfollowCommunity(\n  ctx: LotideContext,\n  communityId: number,\n) {\n  return lotideRequest(ctx, \"POST\", `communities/${communityId}/unfollow`);\n}\n\nexport async function newCommunity(\n  ctx: LotideContext,\n  name: string,\n): Promise<{ community: { id: CommunityId } }> {\n  return lotideRequest(ctx, \"POST\", \"communities\", { name }).then(data =>\n    data.json(),\n  );\n}\n\nexport async function editCommunity(\n  ctx: LotideContext,\n  id: CommunityId,\n  description: string,\n) {\n  return lotideRequest(ctx, \"PATCH\", `communities/${id}`, { description });\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getInstanceInfo(\n  ctx: LotideContext,\n): Promise<InstanceInfo> {\n  return lotideRequest(ctx, \"GET\", \"instance\", undefined, true).then(data =>\n    data.json(),\n  );\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getPost(\n  ctx: LotideContext,\n  postId: PostId,\n): Promise<Post> {\n  return lotideRequest(ctx, \"GET\", `posts/${postId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function getPosts(\n  ctx: LotideContext,\n  page: string | null,\n  sort: SortOption = \"hot\",\n  inYourFollows?: boolean,\n  communityId?: CommunityId,\n): Promise<Paged<Post>> {\n  const url = [\n    page === null ? `posts?sort=${sort}` : `posts?page=${page}&sort=${sort}`,\n    `include_your=true`,\n    inYourFollows !== undefined && `in_your_follows=${inYourFollows}`,\n    communityId && `community=${communityId}`,\n  ]\n    .filter(x => x)\n    .join(\"&\");\n  return lotideRequest(ctx, \"GET\", url).then(data => data.json());\n}\n\nexport async function submitPost(\n  ctx: LotideContext,\n  post: NewPost,\n): Promise<{ id: PostId }> {\n  return lotideRequest(ctx, \"POST\", \"posts\", post).then(data => data.json());\n}\n\nexport async function applyVote(ctx: LotideContext, postId: PostId) {\n  return lotideRequest(ctx, \"PUT\", `posts/${postId}/your_vote`);\n}\n\nexport async function removeVote(ctx: LotideContext, postId: PostId) {\n  return lotideRequest(ctx, \"DELETE\", `posts/${postId}/your_vote`);\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getReply(\n  ctx: LotideContext,\n  replyId: ReplyId,\n): Promise<Reply> {\n  return lotideRequest(ctx, \"GET\", `comments/${replyId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function getPostReplies(\n  ctx: LotideContext,\n  postId: PostId,\n  page?: string,\n): Promise<Paged<Reply>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `posts/${postId}/replies?limit=10&include_your=true` +\n      (page ? `&page=${page}` : \"\"),\n  ).then(data => data.json());\n}\n\nexport async function getReplyReplies(\n  ctx: LotideContext,\n  replyId: ReplyId,\n  page?: string,\n): Promise<Paged<Reply>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `comments/${replyId}/replies?limit=10&include_your=true&sort=hot` +\n      (page ? `&page=${page}` : \"\"),\n  ).then(data => data.json());\n}\n\nexport async function replyToPost(\n  ctx: LotideContext,\n  postId: PostId,\n  content: string,\n): Promise<{ id: number }> {\n  return lotideRequest(ctx, \"POST\", `posts/${postId}/replies`, {\n    content_markdown: content,\n  }).then(data => data.json());\n}\n\nexport async function replyToReply(\n  ctx: LotideContext,\n  replyId: ReplyId,\n  content: string,\n): Promise<{ id: ReplyId }> {\n  return lotideRequest(ctx, \"POST\", `comments/${replyId}/replies`, {\n    content_markdown: content,\n  }).then(data => data.json());\n}\n\nexport async function applyReplyVote(ctx: LotideContext, replyId: ReplyId) {\n  return lotideRequest(ctx, \"PUT\", `comments/${replyId}/your_vote`);\n}\n\nexport async function removeReplyVote(ctx: LotideContext, replyId: ReplyId) {\n  return lotideRequest(ctx, \"DELETE\", `comments/${replyId}/your_vote`);\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { setVote } from \"../slices/voteSlice\";\nimport { AppDispatch, RootState } from \"../store/reduxStore\";\nimport * as LotideService from \"../services/LotideService\";\nimport { useContext, useEffect } from \"react\";\nimport LotideContext from \"../store/LotideContext\";\n\nexport default function useVote(type: ContentType, content: Post | Reply) {\n  const isUpvotedByAPI =\n    content.your_vote !== null && content.your_vote !== undefined;\n  const upvoteSelected: boolean | undefined = useSelector(\n    (state: RootState) => state.vote[type][content.id],\n  );\n  const dispatch = useDispatch<AppDispatch>();\n  const { ctx } = useContext(LotideContext);\n\n  useEffect(() => {\n    // TODO: This is a terrible way of doing this.\n    if (upvoteSelected === undefined) {\n      dispatchVote(isUpvotedByAPI);\n    }\n  }, [isUpvotedByAPI]);\n\n  const isUpvoted = !!upvoteSelected;\n\n  function dispatchVote(vote: boolean) {\n    dispatch(setVote({ type, id: content.id, vote }));\n  }\n\n  function addVote() {\n    if (type == \"post\") {\n      LotideService.applyVote(ctx, content.id).then(() => dispatchVote(true));\n    } else {\n      LotideService.applyReplyVote(ctx, content.id).then(() =>\n        dispatchVote(true),\n      );\n    }\n  }\n\n  function removeVote() {\n    if (type == \"post\") {\n      LotideService.removeVote(ctx, content.id).then(() => dispatchVote(false));\n    } else {\n      LotideService.removeReplyVote(ctx, content.id).then(() =>\n        dispatchVote(false),\n      );\n    }\n  }\n\n  const shouldAddOne = isUpvoted && !isUpvotedByAPI;\n  const shouldSubtractOne = !isUpvoted && isUpvotedByAPI;\n\n  return {\n    isUpvoted,\n    score: content.score + +shouldAddOne - +shouldSubtractOne,\n    addVote,\n    removeVote,\n  };\n}\n","import { Ionicons as Icon } from \"@expo/vector-icons\";\nimport React, { useContext } from \"react\";\nimport { Alert, Pressable, StyleSheet, ViewStyle } from \"react-native\";\nimport { View, Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport LotideContext from \"../store/LotideContext\";\nimport useVote from \"../hooks/useVote\";\n\nexport interface VoteCounterProps {\n  content: Post | Reply;\n  type: ContentType;\n  hideCount?: boolean;\n  style?: ViewStyle;\n  onVote?: (isUpvote: boolean) => void;\n}\n\nexport default function VoteCounter(props: VoteCounterProps) {\n  const theme = useTheme();\n  const { ctx } = useContext(LotideContext);\n  const { isUpvoted, score, addVote, removeVote } = useVote(\n    props.type,\n    props.content,\n  );\n\n  function toggleVote() {\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n\n    if (ctx.login === undefined) {\n      Alert.alert(\n        \"Login to like\",\n        \"Leave a like when you login to a community\",\n      );\n      return;\n    }\n\n    if (isUpvoted) {\n      removeVote();\n    } else {\n      addVote();\n    }\n  }\n\n  const scoreColor = isUpvoted ? theme.red : theme.text;\n\n  return (\n    <Pressable onPress={() => toggleVote()} hitSlop={7} style={props.style}>\n      <View style={styles.root}>\n        <Icon\n          name={isUpvoted ? \"heart\" : \"heart-outline\"}\n          color={scoreColor}\n          size={25}\n        />\n        {!props.hideCount && (\n          <Text\n            style={{ ...styles.score, color: scoreColor }}\n          >{`  ${score}  `}</Text>\n        )}\n      </View>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  score: {\n    fontSize: 18,\n    minWidth: 28,\n  },\n});\n","import React, { ReactNode, useMemo, useState } from \"react\";\nimport { Text, View } from \"react-native\";\nimport { Platform, Pressable, StyleSheet } from \"react-native\";\nimport HTMLView, { HTMLViewNode } from \"react-native-htmlview\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport useTheme from \"../hooks/useTheme\";\nimport { Alert } from \"react-native\";\nimport { ColorsObject } from \"../constants/Colors\";\n\nexport interface ContentDisplayProps {\n  contentHtml?: string;\n  contentText?: string;\n  contentMarkdown?: string;\n}\n\nexport default function ContentDisplay(props: ContentDisplayProps) {\n  const theme = useTheme();\n  const html = useMemo(\n    () =>\n      props.contentHtml ||\n      parseMarkdown(props.contentMarkdown) ||\n      `<p>${props.contentText}</p>`,\n    [props.contentHtml, props.contentMarkdown, props.contentText],\n  );\n  return (\n    <HTMLView\n      RootComponent={props => <Text {...props} />}\n      value={html.replace(/\\n/g, \"\")}\n      renderNode={renderNode(theme)}\n      stylesheet={{\n        a: { color: theme.secondaryTint },\n        cite: { fontStyle: \"italic\" },\n        del: {\n          textDecorationLine: \"line-through\",\n          textDecorationStyle: \"solid\",\n        },\n        dfn: { fontStyle: \"italic\" },\n        ins: { textDecorationLine: \"underline\" },\n        samp: { fontFamily: Platform.OS === \"ios\" ? \"Menlo\" : \"monospace\" },\n        small: { fontSize: 10 },\n      }}\n      textComponentProps={{ style: { color: theme.text } }}\n      onLinkLongPress={url => Alert.alert(\"Link\", url)}\n    />\n  );\n}\n\nconst renderNode =\n  (theme: ColorsObject) =>\n  (\n    node: HTMLViewNode,\n    index: number,\n    siblings: HTMLViewNode,\n    parent: HTMLViewNode,\n    defaultRenderer: (node: HTMLViewNode, parent: HTMLViewNode) => ReactNode,\n  ) => {\n    if ([\"iframe\", \"script\"].includes(node.name || \"\")) {\n      return null;\n    }\n\n    function children() {\n      return defaultRenderer((node as any).children, parent);\n    }\n\n    switch (node.name) {\n      case \"abbr\":\n        return (\n          <Pressable\n            key={index}\n            onPress={() => Alert.alert(\"Abbr.\", node.attribs.title)}\n          >\n            <Text\n              style={{\n                textDecorationLine: \"underline\",\n                textDecorationStyle: \"dotted\",\n              }}\n            >\n              {children()}\n            </Text>\n          </Pressable>\n        );\n      case \"blockquote\":\n        return (\n          <Text key={index}>\n            <View style={{ padding: 10 }}>\n              <View\n                style={{\n                  borderLeftWidth: 2,\n                  borderColor: theme.secondaryText,\n                  paddingLeft: 10,\n                  paddingVertical: 5,\n                }}\n              >\n                {children()}\n              </View>\n            </View>\n            {\"\\n\"}\n          </Text>\n        );\n      case \"details\":\n        return (\n          <Details key={index}>{children() as React.ReactChild[]}</Details>\n        );\n      case \"dl\":\n      case \"dt\":\n      case \"dd\":\n        return (\n          <Text key={index}>\n            {children()}\n            {\"\\n\"}\n          </Text>\n        );\n      case \"figure\":\n        return <View key={index}>{children()}</View>;\n      case \"hr\":\n        return (\n          <View\n            key={index}\n            style={{\n              width: 200,\n              alignSelf: \"stretch\",\n              borderBottomWidth: StyleSheet.hairlineWidth || 1,\n              borderColor: theme.secondaryText,\n            }}\n          />\n        );\n      case \"kbd\":\n        return (\n          <Text\n            key={index}\n            style={{ backgroundColor: theme.tertiaryBackground }}\n          >\n            {\" \"}\n            {children()}{\" \"}\n          </Text>\n        );\n      case \"img\":\n        return <Text key={index}>[Image not displayed]</Text>;\n      case \"li\":\n        return (\n          <Text key={index}>\n            {\"\\u2022 \"}\n            {children()}\n            {\"\\n\"}\n          </Text>\n        );\n      case \"sub\":\n        return (\n          <Text key={index} style={{ fontSize: 10 }}>\n            {children()}\n          </Text>\n        );\n      case \"summary\":\n        return <Text key={index}>{children()}</Text>;\n      case \"sup\":\n        return (\n          <View key={index}>\n            <Text style={{ fontSize: 10 }}>{children()}</Text>\n          </View>\n        );\n      default:\n        return undefined;\n    }\n  };\n\nfunction parseMarkdown(markdown?: string): string | undefined {\n  if (markdown === \"\" || markdown === undefined) return undefined;\n  return markdown\n    .replace(/^### (.*$)/gim, \"<h3>$1</h3>\")\n    .replace(/^## (.*$)/gim, \"<h2>$1</h2>\")\n    .replace(/^# (.*$)/gim, \"<h1>$1</h1>\")\n    .replace(/^\\> (.*$)/gim, \"<blockquote>$1</blockquote>\")\n    .replace(/\\*\\*(.*)\\*\\*/gim, \"<b>$1</b>\")\n    .replace(/\\*(.*)\\*/gim, \"<i>$1</i>\")\n    .replace(/!\\[(.*?)\\]\\((.*?)\\)/gim, \"<img alt='$1' src='$2' />\")\n    .replace(/\\[(.*?)\\]\\((.*?)\\)/gim, \"<a href='$2'>$1</a>\")\n    .replace(/\\n$/gim, \"<br />\")\n    .trim();\n}\n\nfunction Details({ children }: { children: React.ReactChild[] }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const theme = useTheme();\n\n  const [summary, ...realChildren] = children.filter(\n    (x: any) => x.props.children.toString().trim() !== \"\",\n  );\n\n  return (\n    <View>\n      <Pressable hitSlop={5} onPress={() => setIsOpen(x => !x)}>\n        <Text style={{ color: theme.secondaryTint }}>\n          {isOpen ? (\n            <Icon name=\"chevron-down-outline\" />\n          ) : (\n            <Icon name=\"chevron-forward-outline\" />\n          )}\n          {summary}\n        </Text>\n      </Pressable>\n      {isOpen && realChildren}\n    </View>\n  );\n}\n","import React from \"react\";\nimport { StyleSheet, TextStyle } from \"react-native\";\nimport { Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport interface ActorDisplayProps {\n  name: string;\n  host: string;\n  local: boolean;\n  colorize?: \"always\" | \"never\" | \"only_foreign\";\n  showHost?: \"always\" | \"never\" | \"only_foreign\";\n  newLine?: boolean;\n  style?: TextStyle;\n  styleName?: TextStyle;\n  styleHost?: TextStyle;\n}\n\nexport function ActorDisplay(props: ActorDisplayProps) {\n  const theme = useTheme();\n  const colorize = props.colorize || \"never\";\n  const showHost = props.showHost || \"only_foreign\";\n\n  const shouldDoIfLocal = (\n    when: \"always\" | \"never\" | \"only_foreign\",\n    local: boolean,\n  ) => {\n    if (when === \"always\") return true;\n    if (when === \"never\") return false;\n    return !local;\n  };\n\n  const shouldColorize = shouldDoIfLocal(colorize, props.local);\n  const shouldShowHost = shouldDoIfLocal(showHost, props.local);\n\n  const nameStyle = shouldColorize\n    ? { color: props.local ? theme.blue : theme.green }\n    : {};\n\n  return (\n    <Text style={[styles.root, props.style]}>\n      <Text style={[styles.name, nameStyle, props.styleName]}>\n        {props.name}\n      </Text>\n      {shouldShowHost && (\n        <Text\n          style={[styles.host, { color: theme.secondaryText }, props.styleHost]}\n        >\n          {props.newLine && \"\\n\"}\n          {!props.newLine && \"@\"}\n          {props.host}\n        </Text>\n      )}\n    </Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {},\n  name: {\n    fontWeight: \"500\",\n  },\n  host: {\n    fontWeight: \"200\",\n  },\n});\n\nexport default React.memo(ActorDisplay);\n","import Icon from \"@expo/vector-icons/Ionicons\";\nimport { openURL } from \"expo-linking\";\nimport React, { useMemo, useState } from \"react\";\nimport { StyleSheet, Image, Pressable } from \"react-native\";\nimport ElapsedTime from \"./ElapsedTime\";\nimport VoteCounter from \"./VoteCounter\";\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport ContentDisplay from \"./ContentDisplay\";\nimport ActorDisplay from \"./ActorDisplay\";\n\nexport interface PostDisplayProps {\n  post: Post;\n  navigation: any;\n  showHtmlContent?: boolean;\n  showAuthor?: boolean;\n}\n\nexport default function PostDisplay(props: PostDisplayProps) {\n  const [imgAspect, setImgAspect] = useState(1);\n  const isImage = useMemo(() => isImageUrl(props.post.href), [props.post.href]);\n  const theme = useTheme();\n\n  const post = props.post;\n\n  return (\n    <View>\n      <Text style={styles.title}>\n        {props.post.sticky && (\n          <>\n            <Icon name=\"pin\" size={25} color={theme.secondaryTint} />{\" \"}\n          </>\n        )}\n        {props.post.title}\n      </Text>\n      {props.post.href &&\n        (isImage ? (\n          <Image\n            style={{\n              ...styles.image,\n              aspectRatio: imgAspect,\n              backgroundColor: theme.secondaryBackground,\n            }}\n            source={{\n              uri: props.post.href,\n            }}\n            onLoad={event =>\n              setImgAspect(\n                Math.max(\n                  event.nativeEvent.source.width /\n                    event.nativeEvent.source.height,\n                  0.5,\n                ),\n              )\n            }\n          />\n        ) : (\n          <Pressable\n            style={[\n              styles.link,\n              { backgroundColor: theme.secondaryBackground },\n            ]}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              if (props.post.href) {\n                openURL(props.post.href);\n              }\n            }}\n          >\n            <Text>{props.post.href}</Text>\n          </Pressable>\n        ))}\n      {props.showHtmlContent && !!props.post.content_html && (\n        <View style={{ padding: 15 }}>\n          <ContentDisplay\n            contentHtml={props.post.content_html}\n            contentText={props.post.content_text}\n          />\n        </View>\n      )}\n      {props.showAuthor && (\n        <View\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            paddingHorizontal: 15,\n            paddingTop: 15,\n          }}\n        >\n          <Text style={styles.by}>by{\"   \"}</Text>\n          <ActorDisplay\n            name={post.author.username}\n            host={post.author.host}\n            local={post.author.local}\n            showHost={\"only_foreign\"}\n            colorize={\"always\"}\n            newLine={true}\n          />\n        </View>\n      )}\n      <View style={styles.foot}>\n        <Pressable\n          hitSlop={8}\n          onPress={() =>\n            props.navigation.navigate(\"Community\", {\n              community: props.post.community,\n            })\n          }\n          style={[\n            styles.footItem,\n            {\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            },\n          ]}\n        >\n          {props.showAuthor && <Text style={styles.by}>in{\"   \"}</Text>}\n          <ActorDisplay\n            name={post.community.name}\n            host={post.community.host}\n            local={post.community.local}\n            showHost={\"only_foreign\"}\n            colorize={props.showAuthor ? \"always\" : \"never\"}\n            newLine={true}\n          />\n        </Pressable>\n        <View style={{ flex: 1 }} />\n        <View style={styles.footItem}>\n          <ElapsedTime time={props.post.created} />\n        </View>\n        <View style={styles.footItem}>\n          <Text style={styles.footText}>\n            <Icon name=\"chatbubble-outline\" size={12} />{\" \"}\n            {props.post.replies_count_total}\n          </Text>\n        </View>\n        <View style={styles.footItem}>\n          <VoteCounter type=\"post\" content={post} />\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n  },\n  footText: {},\n  footItem: {\n    padding: 15,\n  },\n  by: {\n    fontSize: 11,\n  },\n  score: {\n    fontSize: 18,\n  },\n  actions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    padding: 10,\n  },\n});\n\nfunction isImageUrl(url?: string): boolean {\n  if (!url) return false;\n  return [\".png\", \".jpg\", \".jpeg\", \".bmp\", \".gif\", \".webp\"].some(ext =>\n    url.endsWith(ext),\n  );\n}\n","import { useState, useEffect, useContext } from \"react\";\nimport LotideContext from \"../store/LotideContext\";\nimport * as LotideService from \"../services/LotideService\";\nimport { useRefreshableData } from \"./useRefreshableData\";\n\nexport function usePosts(\n  sort?: SortOption,\n  inYourFollows?: boolean,\n  community?: CommunityId,\n): [Post[], boolean, () => void, () => void] {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [page, setPage] = useState<string | null>(null);\n  const [nextPage, setNextPage] = useState<string | null>(null);\n  const [loadingPage, setLoadingPage] =\n    useState<string | null | undefined>(undefined);\n  const [reloadId, setReloadId] = useState(0);\n  const ctx = useContext(LotideContext).ctx;\n\n  const [isLoading, refresh] = useRefreshableData(\n    stopLoading => {\n      if (!ctx.login) return;\n      if (loadingPage !== undefined) return;\n      setLoadingPage(page);\n      LotideService.getPosts(ctx, page, sort, inYourFollows, community)\n        .then(data => {\n          setPosts(p => [...p, ...data.items]);\n          setNextPage(data.next_page);\n          setLoadingPage(undefined);\n        })\n        .then(() => stopLoading())\n        .catch(e => {\n          stopLoading();\n          setPosts(p => [\n            ...p,\n            {\n              id: -1,\n              title: \"Lotide error\",\n              content_html: `<p>Error: ${e}</p>`,\n              created: \"\",\n              replies_count_total: 0,\n              score: 0,\n              sticky: true,\n              author: {\n                id: -1,\n                username: \"Failure\",\n                local: false,\n                host: \"hoot-mobile\",\n              },\n              community: {\n                id: -1,\n                name: \"something-went-wrong\",\n                local: false,\n                host: \"hoot-mobile\",\n              },\n            },\n          ]);\n        });\n    },\n    [reloadId, page],\n  );\n\n  useEffect(() => {\n    setPosts([]);\n    setPage(null);\n    setNextPage(null);\n    refresh();\n  }, [ctx, sort]);\n\n  function loadNextPage() {\n    if (nextPage !== null) {\n      setPage(nextPage);\n    }\n  }\n\n  function refreshData() {\n    setPosts([]);\n    setPage(null);\n    setNextPage(null);\n    setReloadId(id => id + 1);\n    refresh();\n  }\n\n  return [posts, isLoading, refreshData, loadNextPage];\n}\n\nexport function useReplies(\n  ctx: LotideContext,\n  postId: PostId,\n  deps: any[],\n  replyId?: ReplyId,\n): Paged<Reply> {\n  const [replies, setReplies] = useState({\n    items: [] as Reply[],\n  } as Paged<Reply>);\n  useEffect(() => {\n    if (replyId) {\n      LotideService.getReply(ctx, replyId).then(async reply => {\n        reply.replies = await LotideService.getReplyReplies(ctx, reply.id);\n        setReplies({ items: [reply], next_page: null });\n      });\n    } else {\n      LotideService.getPostReplies(ctx, postId).then(data => {\n        setReplies(data);\n      });\n    }\n  }, deps);\n  return replies;\n}\n","import { useState, useEffect } from \"react\";\n\nexport function useRefreshableData<T>(\n  effect: (stopLoading: () => void) => void | (() => void | undefined),\n  deps: any[],\n): [boolean, () => void] {\n  const [refreshCount, setRefreshCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    effect(() => setIsLoading(false));\n  }, [refreshCount, ...deps]);\n\n  function refresh() {\n    setRefreshCount(c => c + 1);\n    setIsLoading(true);\n  }\n\n  return [isLoading, refresh];\n}\n","export interface KnownHost {\n  name: string;\n  domain: string;\n}\n\nexport const KnownHosts: KnownHost[] = [\n  {\n    name: \"Gold&Black\",\n    domain: \"hoot.goldandblack.xyz\",\n  },\n  {\n    name: \"Narwhal.City\",\n    domain: \"narwhal.city\",\n  },\n  {\n    name: \"FBXL\",\n    domain: \"lotide.fbxl.net\",\n  },\n  {\n    name: \"Tide C\",\n    domain: \"c.tide.tk\",\n  },\n  {\n    name: \"Exopla\",\n    domain: \"lotide.exopla.net.eu.org\",\n  },\n  {\n    name: \"Narwhal.City (Dev)\",\n    domain: \"dev.narwhal.city\",\n  },\n  {\n    name: \"Tide B\",\n    domain: \"b.tide.tk\",\n  },\n  {\n    name: \"Tide A\",\n    domain: \"a.tide.tk\",\n  },\n];\n\nexport default KnownHosts;\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport const lotideContext = {\n  async store(ctx: LotideContext) {\n    return AsyncStorage.setItem(\"@lotide_ctx\", JSON.stringify(ctx));\n  },\n  async remove() {\n    return AsyncStorage.removeItem(\"@lotide_ctx\");\n  },\n  async query(): Promise<LotideContext | undefined> {\n    return AsyncStorage.getItem(\"@lotide_ctx\").then(ctxStr => {\n      if (ctxStr !== null) {\n        return JSON.parse(ctxStr) as LotideContext;\n      } else {\n        return undefined;\n      }\n    });\n  },\n};\n\nexport const lotideContextKV = {\n  async store(ctx: LotideContext) {\n    if (!ctx.login) return;\n    const name = `${ctx.login.user.username}@${ctx.apiUrl}`;\n    serviceKV.store(\"@lotide_ctx_arr\", name, ctx);\n  },\n  async query(k: string): Promise<LotideContext | undefined> {\n    return serviceKV.query<LotideContext>(\"@lotide_ctx_arr\", k);\n  },\n  async listKeys(): Promise<string[]> {\n    return serviceKV.listKeys(\"@lotide_ctx_arr\");\n  },\n  async remove(k: string): Promise<LotideContext | undefined> {\n    return serviceKV.remove(\"@lotide_ctx_arr\", k);\n  },\n  async logout(ctx: LotideContext) {\n    if (!ctx.login) return;\n    const name = `${ctx.login.user.username}@${ctx.apiUrl}`;\n    serviceKV.store(\"@lotide_ctx_arr\", name, { apiUrl: ctx.apiUrl });\n  },\n  async getStore(): Promise<{ [key: string]: LotideContext }> {\n    const storeStr = await AsyncStorage.getItem(\"@lotide_ctx_arr\");\n    return storeStr ? JSON.parse(storeStr) : {};\n  },\n};\n\nconst serviceKV = {\n  async store<T>(path: string, k: string, v: T) {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    store[k] = v;\n    await AsyncStorage.setItem(path, JSON.stringify(store));\n  },\n\n  async query<T>(path: string, k: string): Promise<T | undefined> {\n    const storeStr = await AsyncStorage.getItem(path);\n    return storeStr ? JSON.parse(storeStr)[k] : undefined;\n  },\n\n  async listKeys(path: string): Promise<string[]> {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    return Object.keys(store);\n  },\n\n  async remove<T>(path: string, k: string): Promise<T | undefined> {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    const v = store[k];\n    delete store[k];\n    await AsyncStorage.setItem(path, JSON.stringify(store));\n    return v;\n  },\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Platform, Pressable, ScrollView, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport KnownHosts from \"../constants/KnownHosts\";\nimport ActorDisplay from \"./ActorDisplay\";\nimport { Text, TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport useTheme from \"../hooks/useTheme\";\nimport { lotideContextKV } from \"../services/StorageService\";\nimport LotideContext from \"../store/LotideContext\";\n\nexport interface HostListProps {\n  onSelect: (domain: string, name?: string, username?: string) => void;\n}\n\ninterface HostData {\n  name: string;\n  domain: string;\n  instanceInfo?: InstanceInfo | null;\n}\n\nexport default function HostList(props: HostListProps) {\n  const [hostText, setHostText] = useState(\"\");\n  const [knownHosts, setKnowHosts] = useState<HostData[]>(KnownHosts);\n  const [existingProfiles, setExistingProfiles] = useState<\n    [string, LotideContext][]\n  >([]);\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n\n  useEffect(() => {\n    KnownHosts.map((h, i) => {\n      return LotideService.getInstanceInfo({\n        apiUrl: `https://${h.domain}/api/unstable`,\n      })\n        .then(d => {\n          setKnowHosts(hosts =>\n            hosts.map((h2, j) =>\n              i !== j\n                ? h2\n                : { name: h2.name, domain: h2.domain, instanceInfo: d },\n            ),\n          );\n        })\n        .catch(() => {\n          setKnowHosts(hosts =>\n            hosts.map((h2, j) =>\n              i !== j\n                ? h2\n                : { name: h2.name, domain: h2.domain, instanceInfo: null },\n            ),\n          );\n        });\n    });\n  }, []);\n\n  useEffect(() => {\n    lotideContextKV\n      .getStore()\n      .then(object => Object.entries(object))\n      .then(setExistingProfiles);\n  }, []);\n\n  const renderItem = ({ item }: { item: HostData }) => {\n    const enabled = item.instanceInfo?.software.version.startsWith(\"0.9.\");\n    const color = enabled ? theme.text : theme.secondaryText;\n    return (\n      <View\n        style={{\n          borderBottomWidth: StyleSheet.hairlineWidth || 1,\n          borderColor: theme.secondaryText,\n          paddingVertical: 25,\n        }}\n      >\n        <Pressable\n          onPress={() => enabled && props.onSelect(item.domain, item.name)}\n        >\n          <ActorDisplay\n            name={item.name}\n            host={item.domain}\n            local={false}\n            newLine={true}\n            styleName={{\n              fontSize: 24,\n              fontWeight: \"300\",\n              fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n              color,\n            }}\n          />\n          {item.instanceInfo ? (\n            <>\n              <Text style={{ color: theme.secondaryText }}>\n                {item.instanceInfo.software.version}\n                {!enabled && \" - Out of date\"}\n              </Text>\n              {!!item.instanceInfo.description && (\n                <Text style={{ color }}>{item.instanceInfo.description}</Text>\n              )}\n            </>\n          ) : item.instanceInfo === null ? (\n            <Text style={{ color }}>Failed to load info</Text>\n          ) : (\n            <Text style={{ color }}>Loading...</Text>\n          )}\n        </Pressable>\n      </View>\n    );\n  };\n  return (\n    <ScrollView contentContainerStyle={styles.root}>\n      <Text style={styles.title}>Login to continue</Text>\n      {existingProfiles.length > 0 && (\n        <Text style={styles.subtitle}>Select an existing profile</Text>\n      )}\n      {existingProfiles.map(p => {\n        const [username, url] = p[0].split(\"@\");\n        const isUnlocked = !!p[1].login;\n        const color = isUnlocked ? theme.text : theme.secondaryText;\n        const host = url\n          .replace(\"http://\", \"\")\n          .replace(\"https://\", \"\")\n          .split(/[/?#]/)[0];\n        const hostName = KnownHosts.find(x => x.domain == host)?.name;\n        return (\n          <Pressable\n            key={p[0]}\n            onPress={() => {\n              if (isUnlocked) {\n                lotideContext.setContext(p[1]);\n              } else {\n                props.onSelect(host.toLowerCase(), undefined, username);\n              }\n            }}\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <Icon\n              name={isUnlocked ? \"lock-open-outline\" : \"lock-closed-outline\"}\n              color={color}\n              style={{ marginRight: 10 }}\n              size={20}\n            />\n            <ActorDisplay\n              name={username}\n              host={host}\n              local={true}\n              showHost={\"always\"}\n              newLine={true}\n              style={{ paddingVertical: 15, paddingBottom: 10 }}\n              styleName={{ color }}\n            />\n            <View style={{ flex: 1 }} />\n            <Text\n              style={{\n                fontSize: 16,\n                color,\n                fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n              }}\n            >\n              {hostName}\n            </Text>\n          </Pressable>\n        );\n      })}\n      <Text style={styles.subtitle}>\n        {existingProfiles.length > 0\n          ? \"Or sign into a new acount\"\n          : \"Enter a host or select one below\"}\n      </Text>\n      <TextInput\n        placeholder=\"Host domain\"\n        style={{ paddingVertical: 10, paddingHorizontal: 10 }}\n        value={hostText}\n        onChangeText={setHostText}\n        onSubmitEditing={() => props.onSelect(hostText.toLowerCase())}\n        keyboardType=\"url\"\n        returnKeyType=\"next\"\n      />\n      {knownHosts\n        .filter(\n          x =>\n            hostText === \"\" ||\n            x.domain.includes(hostText.toLowerCase()) ||\n            x.name.toLowerCase().includes(hostText.toLowerCase()),\n        )\n        .map(item => (\n          <View key={item.domain}>{renderItem({ item })}</View>\n        ))}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 10,\n    textAlign: \"center\",\n  },\n  subtitle: {\n    fontWeight: \"300\",\n    marginBottom: 10,\n    marginTop: 15,\n    textAlign: \"center\",\n  },\n});\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n  TextInput as DefaultTextInput,\n} from \"react-native\";\nimport { Text, TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport useTheme from \"../hooks/useTheme\";\nimport { useNavigation } from \"@react-navigation/core\";\n\nexport interface LoginProps {\n  hostName?: string;\n  domain: string;\n  username?: string;\n  onGoBack: () => void;\n}\n\nexport default function Login(props: LoginProps) {\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [username, setUsername] = useState(props.username || \"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const usernameRef = useRef<DefaultTextInput>(null);\n  const passwordRef = useRef<DefaultTextInput>(null);\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n  const navigation = useNavigation();\n\n  function fail(message: string) {\n    Alert.alert(\"Failed to submit\", message);\n  }\n\n  function register() {\n    if (!username) return fail(\"Please enter a username\");\n    if (!password) return fail(\"Enter a password\");\n    if (!email) return fail(\"Please enter an email address\");\n\n    LotideService.register(\n      `https://${props.domain}/api/unstable`,\n      username,\n      password,\n      email,\n    )\n      .then(data => {\n        lotideContext.setContext({\n          apiUrl: `https://${props.domain}/api/unstable`,\n          login: data,\n        });\n      })\n      .catch(e => {\n        Alert.alert(\"Failed to register\", e);\n        console.error(e);\n      });\n  }\n\n  function login() {\n    if (!username) return fail(\"Please enter a username\");\n    if (!password) return fail(\"Enter a password\");\n\n    LotideService.login(\n      `https://${props.domain}/api/unstable`,\n      username,\n      password,\n    )\n      .then(data => {\n        lotideContext.setContext({\n          apiUrl: `https://${props.domain}/api/unstable`,\n          login: data,\n        });\n      })\n      .catch(e => {\n        Alert.alert(\"Failed to login\", e);\n        console.error(e);\n      });\n  }\n\n  function submit() {\n    if (isRegistering) {\n      register();\n    } else {\n      login();\n    }\n  }\n\n  return (\n    <Pressable\n      style={{ flex: 1 }}\n      onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n    >\n      <KeyboardAvoidingView style={styles.root} behavior=\"padding\">\n        {props.hostName ? (\n          <Pressable style={{ alignItems: \"center\" }}>\n            <Text style={styles.name}>{props.hostName}</Text>\n            <Text style={[styles.domain, { color: theme.secondaryText }]}>\n              {props.domain}\n            </Text>\n          </Pressable>\n        ) : (\n          <Pressable>\n            <Text style={{ fontSize: 24 }}>{props.domain}</Text>\n          </Pressable>\n        )}\n        <Pressable hitSlop={5} onPress={() => setIsRegistering(x => !x)}>\n          <Text style={[styles.loginRegister, { color: theme.secondaryText }]}>\n            <Text\n              style={{\n                color: isRegistering\n                  ? theme.secondaryText\n                  : theme.secondaryTint,\n              }}\n            >\n              Login\n            </Text>\n            {\" | \"}\n            <Text\n              style={{\n                color: isRegistering\n                  ? theme.secondaryTint\n                  : theme.secondaryText,\n              }}\n            >\n              Register\n            </Text>\n          </Text>\n        </Pressable>\n        {isRegistering && (\n          <TextInput\n            style={styles.input}\n            placeholder=\"Email Address\"\n            value={email}\n            onChangeText={setEmail}\n            keyboardType=\"email-address\"\n            textContentType=\"emailAddress\"\n            autoCompleteType=\"email\"\n            returnKeyType=\"next\"\n            onSubmitEditing={() => usernameRef.current?.focus()}\n          />\n        )}\n        <TextInput\n          ref={usernameRef}\n          style={styles.input}\n          placeholder=\"Username\"\n          value={username}\n          onChangeText={setUsername}\n          keyboardType=\"ascii-capable\"\n          textContentType=\"username\"\n          autoCompleteType=\"username\"\n          returnKeyType=\"next\"\n          onSubmitEditing={() => passwordRef.current?.focus()}\n        />\n        <TextInput\n          ref={passwordRef}\n          style={styles.input}\n          placeholder=\"Password\"\n          value={password}\n          onChangeText={setPassword}\n          secureTextEntry={true}\n          textContentType={isRegistering ? \"newPassword\" : \"password\"}\n          autoCompleteType=\"password\"\n          returnKeyType=\"done\"\n          onSubmitEditing={submit}\n        />\n        {!isRegistering && (\n          <Pressable\n            style={{ padding: 15 }}\n            onPress={() =>\n              navigation.navigate(\"ForgotPassword\", { node: props.domain })\n            }\n          >\n            <Text secondary>Forgot Password</Text>\n          </Pressable>\n        )}\n        <View style={styles.actionButtons}>\n          <Button\n            title=\"Change Host\"\n            onPress={props.onGoBack}\n            color={theme.secondaryTint}\n          />\n          <Button\n            title={isRegistering ? \"Register\" : \"Login\"}\n            onPress={submit}\n            color={theme.tint}\n          />\n        </View>\n      </KeyboardAvoidingView>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 35,\n  },\n  name: {\n    fontSize: 50,\n    fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n  },\n  domain: {\n    fontWeight: \"300\",\n  },\n  loginRegister: {\n    padding: 15,\n  },\n  input: {\n    width: \"100%\",\n    marginVertical: 5,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  actionButtons: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n});\n","import { lotideRequest } from \"./util\";\n\nexport async function login(\n  apiUrl: string,\n  username: string,\n  password: string,\n): Promise<Login> {\n  return lotideRequest(\n    { apiUrl },\n    \"POST\",\n    \"logins\",\n    { username, password },\n    true,\n  ).then(data => data.json());\n}\n\nexport async function register(\n  apiUrl: string,\n  username: string,\n  password: string,\n  email?: string,\n): Promise<Login> {\n  return lotideRequest(\n    { apiUrl },\n    \"POST\",\n    \"users\",\n    {\n      username,\n      password,\n      email_address: email,\n      login: true,\n    },\n    true,\n  ).then(data => data.json());\n}\n\nexport async function logout(ctx: LotideContext) {\n  return lotideRequest(ctx, \"DELETE\", \"logins/~current\");\n}\n\nexport async function forgotPasswordRequestKey(\n  ctx: LotideContext,\n  email: string,\n) {\n  return lotideRequest(\n    ctx,\n    \"POST\",\n    \"forgot_password/keys\",\n    {\n      email_address: email,\n    },\n    true,\n  );\n}\n\nexport async function forgotPasswordTestKey(ctx: LotideContext, key: string) {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `forgot_password/keys/${key}`,\n    undefined,\n    true,\n  );\n}\n\nexport async function forgotPasswordReset(\n  ctx: LotideContext,\n  key: string,\n  newPassword: string,\n) {\n  return lotideRequest(\n    ctx,\n    \"POST\",\n    `forgot_password/keys/${key}/reset`,\n    { new_password: newPassword },\n    true,\n  );\n}\n","import React, { useState } from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { View } from \"./Themed\";\nimport HostList from \"./HostList\";\nimport Login from \"./Login\";\n\nexport default function SuggestLogin() {\n  const [hostName, setHostName] = useState<string>();\n  const [domain, setDomain] = useState<string>();\n  const [username, setUsername] = useState<string>();\n\n  return (\n    <View style={styles.root}>\n      {!domain ? (\n        <HostList\n          onSelect={(domain, name, username) => {\n            setHostName(name);\n            setDomain(domain);\n            setUsername(username);\n          }}\n        />\n      ) : (\n        <Login\n          hostName={hostName}\n          domain={domain}\n          username={username}\n          onGoBack={() => setDomain(undefined)}\n        />\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  input: {\n    width: \"100%\",\n    marginBottom: 20,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  actionButtons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    width: \"100%\",\n  },\n});\n","import React, { ReactNode, useEffect, useRef, useState } from \"react\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport {\n  ColorValue,\n  NativeScrollEvent,\n  NativeSyntheticEvent,\n  Platform,\n  ScrollView,\n  useWindowDimensions,\n  View,\n} from \"react-native\";\nimport * as Haptics from \"../services/HapticService\";\n\nexport type Glyph = keyof typeof Icon.glyphMap;\n\nexport type SwipeActionProps = {\n  iconLeftSide: [Glyph, Glyph];\n  iconRightSide: [Glyph, Glyph];\n  colorLeftSide: ColorValue;\n  colorRightSide: ColorValue;\n  backgroundColor?: ColorValue;\n  onLeftSide: () => void;\n  onRightSide: () => void;\n  onReturnToCenter?: () => void;\n  children: ReactNode;\n  distanceToActivate?: number;\n};\n\nexport default function SwipeAction(props: SwipeActionProps) {\n  if (Platform.OS !== \"ios\") return <>{props.children}</>;\n  const distanceToActivate = props.distanceToActivate || 60;\n  const [isScrolling, setIsScrolling] = useState(false);\n  const [scroll, setScroll] = useState(0);\n  const [isLeft, setIsLeft] = useState(false);\n  const [isRight, setIsRight] = useState(false);\n  const [isCommitted, setIsCommitted] = useState(false);\n  const dimensions = useWindowDimensions();\n  const scrollRef = useRef<ScrollView>(null);\n\n  useEffect(() => {\n    if (scroll < 0 && !isLeft) {\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n      setIsLeft(true);\n    } else if (scroll >= 0 && isLeft) {\n      setIsLeft(false);\n      if (!isScrolling) {\n        setIsCommitted(true);\n        props.onLeftSide();\n      }\n    }\n    if (scroll >= distanceToActivate * 2 && !isRight) {\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n      setIsRight(true);\n    } else if (scroll < distanceToActivate * 2 && isRight) {\n      setIsRight(false);\n      if (!isScrolling) {\n        setIsCommitted(true);\n        props.onRightSide();\n      }\n    }\n    if (scroll == distanceToActivate) {\n      props.onReturnToCenter?.();\n      setIsRight(false);\n      setIsLeft(false);\n      setIsCommitted(false);\n    }\n  }, [scroll]);\n\n  function onScroll(event: NativeSyntheticEvent<NativeScrollEvent>) {\n    const scroll = event?.nativeEvent?.contentOffset?.x;\n    setScroll(scroll);\n  }\n\n  return (\n    <ScrollView\n      ref={scrollRef}\n      horizontal\n      snapToOffsets={[\n        distanceToActivate,\n        distanceToActivate + dimensions.width,\n      ]}\n      snapToStart={false}\n      snapToEnd={false}\n      onScrollBeginDrag={() => setIsScrolling(true)}\n      onScrollEndDrag={() => {\n        scrollRef.current?.scrollTo({ x: distanceToActivate });\n        setIsScrolling(false);\n      }}\n      contentOffset={{ x: distanceToActivate, y: 0 }}\n      onScroll={onScroll}\n      scrollEventThrottle={100}\n      showsHorizontalScrollIndicator={false}\n      style={{ backgroundColor: props.backgroundColor }}\n      overScrollMode=\"always\"\n    >\n      <View\n        style={{\n          width: distanceToActivate,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <Icon\n          name={props.iconLeftSide[+isLeft || +isCommitted]}\n          color={props.colorLeftSide}\n          size={25}\n        />\n      </View>\n      <View style={{ width: dimensions.width }}>{props.children}</View>\n      <View\n        style={{\n          width: distanceToActivate,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <Icon\n          name={props.iconRightSide[+isRight || +isCommitted]}\n          color={props.colorRightSide}\n          size={25}\n        />\n      </View>\n    </ScrollView>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { StyleSheet, FlatList, Pressable } from \"react-native\";\n\nimport PostDisplay from \"../components/PostDisplay\";\nimport { View } from \"../components/Themed\";\nimport * as Haptics from \"../services/HapticService\";\nimport { usePosts } from \"../hooks/lotide\";\nimport { RootTabScreenProps } from \"../types\";\nimport useTheme from \"../hooks/useTheme\";\nimport LotideContext from \"../store/LotideContext\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport { hasLogin } from \"../services/LotideService\";\nimport SwipeAction from \"../components/SwipeAction\";\nimport useVote from \"../hooks/useVote\";\n\nexport default function FeedScreen({\n  navigation,\n  route,\n}: RootTabScreenProps<\"FeedScreen\">) {\n  const sort = route.params.sort;\n  const ctx = useContext(LotideContext).ctx;\n  const [posts, isLoadingPosts, refreshPosts, loadNextPage] = usePosts(\n    sort,\n    true,\n  );\n  if (!hasLogin(ctx)) return <SuggestLogin />;\n  const renderItem = ({ item }: { item: Post }) => (\n    <Item post={item} navigation={navigation} />\n  );\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={posts}\n        renderItem={renderItem}\n        keyExtractor={(post, index) => `${post.id}-${index}`}\n        refreshing={isLoadingPosts}\n        onRefresh={refreshPosts}\n        onEndReachedThreshold={2}\n        onEndReached={loadNextPage}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n    borderBottomWidth: 8,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n    color: \"#eee\",\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    backgroundColor: \"#8884\",\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n  },\n  footText: {\n    color: \"#ccc\",\n  },\n  by: {\n    fontSize: 11,\n  },\n  score: {\n    fontSize: 18,\n    color: \"#bbb\",\n  },\n});\n\nconst Item = ({ post, navigation }: { post: Post; navigation: any }) => {\n  const { isUpvoted, addVote, removeVote } = useVote(\"post\", post);\n  const [isCommitting, setIsCommitting] = useState(false);\n  const theme = useTheme();\n\n  return (\n    <SwipeAction\n      iconLeftSide={\n        isUpvoted !== isCommitting\n          ? [\"heart-dislike\", \"heart-dislike-outline\"]\n          : [\"heart-outline\", \"heart\"]\n      }\n      iconRightSide={[\"arrow-undo-outline\", \"arrow-undo\"]}\n      colorLeftSide={theme.red}\n      colorRightSide={theme.blue}\n      onLeftSide={() => {\n        isUpvoted ? removeVote() : addVote();\n        setIsCommitting(true);\n      }}\n      onRightSide={() => {\n        navigation.navigate(\"Reply\", {\n          id: post.id,\n          title: post.title,\n          html: post.content_html,\n          type: \"post\",\n        });\n      }}\n      onReturnToCenter={() => setIsCommitting(false)}\n      backgroundColor={theme.secondaryBackground}\n    >\n      <Pressable\n        style={{ width: \"100%\" }}\n        onPress={() => navigation.navigate(\"Post\", { post })}\n        onLongPress={() => {\n          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n          console.log(post);\n        }}\n      >\n        <View\n          style={[\n            styles.item,\n            { borderBottomColor: theme.secondaryBackground },\n          ]}\n        >\n          <PostDisplay post={post} navigation={navigation} />\n        </View>\n      </Pressable>\n    </SwipeAction>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { FlatList, Pressable, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport LotideContext from \"../store/LotideContext\";\nimport { TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport ActorDisplay from \"./ActorDisplay\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport interface CommunityFinderProps {\n  placeholder?: string;\n  onlyWhenTyping?: boolean;\n  focusId?: number;\n  onSelect: (community: Community) => void;\n}\n\nexport default function CommunityFinder(props: CommunityFinderProps) {\n  const [communities, setCommunities] = useState<Paged<Community>>();\n  const [filterText, setFilterText] = useState(\"\");\n  const ctx = useContext(LotideContext).ctx;\n  const theme = useTheme();\n\n  const communitiesToDisplay = (() => {\n    if (props.onlyWhenTyping && filterText === \"\") return [];\n    if (!communities) return [];\n    if (filterText === \"\") return communities.items;\n    return communities.items.filter(\n      c =>\n        c.name.toLowerCase().includes(filterText.toLowerCase()) ||\n        c.host.includes(filterText.toLowerCase()),\n    );\n  })();\n\n  useEffect(() => {\n    LotideService.getCommunities(ctx, false).then(setCommunities);\n  }, [ctx.login?.token, props.focusId]);\n\n  const renderItem = ({ item }: { item: Community }) => {\n    return (\n      <Pressable\n        onPress={() => props.onSelect(item)}\n        style={[\n          styles.item,\n          {\n            borderColor: theme.secondaryBackground,\n          },\n        ]}\n      >\n        <ActorDisplay\n          name={item.name}\n          host={item.host}\n          local={item.local}\n          colorize={\"always\"}\n          newLine\n        />\n        <View style={{ display: \"flex\", flexDirection: \"row\" }}>\n          {item.you_are_moderator && (\n            <Icon name=\"shield-outline\" size={20} color={theme.secondaryTint} />\n          )}\n          {item.your_follow?.accepted && (\n            <Icon\n              name=\"checkmark\"\n              size={20}\n              color={theme.secondaryTint}\n              style={{ marginLeft: 5 }}\n            />\n          )}\n        </View>\n      </Pressable>\n    );\n  };\n\n  return (\n    <View>\n      <TextInput\n        placeholder={props.placeholder || \"Filter communities\"}\n        value={filterText}\n        onChangeText={setFilterText}\n        style={styles.input}\n      />\n      <FlatList\n        data={communitiesToDisplay}\n        renderItem={renderItem}\n        keyExtractor={(item, index) => `${item.id}-${index}`}\n        contentContainerStyle={styles.list}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  input: {\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginTop: 20,\n  },\n  list: {\n    padding: 20,\n    paddingBottom: 100,\n  },\n  item: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    height: 50,\n    borderBottomWidth: 1,\n    paddingHorizontal: 20,\n  },\n});\n","import React, { useContext, useEffect, useState } from \"react\";\nimport LotideContext from \"../store/LotideContext\";\nimport { RootTabScreenProps } from \"../types\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport CommunityFinder from \"../components/CommunityFinder\";\n\nexport default function SearchScreen({\n  navigation,\n}: RootTabScreenProps<\"SearchScreen\">) {\n  const [focusId, setFocusId] = useState(0);\n  const { ctx } = useContext(LotideContext);\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(x => x + 1)),\n    [],\n  );\n\n  if (!ctx.login) return <SuggestLogin />;\n\n  return (\n    <CommunityFinder\n      onSelect={community => navigation.navigate(\"Community\", { community })}\n      focusId={focusId}\n    />\n  );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Alert, Button, Pressable, ScrollView, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { View, Text, TextInput } from \"../components/Themed\";\nimport { getUserData } from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { RootTabScreenProps } from \"../types\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport * as LotideService from \"../services/LotideService\";\nimport * as StorageService from \"../services/StorageService\";\nimport useTheme from \"../hooks/useTheme\";\nimport ActorDisplay from \"../components/ActorDisplay\";\n\nexport default function ProfileScreen({\n  navigation,\n}: RootTabScreenProps<\"ProfileScreen\">) {\n  const [profile, setProfile] = useState<Profile>();\n  const [profileList, setProfileList] = useState<string[]>([]);\n  const [communities, setCommunities] = useState<Community[]>([]);\n  const [isEditing, setIsEditing] = useState(false);\n  const [focusId, setFocusId] = useState(0);\n  const theme = useTheme();\n  const { ctx, setContext } = useContext(LotideContext);\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(x => x + 1)),\n    [],\n  );\n\n  useEffect(() => {\n    if (!ctx.login) return;\n    // TODO: Use the pagination feature\n    LotideService.getCommunities(ctx, true).then(communities =>\n      setCommunities(communities.items),\n    );\n  }, [ctx.login?.user.id, focusId]);\n\n  useEffect(() => {\n    if (ctx.login !== undefined && ctx.login.user !== undefined) {\n      getUserData(ctx, ctx.login?.user.id || 0).then(setProfile);\n    }\n  }, [ctx.login?.token, focusId]);\n\n  useEffect(() => {\n    StorageService.lotideContextKV\n      .listKeys()\n      .then(keys => setProfileList(keys));\n  }, [ctx, focusId]);\n\n  if (ctx.login === undefined) {\n    return <SuggestLogin />;\n  }\n\n  function logout() {\n    Alert.alert(\n      \"Log out\",\n      \"Would you like to keep the login profile handy for later?\",\n      [\n        {\n          text: \"Cancel\",\n          style: \"cancel\",\n        },\n        {\n          text: \"Remove\",\n          onPress: () => {\n            StorageService.lotideContextKV\n              .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n              .then(() => LotideService.logout(ctx))\n              .then(() => setContext({}));\n          },\n        },\n        {\n          text: \"Keep\",\n          style: \"default\",\n          onPress: () => {\n            StorageService.lotideContextKV.logout(ctx);\n            setContext({});\n          },\n        },\n      ],\n      { cancelable: true },\n    );\n  }\n\n  return (\n    <ScrollView\n      style={[styles.container, { backgroundColor: theme.background }]}\n    >\n      <View style={styles.header}>\n        <View>\n          <Pressable hitSlop={10} onPress={() => setIsEditing(x => !x)}>\n            <Text style={styles.title}>\n              {profile?.username || ctx.login.user.username}\n              {\"  \"}\n              <Icon\n                name=\"pencil-outline\"\n                size={20}\n                color={theme.secondaryText}\n              />\n            </Text>\n          </Pressable>\n          <Text style={{ color: theme.secondaryText }}>{profile?.host}</Text>\n          {!!profile?.avatar && <Text>{profile?.avatar?.url}</Text>}\n          {!!profile?.description && <Text>{profile?.description}</Text>}\n        </View>\n        <Button\n          onPress={logout}\n          title=\"Log Out\"\n          color={theme.secondaryTint}\n          accessibilityLabel=\"Log out of the Hoot network\"\n        />\n      </View>\n      {isEditing && (\n        <View style={styles.editView}>\n          <TextInput style={styles.editViewText} placeholder=\"New email\" />\n          <TextInput\n            style={styles.editViewText}\n            placeholder=\"User bio\"\n            multiline={true}\n          />\n          <TextInput style={styles.editViewText} placeholder=\"New password\" />\n          <TextInput\n            style={styles.editViewText}\n            placeholder=\"Confirm new password\"\n          />\n          <View style={styles.editViewActionButtons}>\n            <Button\n              onPress={() => setIsEditing(false)}\n              title=\"Cancel\"\n              color={theme.secondaryTint}\n              accessibilityLabel=\"Add profile\"\n            />\n            <Button\n              onPress={() => Alert.alert(\"unimplemented\")}\n              title=\"Submit\"\n              color={theme.tint}\n              accessibilityLabel=\"Add profile\"\n            />\n          </View>\n        </View>\n      )}\n      <Button\n        onPress={() => setContext({})}\n        title=\"Add Profile\"\n        color={theme.tint}\n        accessibilityLabel=\"Add profile\"\n      />\n      {profileList\n        .map(p => [p, ...p.split(\"@\")] as string[])\n        .map(p => [\n          p[0],\n          p[1],\n          p[2].replace(\"http://\", \"\").replace(\"https://\", \"\").split(/[/?#]/)[0],\n        ])\n        .map(p => (\n          <Pressable\n            key={p[0]}\n            style={[\n              styles.altProfileButton,\n              { borderColor: theme.secondaryBackground },\n            ]}\n            onPress={() => {\n              StorageService.lotideContextKV.query(p[0]).then(ctx => {\n                if (ctx !== undefined) {\n                  setContext(ctx);\n                  setIsEditing(false);\n                }\n              });\n            }}\n          >\n            <ActorDisplay\n              name={p[1]}\n              host={p[2]}\n              local={true}\n              showHost={\"always\"}\n              colorize={\"never\"}\n              newLine={true}\n            />\n          </Pressable>\n        ))}\n      <View style={{ paddingTop: 10 }}>\n        <Button\n          onPress={() => navigation.navigate(\"NewCommunity\")}\n          title=\"Create Community\"\n          color={theme.tint}\n          accessibilityLabel=\"Create a new community\"\n        />\n      </View>\n      <Text style={styles.followingTitle}>Communities You Follow:</Text>\n      {communities.map(community => (\n        <View\n          key={community.id}\n          style={[\n            styles.altProfileButton,\n            { borderColor: theme.secondaryBackground },\n          ]}\n        >\n          <ActorDisplay\n            name={community.name}\n            host={community.host}\n            local={community.local}\n            showHost={\"always\"}\n            colorize={\"always\"}\n            newLine={true}\n          />\n        </View>\n      ))}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\",\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  followingTitle: {\n    fontSize: 18,\n    fontWeight: \"500\",\n    padding: 20,\n  },\n  editView: {\n    margin: 20,\n  },\n  editViewText: {\n    marginBottom: 15,\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n  },\n  editViewActionButtons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    height: 40,\n    borderWidth: 1,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  altProfileButton: {\n    marginHorizontal: 20,\n    paddingVertical: 15,\n    borderBottomWidth: 1,\n  },\n});\n","import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n  TextInput,\n  TouchableWithoutFeedback,\n} from \"react-native\";\nimport { View, Text, TextInput as TextInputThemed } from \"../components/Themed\";\nimport LotideContext from \"../store/LotideContext\";\nimport { RootTabScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport useTheme from \"../hooks/useTheme\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport CommunityFinder from \"../components/CommunityFinder\";\nimport ActorDisplay from \"../components/ActorDisplay\";\n\nexport default function NewPostScreen({\n  navigation,\n  route,\n}: RootTabScreenProps<\"NewPostScreen\">) {\n  const [community, setCommunity] = useState<Community | null | undefined>(\n    route.params.community,\n  );\n  const [title, setTitle] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n  const ctx = lotideContext.ctx;\n\n  useEffect(() => {\n    return navigation.addListener(\"focus\", () => {\n      if (route.params.community) {\n        return setCommunity(route.params.community);\n      }\n      if (community === null) {\n        return setCommunity(undefined);\n      }\n    });\n  }, [community, community?.id, route.params.community?.id]);\n\n  if (ctx.login === undefined) {\n    return <SuggestLogin />;\n  }\n\n  if (community === null)\n    return <CommunityFinder onSelect={setCommunity} onlyWhenTyping />;\n\n  function submit() {\n    if (!community) return;\n    LotideService.submitPost(ctx, {\n      community: community.id,\n      title: title,\n      href: link || undefined,\n      content_markdown: content || \" \",\n    })\n      .then(data => {\n        LotideService.getPost(ctx, data.id).then(post => {\n          reset();\n          navigation.navigate(\"Post\", { post });\n        });\n      })\n      .catch(e => Alert.alert(\"Could not submit post\", e));\n  }\n\n  function reset() {\n    setCommunity(undefined);\n    setTitle(\"\");\n    setLink(\"\");\n    setContent(\"\");\n  }\n\n  return (\n    <KeyboardAvoidingView style={{ width: \"100%\", height: \"100%\" }}>\n      <TouchableWithoutFeedback\n        onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n      >\n        <View style={styles.container}>\n          <Pressable onPress={() => setCommunity(null)}>\n            {community ? (\n              <ActorDisplay\n                name={community.name}\n                host={community.host}\n                local={community.local}\n                colorize={\"always\"}\n                showHost={\"always\"}\n                newLine\n                style={styles.input}\n              />\n            ) : (\n              <Text style={[styles.input, { color: theme.secondaryText }]}>\n                Select a Community\n              </Text>\n            )}\n          </Pressable>\n          <TextInput\n            style={[styles.input, styles.title, { color: theme.text }]}\n            placeholder=\"Add a Title\"\n            placeholderTextColor={theme.placeholderText}\n            value={title}\n            onChangeText={setTitle}\n          />\n          {title.length >= 4 ? (\n            <>\n              <TextInput\n                style={[styles.input, { color: theme.text }]}\n                placeholder=\"Link\"\n                placeholderTextColor={theme.placeholderText}\n                value={link}\n                onChangeText={setLink}\n                keyboardType=\"url\"\n                textContentType=\"URL\"\n              />\n              <TextInputThemed\n                style={{ marginVertical: 20, minHeight: 100 }}\n                multiline\n                placeholder=\"Add post content\"\n                value={content}\n                onChangeText={setContent}\n              />\n            </>\n          ) : (\n            <Text style={{ color: theme.secondaryText }}>\n              {title.length > 0 && 4 - title.length}\n            </Text>\n          )}\n          {!!community && title.length >= 4 && (\n            <Button\n              onPress={submit}\n              title=\"Submit\"\n              color={theme.tint}\n              accessibilityLabel=\"Submit new post\"\n            />\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"stretch\",\n    padding: 15,\n    height: \"100%\",\n    width: \"100%\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    paddingVertical: 10,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  item: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginBottom: 1,\n  },\n});\n","import React from \"react\";\nimport { View, Text } from \"../components/Themed\";\n\nexport default function SettingsScreen() {\n  return (\n    <View>\n      <Text>Settings screen. It'll be implemented eventually.</Text>\n    </View>\n  );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Alert, Button, FlatList, Pressable, StyleSheet } from \"react-native\";\nimport { View, Text } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as Haptics from \"../services/HapticService\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { usePosts } from \"../hooks/lotide\";\nimport PostDisplay from \"../components/PostDisplay\";\n\nexport default function CommunityScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Community\">) {\n  const [community, setCommunity] = useState(route.params.community);\n  const [posts, isLoadingPosts, refreshPosts, loadNextPage] = usePosts(\n    \"hot\",\n    undefined,\n    community.id,\n  );\n  const [reloadId, setReloadId] = useState(0);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  useEffect(() => {\n    LotideService.getCommunity(ctx, community.id).then(setCommunity);\n  }, [route.params.community.id, route.params.community.description, reloadId]);\n\n  const renderItem = ({ item }: { item: Post }) => (\n    <Item post={item} navigation={navigation} />\n  );\n\n  const isFollowing = community.your_follow?.accepted || false;\n\n  function follow() {\n    LotideService.followCommunity(ctx, community.id).then(data => {\n      if (data.accepted === false) {\n        Alert.alert(\n          \"Follow request rejected.\",\n          \"This could be an issue with the node you are connected to.\",\n        );\n      }\n      setReloadId(x => x + 1);\n    });\n  }\n\n  function unfollow() {\n    LotideService.unfollowCommunity(ctx, community.id).then(() => {\n      setReloadId(x => x + 1);\n    });\n  }\n\n  return (\n    <View style={[styles.root, { backgroundColor: theme.background }]}>\n      <View\n        style={[styles.header, { borderBottomColor: theme.tertiaryBackground }]}\n      >\n        <View>\n          <Text style={[styles.title]}>{community.name}</Text>\n          <Text\n            style={{\n              color: community.local ? theme.blue : theme.green,\n              fontWeight: \"500\",\n            }}\n          >\n            {community.host}\n          </Text>\n          {community.description !== \"\" && (\n            <Text>\n              {\"\\n\"}\n              {community.description}\n            </Text>\n          )}\n        </View>\n        <View style={styles.buttons}>\n          <Button\n            onPress={() => navigation.navigate(\"NewPostScreen\", { community })}\n            title=\"Post\"\n            color={theme.tint}\n            accessibilityLabel=\"Post to this community\"\n          />\n          {community.you_are_moderator && (\n            <Button\n              onPress={() =>\n                navigation.navigate(\"EditCommunity\", { community })\n              }\n              title=\"Edit\"\n              color={theme.tint}\n              accessibilityLabel=\"Edit your community community\"\n            />\n          )}\n          {isFollowing ? (\n            <Button\n              onPress={unfollow}\n              title=\"Unfollow\"\n              color={theme.secondaryTint}\n              accessibilityLabel=\"Stop seeing posts from this community\"\n            />\n          ) : (\n            <Button\n              onPress={follow}\n              title=\"Follow\"\n              color={theme.tint}\n              accessibilityLabel=\"See posts from this community in your feed\"\n            />\n          )}\n        </View>\n      </View>\n      <FlatList\n        data={posts}\n        renderItem={renderItem}\n        keyExtractor={(post, index) => `${post.id}-${index}`}\n        refreshing={isLoadingPosts}\n        onRefresh={refreshPosts}\n        onEndReachedThreshold={2}\n        onEndReached={loadNextPage}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    height: \"100%\",\n  },\n  header: {\n    padding: 20,\n    borderBottomWidth: StyleSheet.hairlineWidth || 1,\n  },\n  title: {\n    fontSize: 20,\n  },\n  buttons: {\n    paddingTop: 10,\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n    borderBottomWidth: 8,\n  },\n});\n\nconst Item = ({ post, navigation }: { post: Post; navigation: any }) => {\n  const theme = useTheme();\n  return (\n    <Pressable\n      onPress={() => navigation.navigate(\"Post\", { post })}\n      onLongPress={() => {\n        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n      }}\n    >\n      <View\n        style={[styles.item, { borderBottomColor: theme.secondaryBackground }]}\n      >\n        <PostDisplay post={post} navigation={navigation} />\n      </View>\n    </Pressable>\n  );\n};\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport { Text, TextInput } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport ContentDisplay from \"../components/ContentDisplay\";\nimport { ScrollView } from \"react-native-gesture-handler\";\n\nexport default function ReplyScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Reply\">) {\n  const [text, setText] = useState(\"\");\n  const scrollRef = useRef<ScrollView>(null);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n  const id = route.params.id;\n  const title = route.params.title;\n  const html = route.params.html;\n  const type = route.params.type;\n\n  function submit() {\n    if (type === \"post\") {\n      LotideService.replyToPost(ctx, id, text).then(() => navigation.pop());\n    } else {\n      LotideService.replyToReply(ctx, id, text).then(() => navigation.pop());\n    }\n  }\n\n  function scrollToBottom() {\n    if (scrollRef.current) {\n      scrollRef.current.scrollToEnd({ animated: true });\n    }\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n    >\n      <ScrollView ref={scrollRef}>\n        <Pressable\n          style={styles.root}\n          onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n        >\n          <Text>Reply to {type}</Text>\n          {!!title && <Text style={styles.title}>{title}</Text>}\n          {html && <ContentDisplay contentHtml={html} />}\n          <TextInput\n            style={styles.input}\n            multiline\n            placeholder=\"Type your reply\"\n            value={text}\n            onChangeText={setText}\n            onFocus={scrollToBottom}\n          />\n          <Button title=\"Submit\" color={theme.tint} onPress={submit} />\n        </Pressable>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: { padding: 20, paddingBottom: 100 },\n  title: {\n    fontSize: 20,\n    marginVertical: 10,\n  },\n  input: {\n    marginVertical: 20,\n    minHeight: 100,\n  },\n});\n","import React from \"react\";\n\nexport const defaultSelectedReplyContext: SelectedReplyContext = [\n  undefined,\n  () => {},\n];\n\nexport const SelectedReplyContext = React.createContext<SelectedReplyContext>(\n  defaultSelectedReplyContext,\n);\n","import React, { useContext, useState } from \"react\";\nimport { ColorValue, Pressable, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { View, Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport ElapsedTime from \"./ElapsedTime\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport ContentDisplay from \"./ContentDisplay\";\nimport { SelectedReplyContext } from \"../store/SelectedReplyContext\";\nimport VoteCounter from \"./VoteCounter\";\nimport ActorDisplay from \"./ActorDisplay\";\n\nexport interface RepliesDisplayProps {\n  replies: Paged<Reply>;\n  navigation: any;\n  layer?: number;\n  postId?: PostId;\n  replyId?: ReplyId;\n  highlightedReplies?: ReplyId[];\n}\n\nexport default function RepliesDisplay({\n  replies,\n  navigation,\n  layer = 0,\n  postId,\n  replyId,\n  highlightedReplies = [],\n}: RepliesDisplayProps) {\n  const [nextPageData, setNextPageData] = useState<Paged<Reply>>();\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n  const layerColors = [\n    theme.text,\n    theme.red,\n    theme.orange,\n    theme.yellow,\n    theme.green,\n    theme.teal,\n    theme.blue,\n    theme.indigo,\n    theme.purple,\n  ];\n\n  return (\n    <View>\n      {replies.items.map(reply => (\n        <ReplyDisplay\n          reply={reply}\n          layer={layer}\n          key={reply.id}\n          navigation={navigation}\n          layerColors={layerColors}\n          postId={postId}\n          highlightedReplies={highlightedReplies}\n        />\n      ))}\n      {replies.next_page !== null &&\n        nextPageData === undefined &&\n        (postId || replyId) && (\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              if (replyId) {\n                LotideService.getReplyReplies(\n                  ctx,\n                  replyId,\n                  replies.next_page || undefined,\n                ).then(setNextPageData);\n              } else if (postId) {\n                LotideService.getPostReplies(\n                  ctx,\n                  postId,\n                  replies.next_page || undefined,\n                ).then(setNextPageData);\n              }\n            }}\n          >\n            <Text\n              style={{ color: theme.tint, paddingTop: 5, paddingBottom: 10 }}\n            >\n              More replies <Icon name=\"chevron-down-outline\" />\n            </Text>\n          </Pressable>\n        )}\n      {nextPageData !== undefined && (\n        <RepliesDisplay\n          replies={nextPageData}\n          navigation={navigation}\n          layer={layer}\n          postId={postId}\n          replyId={replyId}\n          highlightedReplies={highlightedReplies}\n        />\n      )}\n      {replies.next_page === null && layer === 0 && (\n        <Text style={{ margin: 17, color: theme.secondaryText }}>\n          {replies.items.length > 0 ? \"No more replies\" : \"No replies yet\"}\n        </Text>\n      )}\n    </View>\n  );\n}\n\nfunction ReplyDisplay({\n  reply,\n  layer = 0,\n  navigation,\n  layerColors,\n  postId,\n  highlightedReplies = [],\n}: {\n  reply: Reply;\n  layer: number;\n  navigation: any;\n  layerColors: ColorValue[];\n  postId?: PostId;\n  highlightedReplies?: ReplyId[];\n}) {\n  const [nextPageData, setNextPageData] = useState<Paged<Reply>>();\n  const [showChildren, setShowChildren] = React.useState(true);\n  const theme = useTheme();\n  const { ctx } = useContext(LotideContext);\n  const [selectedReply, setSelectedReply] = useContext(SelectedReplyContext);\n\n  return (\n    <View style={{ paddingLeft: 0 }}>\n      <View\n        style={{\n          paddingVertical: 8,\n          borderTopWidth: 0.5,\n          borderTopColor: theme.secondaryBackground,\n        }}\n      >\n        <Pressable\n          onPress={() =>\n            setSelectedReply(selectedReply != reply.id ? reply.id : undefined)\n          }\n        >\n          <View\n            style={{\n              borderLeftWidth: 2,\n              borderColor: layerColors[layer % layerColors.length],\n              paddingLeft: 15,\n              paddingVertical: 3,\n              backgroundColor: highlightedReplies.includes(reply.id)\n                ? theme.secondaryBackground\n                : theme.background,\n            }}\n          >\n            <View\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                flexWrap: \"wrap\",\n                marginBottom: 5,\n              }}\n            >\n              <ActorDisplay\n                name={reply.author.username}\n                host={reply.author.host}\n                local={reply.author.local}\n                showHost=\"only_foreign\"\n                colorize=\"only_foreign\"\n                style={{ fontSize: 16, fontWeight: \"500\" }}\n              />\n              <View\n                style={{\n                  marginRight: 15,\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Text>{!showChildren && \"...    \"}</Text>\n                <Icon name=\"heart-outline\" size={14} color={theme.text} light />\n                <Text>{` ${reply.score}   `}</Text>\n                <ElapsedTime time={reply.created} />\n              </View>\n            </View>\n            {showChildren && !!reply.content_html && (\n              <ContentDisplay\n                contentHtml={reply.content_html}\n                contentText={reply.content_text}\n              />\n            )}\n          </View>\n          {selectedReply == reply.id && (\n            <View style={styles.buttons}>\n              <VoteCounter\n                type=\"reply\"\n                post={reply}\n                isUpvoted={false}\n                hideCount\n                style={styles.button}\n              />\n              {/* <Pressable style={styles.button}>\n                <Icon color={theme.text} size={20} name=\"bookmark-outline\" />\n              </Pressable> */}\n              <Pressable\n                style={styles.button}\n                onPress={() => {\n                  Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n                  navigation.navigate(\"Reply\", {\n                    id: reply.id,\n                    title: reply.author.username,\n                    html: reply.content_html,\n                    type: \"reply\",\n                  });\n                }}\n              >\n                <Icon color={theme.text} size={20} name=\"arrow-undo-outline\" />\n              </Pressable>\n              <Pressable\n                style={styles.button}\n                onPress={() => {\n                  setShowChildren(s => !s);\n                }}\n              >\n                <Icon\n                  color={\n                    (reply.replies?.items.length || 0) > 0\n                      ? theme.text\n                      : theme.secondaryText\n                  }\n                  size={20}\n                  name={\n                    showChildren ? \"chevron-up-outline\" : \"chevron-down-outline\"\n                  }\n                />\n              </Pressable>\n              {/* <Pressable style={styles.button}>\n                <Icon\n                  color={theme.text}\n                  size={20}\n                  name=\"ellipsis-vertical-outline\"\n                />\n              </Pressable> */}\n            </View>\n          )}\n        </Pressable>\n      </View>\n      {reply.replies !== null\n        ? reply.replies.items.length > 0 &&\n          (showChildren ? (\n            <View style={{ paddingLeft: 15 }}>\n              <RepliesDisplay\n                replies={reply.replies}\n                layer={layer + 1}\n                navigation={navigation}\n                postId={postId}\n                replyId={reply.id}\n                highlightedReplies={highlightedReplies}\n              />\n            </View>\n          ) : (\n            <Text>...</Text>\n          ))\n        : nextPageData === undefined && (\n            <Pressable\n              hitSlop={5}\n              onPress={() => {\n                LotideService.getReplyReplies(ctx, reply.id).then(\n                  setNextPageData,\n                );\n              }}\n            >\n              <View style={{ paddingHorizontal: 15, paddingBottom: 10 }}>\n                <Text style={{ color: theme.tint }}>\n                  More replies <Icon name=\"chevron-forward-outline\" />\n                </Text>\n              </View>\n            </Pressable>\n          )}\n      {nextPageData !== undefined && (\n        <View style={{ paddingLeft: 15 }}>\n          <RepliesDisplay\n            replies={nextPageData}\n            navigation={navigation}\n            layer={layer + 1}\n            postId={postId}\n            replyId={reply.id}\n          />\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    paddingHorizontal: 15,\n  },\n  button: {\n    padding: 10,\n    paddingHorizontal: 15,\n  },\n});\n","import Icon from \"@expo/vector-icons/Ionicons\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  StatusBar,\n  ScrollView,\n  Pressable,\n  Share,\n} from \"react-native\";\nimport * as Haptics from \"../services/HapticService\";\nimport PostDisplay from \"../components/PostDisplay\";\nimport { View, Text } from \"../components/Themed\";\nimport { useReplies } from \"../hooks/lotide\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport LotideContext from \"../store/LotideContext\";\nimport RepliesDisplay from \"../components/RepliesDisplay\";\nimport { SelectedReplyContext } from \"../store/SelectedReplyContext\";\n\nexport default function ModalScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Post\">) {\n  const post = route.params.post;\n  const [highlightedReplies, setHighlightedReplies] = useState(\n    route.params.highlightedReplies,\n  );\n  const [focusId, setFocusId] = useState(0);\n  const [selectedReply, setSelectedReply] = useState<ReplyId>();\n  const ctx = useContext(LotideContext).ctx;\n  const replies = useReplies(\n    ctx,\n    post.id,\n    [focusId, highlightedReplies?.join(\",\")],\n    highlightedReplies?.[0],\n  );\n  const theme = useTheme();\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(x => x + 1)),\n    [],\n  );\n\n  return (\n    <ScrollView>\n      <View\n        style={{\n          ...styles.item,\n          backgroundColor: theme.background,\n        }}\n      >\n        <PostDisplay\n          post={post}\n          navigation={navigation}\n          showHtmlContent\n          showAuthor\n        />\n        <View style={styles.actions}>\n          <Icon name=\"bookmark-outline\" size={25} color={theme.text} />\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              navigation.navigate(\"Reply\", {\n                id: post.id,\n                title: post.title,\n                html: post.content_html,\n                type: \"post\",\n              });\n            }}\n          >\n            <Icon name=\"arrow-undo-outline\" size={25} color={theme.text} />\n          </Pressable>\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              Share.share({\n                message: post.title,\n                url: `https://dev.goldandblack.xyz/p/posts/${post.id}`,\n                title: \"Hoot\",\n              });\n            }}\n          >\n            <Icon name=\"share-outline\" size={25} color={theme.text} />\n          </Pressable>\n        </View>\n        {highlightedReplies && (\n          <Pressable onPress={() => setHighlightedReplies(undefined)}>\n            <Text style={{ color: theme.tint, paddingVertical: 10 }}>\n              Show all replies\n            </Text>\n          </Pressable>\n        )}\n        <SelectedReplyContext.Provider\n          value={[selectedReply, setSelectedReply]}\n        >\n          <RepliesDisplay\n            replies={replies}\n            navigation={navigation}\n            postId={post.id}\n            highlightedReplies={highlightedReplies}\n          />\n        </SelectedReplyContext.Provider>\n        <View style={{ height: 300 }} />\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    backgroundColor: \"#8884\",\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n    borderBottomColor: \"#8884\",\n    borderBottomWidth: 2,\n  },\n  by: {\n    fontSize: 11,\n  },\n  actions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    padding: 10,\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import * as LotideService from \"../services/LotideService\";\n\nexport interface Origin {\n  type: \"post\" | \"comment\";\n  id: number;\n  content_text?: string;\n  content_html?: string;\n  author: Profile;\n}\n\nexport async function transformToFullNotification(\n  ctx: LotideContext,\n  notification: UserNotification,\n): Promise<FullNotification> {\n  const post = LotideService.getPost(ctx, notification.post.id);\n  const origin = notification.comment\n    ? originFromComment(ctx, notification.comment!)\n    : originFromPost(await post);\n  const reply = await LotideService.getReply(ctx, notification.reply.id);\n\n  return {\n    unseen: notification.unseen,\n    reply: {\n      id: reply.id,\n      content_text: reply.content_text,\n      content_html: reply.content_html,\n      author: reply.author,\n    },\n    origin: await origin,\n    post: await post,\n  };\n}\n\nexport async function originFromComment(\n  ctx: LotideContext,\n  commentId: ReplyId,\n): Promise<Origin> {\n  const comment = await LotideService.getReply(ctx, commentId);\n  return {\n    type: \"comment\",\n    id: commentId,\n    content_text: comment.content_text,\n    content_html: comment.content_html,\n    author: comment.author,\n  };\n}\n\nexport async function originFromPost(post: Post): Promise<Origin> {\n  return {\n    type: \"post\",\n    id: post.id,\n    content_text: post.title,\n    author: post.author,\n  };\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { FlatList, Pressable, StyleSheet } from \"react-native\";\nimport ActorDisplay from \"../components/ActorDisplay\";\nimport ContentDisplay from \"../components/ContentDisplay\";\nimport SuggestLogin from \"../components/SuggestLogin\";\n\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { transformToFullNotification } from \"../transformers/NotificationTransformer\";\nimport { RootTabScreenProps } from \"../types\";\n\nexport default function NotificationScreen({\n  navigation,\n}: RootTabScreenProps<\"NotificationScreen\">) {\n  const [notifications, setNotifications] = useState<FullNotification[]>([]);\n  const [isRefreshing, setIsRefreshing] = useState(true);\n  const [focusId, setFocusId] = useState(0);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  useEffect(() => {\n    if (!ctx.login) return;\n    LotideService.getNotifications(ctx).then(notifications => {\n      const promises = notifications.map(n =>\n        transformToFullNotification(ctx, n),\n      );\n      Promise.all(promises)\n        .then(setNotifications)\n        .then(() => setIsRefreshing(false));\n    });\n  }, [focusId]);\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(i => i + 1)),\n    [],\n  );\n\n  if (!ctx.login) return <SuggestLogin />;\n\n  const renderItem = ({ item }: { item: FullNotification }) => {\n    return (\n      <Pressable\n        style={[styles.item, { borderColor: theme.secondaryBackground }]}\n        onPress={() => {\n          const highlightedReplies =\n            item.origin.type === \"comment\"\n              ? [item.origin.id, item.reply.id]\n              : [item.reply.id];\n          navigation.navigate(\"Post\", {\n            post: item.post,\n            highlightedReplies,\n          });\n        }}\n      >\n        <Text style={styles.name}>{item.post.author.username}</Text>\n        <Text style={styles.title}>{item.post.title}</Text>\n        <Text>\n          In{\" \"}\n          <ActorDisplay\n            name={item.post.community.name}\n            host={item.post.community.host}\n            local={item.post.community.local}\n            showHost={\"always\"}\n            colorize={\"never\"}\n          />\n        </Text>\n        {item.origin.type === \"comment\" ? (\n          <>\n            <View style={[styles.level1, { borderColor: theme.secondaryText }]}>\n              <Text style={styles.name}>{item.origin.author.username}</Text>\n              <ContentDisplay\n                contentHtml={item.origin.content_html}\n                contentText={item.origin.content_text}\n              />\n            </View>\n            <View style={[styles.level2, { borderColor: theme.tint }]}>\n              <Text style={styles.name}>{item.reply.author.username}</Text>\n              <ContentDisplay\n                contentHtml={item.reply.content_html}\n                contentText={item.reply.content_text}\n              />\n            </View>\n          </>\n        ) : (\n          <>\n            <View style={[styles.level1, { borderColor: theme.tint }]}>\n              <Text style={styles.name}>{item.reply.author.username}</Text>\n              <ContentDisplay\n                contentHtml={item.reply.content_html}\n                contentText={item.reply.content_text}\n              />\n            </View>\n          </>\n        )}\n      </Pressable>\n    );\n  };\n\n  return (\n    <FlatList\n      style={styles.container}\n      data={notifications}\n      renderItem={renderItem}\n      keyExtractor={(item, index) => `${item.reply.id}-${index}`}\n      refreshing={isRefreshing}\n      onRefresh={() => {\n        setIsRefreshing(true);\n        setFocusId(i => i + 1);\n      }}\n    ></FlatList>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  item: { borderBottomWidth: 5, padding: 15 },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  level1: {\n    marginTop: 5,\n    borderLeftWidth: 2,\n    paddingLeft: 15,\n    padding: 5,\n  },\n  level2: {\n    marginTop: 5,\n    marginLeft: 15,\n    borderLeftWidth: 2,\n    paddingLeft: 15,\n    padding: 5,\n  },\n  name: {\n    fontWeight: \"600\",\n    marginBottom: 3,\n  },\n  thin: {\n    fontWeight: \"200\",\n  },\n});\n","import { lotideRequest } from \"./util\";\n\nexport async function getNotifications(\n  ctx: LotideContext,\n): Promise<UserNotification[]> {\n  return lotideRequest(ctx, \"GET\", \"users/~me/notifications\").then(data =>\n    data.json(),\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { Alert, Button, StyleSheet, TextInput } from \"react-native\";\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\n\nexport default function NewCommunityScreen({\n  navigation,\n}: RootStackScreenProps<\"NewCommunity\">) {\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  function submit() {\n    LotideService.newCommunity(ctx, name)\n      .then(async data => {\n        const id = data.community.id;\n        if (description) {\n          await LotideService.editCommunity(ctx, id, description);\n        }\n        await LotideService.followCommunity(ctx, id);\n        const community = await LotideService.getCommunity(ctx, id);\n        navigation.replace(\"Community\", { community });\n      })\n      .catch(e => Alert.alert(\"Failed to create community\", e));\n  }\n\n  return (\n    <View style={styles.root}>\n      <TextInput\n        style={[styles.input, { fontSize: 20, color: theme.text }]}\n        placeholder=\"Community Name\"\n        value={name}\n        onChangeText={setName}\n      />\n      {name.length >= 4 ? (\n        <>\n          <TextInput\n            style={[styles.input, { color: theme.text }]}\n            placeholder=\"Description (Optional)\"\n            value={description}\n            onChangeText={setDescription}\n          />\n          <Button\n            title=\"Submit\"\n            color={theme.tint}\n            onPress={submit}\n            accessibilityLabel=\"Create new community\"\n          />\n        </>\n      ) : (\n        <Text>{name.length > 0 && 4 - name.length}</Text>\n      )}\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"flex-start\",\n    padding: 15,\n    height: \"100%\",\n    width: \"100%\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    paddingVertical: 10,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  item: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginBottom: 1,\n  },\n});\n","import React, { useState } from \"react\";\nimport { RootStackScreenProps } from \"../types\";\nimport { Text, TextInput, View } from \"../components/Themed\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as LotideService from \"../services/LotideService\";\n\nexport default function ForgotPasswordScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"ForgotPassword\">) {\n  const [isAwaitingKey, setIsAwaitingKey] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [validKey, setValidKey] = useState<string>();\n  const [password, setPassword] = useState(\"\");\n  const theme = useTheme();\n\n  function submitEmail() {\n    if (!email)\n      return Alert.alert(\n        \"Email address required\",\n        \"An email with a password reset key will be emailed to you\",\n      );\n    LotideService.forgotPasswordRequestKey(\n      { apiUrl: `https://${route.params.node}/api/unstable` },\n      email,\n    )\n      .then(() => {\n        setIsAwaitingKey(true);\n      })\n      .catch(e => Alert.alert(\"Failed to send reset key\", e));\n  }\n\n  function submitPassword() {\n    if (!password) return Alert.alert(\"Password required\");\n    if (!validKey) return Alert.alert(\"No key\", \"Fail. This shouldn't happen\");\n    LotideService.forgotPasswordReset(\n      { apiUrl: `https://${route.params.node}/api/unstable` },\n      validKey,\n      password,\n    ).then(() => navigation.popToTop());\n  }\n\n  function keyChange(key: string) {\n    if (key.length < 6) return;\n    LotideService.forgotPasswordTestKey(\n      { apiUrl: `https://${route.params.node}/api/unstable` },\n      key,\n    ).then(() => setValidKey(key));\n  }\n\n  return (\n    <Pressable\n      style={{ flex: 1 }}\n      onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n    >\n      <KeyboardAvoidingView style={styles.root} behavior=\"padding\">\n        <Pressable>\n          <Text>{route.params.node}</Text>\n        </Pressable>\n        {!isAwaitingKey ? (\n          <>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Email Address\"\n              value={email}\n              onChangeText={setEmail}\n              keyboardType=\"email-address\"\n              textContentType=\"emailAddress\"\n              autoCompleteType=\"email\"\n              returnKeyType=\"go\"\n              autoCapitalize=\"none\"\n            />\n            <Button title=\"Submit\" onPress={submitEmail} color={theme.tint} />\n          </>\n        ) : (\n          <>\n            {validKey ? (\n              <>\n                <TextInput\n                  placeholder=\"New Password\"\n                  style={styles.input}\n                  value={password}\n                  onChangeText={setPassword}\n                  autoCapitalize=\"none\"\n                  secureTextEntry={true}\n                  textContentType=\"password\"\n                  autoCompleteType=\"password\"\n                />\n                <View style={styles.actionButtons}>\n                  <Button\n                    title=\"Go Back\"\n                    onPress={() => setIsAwaitingKey(false)}\n                    color={theme.secondaryTint}\n                  />\n                  <Button\n                    title=\"Submit\"\n                    onPress={submitPassword}\n                    color={theme.tint}\n                  />\n                </View>\n              </>\n            ) : (\n              <TextInput\n                placeholder=\"Key\"\n                style={styles.input}\n                onChangeText={keyChange}\n                autoCapitalize=\"none\"\n              />\n            )}\n          </>\n        )}\n      </KeyboardAvoidingView>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 30,\n  },\n  input: {\n    width: \"100%\",\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    marginTop: 15,\n  },\n  actionButtons: {\n    display: \"flex\",\n    width: \"100%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n});\n","import React, { useContext, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport { TextInput } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport ActorDisplay from \"../components/ActorDisplay\";\n\nexport default function ReplyScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"EditCommunity\">) {\n  const community = route.params.community;\n  const [description, setDescription] = useState(community.description || \"\");\n  const theme = useTheme();\n  const { ctx } = useContext(LotideContext);\n\n  function submit() {\n    LotideService.editCommunity(ctx, community.id, description)\n      .then(() => LotideService.getCommunity(ctx, community.id))\n      .then(data =>\n        navigation.navigate(\"Community\", {\n          community: { ...data, description },\n        }),\n      )\n      .catch(e => Alert.alert(\"Failed to edit community\", e));\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n    >\n      <Pressable\n        style={styles.root}\n        onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n      >\n        <ActorDisplay\n          name={community.name}\n          host={community.host}\n          local={community.local}\n          showHost=\"always\"\n          newLine\n          style={styles.title}\n        />\n        <TextInput\n          style={styles.input}\n          multiline\n          placeholder=\"Add a description\"\n          value={description}\n          onChangeText={setDescription}\n        />\n        <Button title=\"Submit\" color={theme.tint} onPress={submit} />\n      </Pressable>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: { padding: 20, paddingBottom: 100 },\n  title: {\n    fontSize: 20,\n    marginVertical: 10,\n  },\n  input: {\n    marginVertical: 20,\n    minHeight: 100,\n  },\n});\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport React, { useState } from \"react\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { ActionSheetIOS, ColorSchemeName, Pressable } from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport {\n  RootStackParamList,\n  RootTabParamList,\n  RootTabScreenProps,\n} from \"../types\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\n\nimport FeedScreen from \"../screens/FeedScreen\";\nimport SearchScreen from \"../screens/SearchScreen\";\nimport ProfileScreen from \"../screens/ProfileScreen\";\nimport NewPostScreen from \"../screens/NewPostScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport CommunityScreen from \"../screens/CommunityScreen\";\nimport ReplyScreen from \"../screens/ReplyScreen\";\nimport ModalScreen from \"../screens/ModalScreen\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport NotificationScreen from \"../screens/NotificationScreen\";\nimport NewCommunityScreen from \"../screens/NewCommunity\";\nimport ForgotPasswordScreen from \"../screens/ForgotPasswordScreen\";\nimport EditCommunityScreen from \"../screens/EditCommunityScreen\";\n\nexport default function Navigation({\n  colorScheme,\n}: {\n  colorScheme: ColorSchemeName;\n}) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n    >\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Root\"\n        component={BottomTabNavigator}\n        options={{ headerShown: false }}\n      />\n      <Stack.Screen name=\"Web\" component={ModalScreen} />\n      <Stack.Screen name=\"Post\" component={ModalScreen} />\n      <Stack.Screen name=\"Reply\" component={ReplyScreen} />\n      <Stack.Screen name=\"Community\" component={CommunityScreen} />\n      <Stack.Screen name=\"NewCommunity\" component={NewCommunityScreen} />\n      <Stack.Screen name=\"EditCommunity\" component={EditCommunityScreen} />\n      <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n      <Stack.Screen\n        name=\"ForgotPassword\"\n        component={ForgotPasswordScreen}\n        options={{ title: \"Forgot Password\" }}\n      />\n      <Stack.Screen\n        name=\"NotFound\"\n        component={NotFoundScreen}\n        options={{ title: \"Oops!\" }}\n      />\n      <Stack.Group screenOptions={{ presentation: \"modal\" }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator({ navigation }: any) {\n  const [sort, setSort] = useState<SortOption>(\"hot\");\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"FeedScreen\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint as unknown as string,\n        tabBarShowLabel: false,\n      }}\n    >\n      <BottomTab.Screen\n        name=\"FeedScreen\"\n        component={FeedScreen}\n        initialParams={{ sort }}\n        options={({ navigation }: RootTabScreenProps<\"FeedScreen\">) => ({\n          title: \"Hoot\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"newspaper-outline\" color={color} />\n          ),\n          headerRight: () => (\n            <Pressable\n              onPress={() => {\n                ActionSheetIOS.showActionSheetWithOptions(\n                  {\n                    options: [\"Cancel\", \"Hot\", \"New\"],\n                    title: \"Sort by:\",\n                    cancelButtonIndex: 0,\n                  },\n                  buttonIndex => {\n                    const newSort = [sort, \"hot\", \"new\"][\n                      buttonIndex\n                    ] as SortOption;\n                    setSort(newSort);\n                    navigation.navigate(\"FeedScreen\", { sort: newSort });\n                  },\n                );\n              }}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}\n            >\n              <Icon\n                name={\n                  { hot: \"flame-outline\", new: \"time-outline\" }[sort] as any\n                }\n                size={25}\n                color={Colors[colorScheme].tint}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"SearchScreen\"\n        component={SearchScreen}\n        options={{\n          title: \"Communities\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"search-outline\" color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"NewPostScreen\"\n        component={NewPostScreen}\n        initialParams={{ community: undefined }}\n        options={{\n          title: \"New Post\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"add-outline\" color={color} size={40} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"NotificationScreen\"\n        component={NotificationScreen}\n        options={{\n          title: \"Notifications\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"notifications-outline\" color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{\n          title: \"Profile\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"person-circle-outline\" color={color} />\n          ),\n          headerLeft: () => (\n            <Pressable\n              onPress={() => {\n                navigation.navigate(\"Settings\");\n              }}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}\n            >\n              <Icon\n                name=\"cog-outline\"\n                size={25}\n                color={Colors[colorScheme].secondaryText}\n                style={{ marginLeft: 15 }}\n              />\n            </Pressable>\n          ),\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof Icon>[\"name\"];\n  color: string;\n  size?: number;\n}) {\n  return <Icon size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport voteReducer from \"../slices/voteSlice\";\n\nconst store = configureStore({\n  reducer: {\n    vote: voteReducer,\n  },\n});\n\nexport default store;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\nimport LotideContext, { defaultLotideContext } from \"./store/LotideContext\";\nimport * as StorageService from \"./services/StorageService\";\nimport * as LotideService from \"./services/LotideService\";\nimport { Provider } from \"react-redux\";\nimport reduxStore from \"./store/reduxStore\";\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n  const [ctx, setContext] = useState<LotideContext>(defaultLotideContext);\n\n  useEffect(() => {\n    StorageService.lotideContext.query().then(ctx => {\n      if (ctx !== undefined) {\n        setContext(ctx);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!ctx.apiUrl) return;\n    LotideService.getInstanceInfo(ctx)\n      .then(data => {\n        console.log(data);\n        if (!data.software.version.startsWith(\"0.9.\")) {\n          throw \"Bad version\";\n        }\n      })\n      .catch(() => {\n        StorageService.lotideContextKV\n          .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n          .then(() => applyNewContext({}));\n      });\n    if (!ctx.login) return;\n    LotideService.getUserData(ctx, ctx.login.user.id).catch(() => {\n      StorageService.lotideContextKV\n        .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n        .then(() => applyNewContext({}));\n    });\n  }, [ctx]);\n\n  function applyNewContext(ctx: LotideContext) {\n    StorageService.lotideContextKV\n      .store(ctx)\n      .then(() => AsyncStorage.setItem(\"@lotide_ctx\", JSON.stringify(ctx)))\n      .then(() => setContext(ctx));\n  }\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={reduxStore}>\n        <LotideContext.Provider\n          value={{\n            ctx,\n            setContext: (ctx: LotideContext) => applyNewContext(ctx),\n          }}\n        >\n          <SafeAreaProvider>\n            <Navigation colorScheme={colorScheme} />\n            <StatusBar />\n          </SafeAreaProvider>\n        </LotideContext.Provider>\n      </Provider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}
{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","navigation/LinkingConfiguration.ts","hooks/useTheme.ts","components/Themed.tsx","hooks/useElapsedTime.ts","components/ElapsedTime.tsx","services/HapticService.ts","store/LotideContext.ts","slices/voteSlice.ts","services/LotideService/util.ts","services/LotideService/Community.ts","services/LotideService/Instance.ts","services/LotideService/Post.ts","services/LotideService/Reply.ts","hooks/useVote.ts","components/VoteCounter.tsx","components/ContentDisplay.tsx","components/ActorDisplay.tsx","components/PostDisplay.tsx","hooks/lotide.ts","hooks/useRefreshableData.ts","constants/KnownHosts.ts","services/StorageService.ts","components/HostList.tsx","components/Login.tsx","services/LotideService/User.ts","components/SuggestLogin.tsx","components/SwipeAction.tsx","screens/FeedScreen.tsx","components/CommunityFinder.tsx","screens/SearchScreen.tsx","screens/ProfileScreen.tsx","screens/NewPostScreen.tsx","screens/SettingsScreen.tsx","screens/CommunityScreen.tsx","screens/ReplyScreen.tsx","store/SelectedReplyContext.ts","components/RepliesDisplay.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","transformers/NotificationTransformer.ts","screens/NotificationScreen.tsx","services/LotideService/Notification.ts","screens/NewCommunity.tsx","screens/ForgotPasswordScreen.tsx","screens/EditCommunityScreen.tsx","navigation/index.web.tsx","store/reduxStore.ts","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","PlatformColor","Platform","OS","require","light","buildIOS","tint","secondaryTint","text","secondaryText","placeholderText","background","secondaryBackground","tertiaryBackground","tabIconDefault","tabIconSelected","red","orange","yellow","green","teal","blue","indigo","purple","dark","linking","prefixes","Linking","config","screens","Root","TabOne","TabOneScreen","TabTwo","TabTwoScreen","Modal","NotFound","useTheme","colorScheme","Colors","Text","props","style","secondary","otherProps","theme","color","View","backgroundColor","TextInput","forwardRef","ref","placeholderTextColor","themeStyle","paddingHorizontal","paddingVertical","borderRadius","useElapsedTime","time","useMemo","seconds","Math","round","Date","now","parse","minutes","hours","days","weeks","months","years","calculateElapsedTime","ElapsedTime","elapsedTime","Pressable","hitSlop","onPress","Alert","alert","styles","root","name","size","StyleSheet","create","impactAsync","a","async","Haptics","defaultLotideContext","apiUrl","login","undefined","createContext","ctx","setContext","voteSlice","createSlice","initialState","post","reply","reducers","setVote","state","action","p","payload","type","id","vote","actions","lotideRequest","method","path","body","noLogin","fetch","headers","buildHeaders","JSON","stringify","then","res","ok","catch","e","console","error","Authorization","token","getCommunities","onlyFollowing","page","data","json","getCommunity","communityId","getUserData","userId","followCommunity","try_wait_for_accept","editCommunity","description","getInstanceInfo","getPost","postId","getReply","replyId","getPostReplies","getReplyReplies","useVote","content","isUpvotedByAPI","your_vote","upvoteSelected","useSelector","dispatch","useDispatch","useContext","LotideContext","useEffect","dispatchVote","isUpvoted","shouldAddOne","shouldSubtractOne","score","addVote","LotideService","removeVote","VoteCounter","scoreColor","Light","hideCount","display","flexDirection","alignItems","cursor","fontSize","minWidth","ContentDisplay","html","contentHtml","markdown","contentMarkdown","replace","trim","contentText","RootComponent","value","renderNode","stylesheet","cite","fontStyle","del","textDecorationLine","textDecorationStyle","dfn","ins","samp","fontFamily","small","textComponentProps","onLinkLongPress","url","node","index","siblings","parent","defaultRenderer","includes","children","key","attribs","title","padding","borderLeftWidth","borderColor","paddingLeft","Details","width","alignSelf","borderBottomWidth","hairlineWidth","useState","isOpen","setIsOpen","filter","x","toString","summary","realChildren","ActorDisplay","colorize","showHost","shouldDoIfLocal","when","local","shouldColorize","shouldShowHost","nameStyle","styleName","host","styleHost","newLine","fontWeight","React","memo","PostDisplay","imgAspect","setImgAspect","isImage","href","some","ext","endsWith","sticky","Image","image","aspectRatio","source","uri","onLoad","event","max","nativeEvent","height","link","Medium","openURL","showHtmlContent","content_html","content_text","showAuthor","paddingTop","by","author","username","foot","navigation","navigate","community","footItem","pointer","flex","created","footText","replies_count_total","item","marginVertical","marginHorizontal","resizeMode","justifyContent","usePosts","sort","inYourFollows","posts","setPosts","setPage","nextPage","setNextPage","loadingPage","setLoadingPage","reloadId","setReloadId","effect","deps","refreshCount","setRefreshCount","isLoading","setIsLoading","c","useRefreshableData","stopLoading","join","items","next_page","refresh","KnownHosts","domain","lotideContext","AsyncStorage","getItem","ctxStr","lotideContextKV","user","serviceKV","store","k","query","listKeys","remove","storeStr","v","setItem","Object","keys","HostList","hostText","setHostText","knownHosts","setKnowHosts","existingProfiles","setExistingProfiles","map","h","i","d","hosts","h2","j","instanceInfo","object","entries","ScrollView","contentContainerStyle","length","subtitle","split","isUnlocked","hostName","find","onSelect","toLowerCase","marginRight","paddingBottom","placeholder","onChangeText","onSubmitEditing","keyboardType","returnKeyType","enabled","software","version","startsWith","renderItem","marginBottom","textAlign","marginTop","Login","isRegistering","setIsRegistering","setUsername","password","setPassword","email","setEmail","usernameRef","useRef","passwordRef","useNavigation","fail","message","register","email_address","submit","Keyboard","dismiss","KeyboardAvoidingView","behavior","loginRegister","input","textContentType","autoCompleteType","current","focus","secureTextEntry","actionButtons","Button","onGoBack","SuggestLogin","setHostName","setDomain","container","SwipeAction","distanceToActivate","isScrolling","setIsScrolling","scroll","setScroll","isLeft","setIsLeft","isRight","setIsRight","isCommitted","setIsCommitted","dimensions","useWindowDimensions","scrollRef","onLeftSide","onRightSide","onReturnToCenter","horizontal","snapToOffsets","snapToStart","snapToEnd","onScrollBeginDrag","onScrollEndDrag","scrollTo","contentOffset","y","onScroll","scrollEventThrottle","showsHorizontalScrollIndicator","overScrollMode","iconLeftSide","colorLeftSide","iconRightSide","colorRightSide","FeedScreen","route","params","isLoadingPosts","refreshPosts","loadNextPage","hasLogin","FlatList","keyExtractor","refreshing","onRefresh","onEndReachedThreshold","onEndReached","Item","isCommitting","setIsCommitting","onLongPress","Heavy","log","CommunityFinder","communities","setCommunities","filterText","setFilterText","communitiesToDisplay","onlyWhenTyping","focusId","you_are_moderator","your_follow","accepted","marginLeft","list","SearchScreen","setFocusId","addListener","ProfileScreen","profile","setProfile","profileList","setProfileList","isEditing","setIsEditing","StorageService","header","avatar","cancelable","accessibilityLabel","editView","editViewText","multiline","editViewActionButtons","altProfileButton","followingTitle","margin","separator","inputContainer","borderWidth","NewPostScreen","setCommunity","setTitle","setLink","setContent","TouchableWithoutFeedback","minHeight","content_markdown","SettingsScreen","CommunityScreen","ListHeaderComponent","ListHeader","buttons","borderBottomColor","isFollowing","ReplyScreen","setText","onFocus","scrollToEnd","animated","pop","defaultSelectedReplyContext","SelectedReplyContext","RepliesDisplay","replies","layer","highlightedReplies","nextPageData","setNextPageData","layerColors","ReplyDisplay","showChildren","setShowChildren","selectedReply","setSelectedReply","borderTopWidth","borderTopColor","flexWrap","button","s","ModalScreen","setHighlightedReplies","setReplies","useReplies","Share","share","Provider","StatusBar","currentHeight","NotFoundScreen","TouchableOpacity","linkText","originFromComment","commentId","comment","originFromPost","NotificationScreen","notifications","setNotifications","isRefreshing","setIsRefreshing","promises","n","notification","origin","unseen","transformToFullNotification","Promise","all","level1","level2","thin","NewCommunityScreen","setName","setDescription","ForgotPasswordScreen","isAwaitingKey","setIsAwaitingKey","validKey","setValidKey","autoCapitalize","newPassword","new_password","popToTop","Navigation","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","component","BottomTabNavigator","options","headerShown","EditCommunityScreen","Group","screenOptions","presentation","BottomTab","createDrawerNavigator","setSort","initialRouteName","drawerActiveTintColor","headerTintColor","headerPressColor","drawerType","drawerHideStatusBarOnOpen","initialParams","drawerIcon","TabBarIcon","headerRight","ActionSheetIOS","showActionSheetWithOptions","cancelButtonIndex","buttonIndex","newSort","opacity","pressed","hot","new","configureStore","reducer","voteReducer","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","FontAwesome","font","warn","useCachedResources","applyNewContext","reduxStore","module","exports"],"mappings":"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","file":"static/js/app.33281f76.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import { ColorValue, Platform } from \"react-native\";\nconst PlatformColor =\n  Platform.OS === \"web\" ? () => {} : require(\"react-native\").PlatformColor;\n\nexport interface ColorsObject {\n  tint: ColorValue;\n  secondaryTint: ColorValue;\n  text: ColorValue;\n  secondaryText: ColorValue;\n  placeholderText: ColorValue;\n  background: ColorValue;\n  secondaryBackground: ColorValue;\n  tertiaryBackground: ColorValue;\n  tabIconDefault: ColorValue;\n  tabIconSelected: ColorValue;\n\n  red: ColorValue;\n  orange: ColorValue;\n  yellow: ColorValue;\n  green: ColorValue;\n  teal: ColorValue;\n  blue: ColorValue;\n  indigo: ColorValue;\n  purple: ColorValue;\n}\n\nexport default {\n  light: Platform.OS === \"ios\" ? buildIOS() : buildAltLight(),\n  dark: Platform.OS === \"ios\" ? buildIOS() : buildAltDark(),\n};\n\nfunction buildIOS(): ColorsObject {\n  return {\n    tint: PlatformColor(\"systemOrange\"),\n    secondaryTint: PlatformColor(\"systemPurple\"),\n    text: PlatformColor(\"label\"),\n    secondaryText: PlatformColor(\"secondaryLabel\"),\n    placeholderText: PlatformColor(\"placeholderText\"),\n    background: PlatformColor(\"systemBackground\"),\n    secondaryBackground: PlatformColor(\"secondarySystemBackground\"),\n    tertiaryBackground: PlatformColor(\"tertiarySystemBackground\"),\n    tabIconDefault: PlatformColor(\"secondaryLabel\"),\n    tabIconSelected: PlatformColor(\"systemOrange\"),\n\n    red: PlatformColor(\"systemRed\"),\n    orange: PlatformColor(\"systemOrange\"),\n    yellow: PlatformColor(\"systemYellow\"),\n    green: PlatformColor(\"systemGreen\"),\n    teal: PlatformColor(\"systemTeal\"),\n    blue: PlatformColor(\"systemBlue\"),\n    indigo: PlatformColor(\"systemIndigo\"),\n    purple: PlatformColor(\"systemPurple\"),\n  };\n}\n\nfunction buildAltLight(): ColorsObject {\n  return {\n    tint: \"orange\",\n    secondaryTint: \"purple\",\n    text: \"#111\",\n    secondaryText: \"#333\",\n    placeholderText: \"#444\",\n    background: \"#fff\",\n    secondaryBackground: \"#eee\",\n    tertiaryBackground: \"#ccc\",\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: \"orange\",\n\n    red: \"red\",\n    orange: \"orange\",\n    yellow: \"yellow\",\n    green: \"green\",\n    teal: \"eeal\",\n    blue: \"blue\",\n    indigo: \"indigo\",\n    purple: \"purple\",\n  };\n}\n\nfunction buildAltDark(): ColorsObject {\n  return {\n    tint: \"orange\",\n    secondaryTint: \"purple\",\n    text: \"#fff\",\n    secondaryText: \"#666\",\n    placeholderText: \"#aaa\",\n    background: \"#111\",\n    secondaryBackground: \"#222\",\n    tertiaryBackground: \"#222\",\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: \"orange\",\n\n    red: \"red\",\n    orange: \"orange\",\n    yellow: \"yellow\",\n    green: \"green\",\n    teal: \"eeal\",\n    blue: \"#68f\",\n    indigo: \"indigo\",\n    purple: \"purple\",\n  };\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","import Colors from \"../constants/Colors\";\nimport useColorScheme from \"./useColorScheme\";\n\nexport default function useTheme() {\n  const colorScheme = useColorScheme();\n  return Colors[colorScheme];\n}\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport React, { forwardRef } from \"react\";\nimport {\n  ColorValue,\n  Text as DefaultText,\n  View as DefaultView,\n  TextInput as DefaultTextInput,\n} from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport function useThemeColor(\n  props: { light?: ColorValue; dark?: ColorValue },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark,\n): ColorValue {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  secondary?: boolean;\n  tint?: boolean;\n};\n\nexport type TextProps = ThemeProps & DefaultText[\"props\"];\nexport type ViewProps = ThemeProps & DefaultView[\"props\"];\n\nexport function Text(props: TextProps) {\n  const { style, secondary, tint, ...otherProps } = props;\n  const theme = useTheme();\n  const color =\n    !secondary && !tint\n      ? theme.text\n      : secondary && !tint\n      ? theme.secondaryText\n      : tint && !secondary\n      ? theme.tint\n      : theme.secondaryTint;\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, ...otherProps } = props;\n  const backgroundColor = useTheme().background;\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n\nexport const TextInput = forwardRef<\n  DefaultTextInput,\n  DefaultTextInput[\"props\"]\n>((props: DefaultTextInput[\"props\"], ref) => {\n  const { style, placeholderTextColor, ...otherProps } = props;\n  const theme = useTheme();\n\n  const themeStyle = {\n    backgroundColor: theme.secondaryBackground,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 8,\n    color: theme.text,\n  };\n  return (\n    <DefaultTextInput\n      ref={ref}\n      style={[themeStyle, style]}\n      placeholderTextColor={placeholderTextColor || theme.placeholderText}\n      {...otherProps}\n    />\n  );\n});\n","import { useMemo } from \"react\";\n\nexport default function useElapsedTime(time: string): string {\n  return useMemo(() => calculateElapsedTime(time), [time]);\n}\n\nexport function calculateElapsedTime(time: string): string {\n  const seconds = Math.round((Date.now() - Date.parse(time)) / 1000);\n  const minutes = Math.round(seconds / 60);\n  const hours = Math.round(minutes / 60);\n  const days = Math.round(hours / 24);\n  const weeks = Math.round(days / 7);\n  const months = Math.round(days / 30.4);\n  const years = Math.round(days / 365);\n  const displayTime =\n    (minutes < 60 && `${minutes}min`) ||\n    (hours < 24 && `${hours}h`) ||\n    (days < 7 && `${days}d`) ||\n    (weeks < 5 && `${weeks}w`) ||\n    (months < 12 && `${months}mo`) ||\n    `${years}y`;\n  return displayTime;\n}\n","import { Ionicons as Icon } from \"@expo/vector-icons\";\nimport React from \"react\";\nimport { Alert, Pressable, StyleSheet } from \"react-native\";\nimport { Text } from \"./Themed\";\nimport useElapsedTime from \"../hooks/useElapsedTime\";\n\nexport interface ElapsedTimeProps {\n  time: string;\n}\n\nexport default function ElapsedTime(props: ElapsedTimeProps) {\n  const elapsedTime = useElapsedTime(props.time);\n  return (\n    <Pressable\n      hitSlop={8}\n      onPress={() => Alert.alert(\"Date posted\", props.time)}\n    >\n      <Text style={styles.root}>\n        <Icon name=\"time-outline\" size={14} /> {elapsedTime}\n      </Text>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {},\n});\n","import { Platform } from \"react-native\";\nimport * as Haptics from \"expo-haptics\";\n\nexport { ImpactFeedbackStyle } from \"expo-haptics\";\n\nexport async function impactAsync(style: Haptics.ImpactFeedbackStyle) {\n  if (Platform.OS === \"web\") return;\n  await Haptics.impactAsync(style);\n}\n","import { createContext } from \"react\";\n\nexport const defaultLotideContext: LotideContext = {\n  apiUrl: \"https://hoot.goldandblack.xyz/api/unstable\",\n  login: undefined,\n};\n\nexport default createContext({\n  ctx: defaultLotideContext,\n  setContext: (ctx: LotideContext) => {},\n});\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface VoteState {\n  post: { [key: PostId]: boolean };\n  reply: { [key: ReplyId]: boolean };\n}\n\nconst initialState: VoteState = {\n  post: {},\n  reply: {},\n};\n\nexport const voteSlice = createSlice({\n  name: \"vote\",\n  initialState,\n  reducers: {\n    setVote: (\n      state,\n      action: PayloadAction<{ type: ContentType; id: number; vote: boolean }>,\n    ) => {\n      const p = action.payload;\n      state[p.type][p.id] = p.vote;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setVote } = voteSlice.actions;\n\nexport default voteSlice.reducer;\n","export type RequestMethod = \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n\nexport function hasLogin(ctx: LotideContext): boolean {\n  return !!ctx.apiUrl && !!ctx.login;\n}\n\nexport async function lotideRequest(\n  ctx: LotideContext,\n  method: RequestMethod,\n  path: string,\n  body?: any,\n  noLogin: boolean = false,\n): Promise<any | undefined> {\n  if (!ctx.apiUrl) throw \"No API url\";\n  if (!noLogin && ctx.login == undefined) throw \"Not logged in\";\n  return fetch(`${ctx.apiUrl}/${path}`, {\n    method,\n    headers: buildHeaders(ctx),\n    body: body !== undefined ? JSON.stringify(body) : undefined,\n  })\n    .then(async res => {\n      if (res.ok) {\n        return res;\n      } else {\n        throw await res.text();\n      }\n    })\n    .catch(e => {\n      console.error(\n        `Lotide Service Error: ${method} ${ctx.apiUrl}/${path}\\n${e}`,\n        ctx,\n      );\n      throw e;\n    });\n}\n\nexport function buildHeaders(ctx: LotideContext): HeadersInit | undefined {\n  return ctx.login !== undefined\n    ? {\n        Authorization: `Bearer ${ctx.login.token}`,\n        \"Content-Type\": \"application/json\",\n      }\n    : undefined;\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getCommunities(\n  ctx: LotideContext,\n  onlyFollowing: boolean = false,\n  page?: string,\n): Promise<Paged<Community>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `communities?include_your=true&limit=100${\n      onlyFollowing ? \"&your_follow.accepted=true\" : \"\"\n    }${page ? `&page=${page}` : \"\"}`,\n  )\n    .then(data => data.json())\n    .then(data => {\n      return data;\n    });\n}\n\nexport async function getCommunity(\n  ctx: LotideContext,\n  communityId: CommunityId,\n): Promise<Community> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `communities/${communityId}?include_your=true`,\n  ).then(data => data.json());\n}\n\nexport async function getUserData(ctx: LotideContext, userId: number) {\n  return lotideRequest(ctx, \"GET\", `users/${userId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function followCommunity(\n  ctx: LotideContext,\n  communityId: number,\n): Promise<{ accepted: boolean }> {\n  return lotideRequest(ctx, \"POST\", `communities/${communityId}/follow`, {\n    try_wait_for_accept: true,\n  }).then(data => data.json());\n}\n\nexport async function unfollowCommunity(\n  ctx: LotideContext,\n  communityId: number,\n) {\n  return lotideRequest(ctx, \"POST\", `communities/${communityId}/unfollow`);\n}\n\nexport async function newCommunity(\n  ctx: LotideContext,\n  name: string,\n): Promise<{ community: { id: CommunityId } }> {\n  return lotideRequest(ctx, \"POST\", \"communities\", { name }).then(data =>\n    data.json(),\n  );\n}\n\nexport async function editCommunity(\n  ctx: LotideContext,\n  id: CommunityId,\n  description: string,\n) {\n  return lotideRequest(ctx, \"PATCH\", `communities/${id}`, { description });\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getInstanceInfo(\n  ctx: LotideContext,\n): Promise<InstanceInfo> {\n  return lotideRequest(ctx, \"GET\", \"instance\", undefined, true).then(data =>\n    data.json(),\n  );\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getPost(\n  ctx: LotideContext,\n  postId: PostId,\n): Promise<Post> {\n  return lotideRequest(ctx, \"GET\", `posts/${postId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function getPosts(\n  ctx: LotideContext,\n  page: string | null,\n  sort: SortOption = \"hot\",\n  inYourFollows?: boolean,\n  communityId?: CommunityId,\n): Promise<Paged<Post>> {\n  const url = [\n    page === null ? `posts?sort=${sort}` : `posts?page=${page}&sort=${sort}`,\n    `include_your=true`,\n    inYourFollows !== undefined && `in_your_follows=${inYourFollows}`,\n    communityId && `community=${communityId}`,\n  ]\n    .filter(x => x)\n    .join(\"&\");\n  return lotideRequest(ctx, \"GET\", url).then(data => data.json());\n}\n\nexport async function submitPost(\n  ctx: LotideContext,\n  post: NewPost,\n): Promise<{ id: PostId }> {\n  return lotideRequest(ctx, \"POST\", \"posts\", post).then(data => data.json());\n}\n\nexport async function applyVote(ctx: LotideContext, postId: PostId) {\n  return lotideRequest(ctx, \"PUT\", `posts/${postId}/your_vote`);\n}\n\nexport async function removeVote(ctx: LotideContext, postId: PostId) {\n  return lotideRequest(ctx, \"DELETE\", `posts/${postId}/your_vote`);\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getReply(\n  ctx: LotideContext,\n  replyId: ReplyId,\n): Promise<Reply> {\n  return lotideRequest(ctx, \"GET\", `comments/${replyId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function getPostReplies(\n  ctx: LotideContext,\n  postId: PostId,\n  page?: string,\n): Promise<Paged<Reply>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `posts/${postId}/replies?limit=10&include_your=true` +\n      (page ? `&page=${page}` : \"\"),\n  ).then(data => data.json());\n}\n\nexport async function getReplyReplies(\n  ctx: LotideContext,\n  replyId: ReplyId,\n  page?: string,\n): Promise<Paged<Reply>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `comments/${replyId}/replies?limit=10&include_your=true&sort=hot` +\n      (page ? `&page=${page}` : \"\"),\n  ).then(data => data.json());\n}\n\nexport async function replyToPost(\n  ctx: LotideContext,\n  postId: PostId,\n  content: string,\n): Promise<{ id: number }> {\n  return lotideRequest(ctx, \"POST\", `posts/${postId}/replies`, {\n    content_markdown: content,\n  }).then(data => data.json());\n}\n\nexport async function replyToReply(\n  ctx: LotideContext,\n  replyId: ReplyId,\n  content: string,\n): Promise<{ id: ReplyId }> {\n  return lotideRequest(ctx, \"POST\", `comments/${replyId}/replies`, {\n    content_markdown: content,\n  }).then(data => data.json());\n}\n\nexport async function applyReplyVote(ctx: LotideContext, replyId: ReplyId) {\n  return lotideRequest(ctx, \"PUT\", `comments/${replyId}/your_vote`);\n}\n\nexport async function removeReplyVote(ctx: LotideContext, replyId: ReplyId) {\n  return lotideRequest(ctx, \"DELETE\", `comments/${replyId}/your_vote`);\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { setVote } from \"../slices/voteSlice\";\nimport { AppDispatch, RootState } from \"../store/reduxStore\";\nimport * as LotideService from \"../services/LotideService\";\nimport { useContext, useEffect } from \"react\";\nimport LotideContext from \"../store/LotideContext\";\n\nexport default function useVote(type: ContentType, content: Post | Reply) {\n  const isUpvotedByAPI =\n    content.your_vote !== null && content.your_vote !== undefined;\n  const upvoteSelected: boolean | undefined = useSelector(\n    (state: RootState) => state.vote[type][content.id],\n  );\n  const dispatch = useDispatch<AppDispatch>();\n  const { ctx } = useContext(LotideContext);\n\n  useEffect(() => {\n    // TODO: This is a terrible way of doing this.\n    if (upvoteSelected === undefined) {\n      dispatchVote(isUpvotedByAPI);\n    }\n  }, [isUpvotedByAPI]);\n\n  const isUpvoted = !!upvoteSelected;\n\n  function dispatchVote(vote: boolean) {\n    dispatch(setVote({ type, id: content.id, vote }));\n  }\n\n  function addVote() {\n    if (type == \"post\") {\n      LotideService.applyVote(ctx, content.id).then(() => dispatchVote(true));\n    } else {\n      LotideService.applyReplyVote(ctx, content.id).then(() =>\n        dispatchVote(true),\n      );\n    }\n  }\n\n  function removeVote() {\n    if (type == \"post\") {\n      LotideService.removeVote(ctx, content.id).then(() => dispatchVote(false));\n    } else {\n      LotideService.removeReplyVote(ctx, content.id).then(() =>\n        dispatchVote(false),\n      );\n    }\n  }\n\n  const shouldAddOne = isUpvoted && !isUpvotedByAPI;\n  const shouldSubtractOne = !isUpvoted && isUpvotedByAPI;\n\n  return {\n    isUpvoted,\n    score: content.score + +shouldAddOne - +shouldSubtractOne,\n    addVote,\n    removeVote,\n  };\n}\n","import { Ionicons as Icon } from \"@expo/vector-icons\";\nimport React, { useContext } from \"react\";\nimport {\n  Alert,\n  Platform,\n  Pressable,\n  StyleSheet,\n  ViewStyle,\n} from \"react-native\";\nimport { View, Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport LotideContext from \"../store/LotideContext\";\nimport useVote from \"../hooks/useVote\";\n\nexport interface VoteCounterProps {\n  content: Post | Reply;\n  type: ContentType;\n  hideCount?: boolean;\n  style?: ViewStyle;\n  onVote?: (isUpvote: boolean) => void;\n}\n\nexport default function VoteCounter(props: VoteCounterProps) {\n  const theme = useTheme();\n  const { ctx } = useContext(LotideContext);\n  const { isUpvoted, score, addVote, removeVote } = useVote(\n    props.type,\n    props.content,\n  );\n\n  function toggleVote() {\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n\n    if (ctx.login === undefined) {\n      Alert.alert(\n        \"Login to like\",\n        \"Leave a like when you login to a community\",\n      );\n      return;\n    }\n\n    if (isUpvoted) {\n      removeVote();\n    } else {\n      addVote();\n    }\n  }\n\n  const scoreColor = isUpvoted ? theme.red : theme.text;\n\n  return (\n    <Pressable\n      onPress={() => toggleVote()}\n      hitSlop={7}\n      style={[styles.root, props.style]}\n    >\n      <View style={styles.root}>\n        <Icon\n          name={isUpvoted ? \"heart\" : \"heart-outline\"}\n          color={scoreColor}\n          size={25}\n        />\n        {!props.hideCount && (\n          <Text\n            style={{ ...styles.score, color: scoreColor }}\n          >{`  ${score}  `}</Text>\n        )}\n      </View>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    ...(Platform.OS == \"web\" ? { cursor: \"pointer\" } : {}),\n  },\n  score: {\n    fontSize: 18,\n    minWidth: 28,\n  },\n});\n","import React, { ReactNode, useMemo, useState } from \"react\";\nimport { Text, View } from \"react-native\";\nimport { Platform, Pressable, StyleSheet } from \"react-native\";\nimport HTMLView, { HTMLViewNode } from \"react-native-htmlview\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport useTheme from \"../hooks/useTheme\";\nimport { Alert } from \"react-native\";\nimport { ColorsObject } from \"../constants/Colors\";\n\nexport interface ContentDisplayProps {\n  contentHtml?: string;\n  contentText?: string;\n  contentMarkdown?: string;\n}\n\nexport default function ContentDisplay(props: ContentDisplayProps) {\n  const theme = useTheme();\n  const html = useMemo(\n    () =>\n      props.contentHtml ||\n      parseMarkdown(props.contentMarkdown) ||\n      `<p>${props.contentText}</p>`,\n    [props.contentHtml, props.contentMarkdown, props.contentText],\n  );\n  return (\n    <HTMLView\n      RootComponent={props => <Text {...props} />}\n      value={html.replace(/\\n/g, \"\")}\n      renderNode={renderNode(theme)}\n      stylesheet={{\n        a: { color: theme.secondaryTint },\n        cite: { fontStyle: \"italic\" },\n        del: {\n          textDecorationLine: \"line-through\",\n          textDecorationStyle: \"solid\",\n        },\n        dfn: { fontStyle: \"italic\" },\n        ins: { textDecorationLine: \"underline\" },\n        samp: { fontFamily: Platform.OS === \"ios\" ? \"Menlo\" : \"monospace\" },\n        small: { fontSize: 10 },\n      }}\n      textComponentProps={{ style: { color: theme.text } }}\n      onLinkLongPress={url => Alert.alert(\"Link\", url)}\n    />\n  );\n}\n\nconst renderNode =\n  (theme: ColorsObject) =>\n  (\n    node: HTMLViewNode,\n    index: number,\n    siblings: HTMLViewNode,\n    parent: HTMLViewNode,\n    defaultRenderer: (node: HTMLViewNode, parent: HTMLViewNode) => ReactNode,\n  ) => {\n    if ([\"iframe\", \"script\"].includes(node.name || \"\")) {\n      return null;\n    }\n\n    function children() {\n      return defaultRenderer((node as any).children, parent);\n    }\n\n    switch (node.name) {\n      case \"abbr\":\n        return (\n          <Pressable\n            key={index}\n            onPress={() => Alert.alert(\"Abbr.\", node.attribs.title)}\n          >\n            <Text\n              style={{\n                textDecorationLine: \"underline\",\n                textDecorationStyle: \"dotted\",\n              }}\n            >\n              {children()}\n            </Text>\n          </Pressable>\n        );\n      case \"blockquote\":\n        return (\n          <Text key={index}>\n            <View style={{ padding: 10 }}>\n              <View\n                style={{\n                  borderLeftWidth: 2,\n                  borderColor: theme.secondaryText,\n                  paddingLeft: 10,\n                  paddingVertical: 5,\n                }}\n              >\n                {children()}\n              </View>\n            </View>\n            {\"\\n\"}\n          </Text>\n        );\n      case \"details\":\n        return (\n          <Details key={index}>{children() as React.ReactChild[]}</Details>\n        );\n      case \"dl\":\n      case \"dt\":\n      case \"dd\":\n        return (\n          <Text key={index}>\n            {children()}\n            {\"\\n\"}\n          </Text>\n        );\n      case \"figure\":\n        return <View key={index}>{children()}</View>;\n      case \"hr\":\n        return (\n          <View\n            key={index}\n            style={{\n              width: 200,\n              alignSelf: \"stretch\",\n              borderBottomWidth: StyleSheet.hairlineWidth || 1,\n              borderColor: theme.secondaryText,\n            }}\n          />\n        );\n      case \"kbd\":\n        return (\n          <Text\n            key={index}\n            style={{ backgroundColor: theme.tertiaryBackground }}\n          >\n            {\" \"}\n            {children()}{\" \"}\n          </Text>\n        );\n      case \"img\":\n        return <Text key={index}>[Image not displayed]</Text>;\n      case \"li\":\n        return (\n          <Text key={index}>\n            {\"\\u2022 \"}\n            {children()}\n            {\"\\n\"}\n          </Text>\n        );\n      case \"sub\":\n        return (\n          <Text key={index} style={{ fontSize: 10 }}>\n            {children()}\n          </Text>\n        );\n      case \"summary\":\n        return <Text key={index}>{children()}</Text>;\n      case \"sup\":\n        return (\n          <View key={index}>\n            <Text style={{ fontSize: 10 }}>{children()}</Text>\n          </View>\n        );\n      default:\n        return undefined;\n    }\n  };\n\nfunction parseMarkdown(markdown?: string): string | undefined {\n  if (markdown === \"\" || markdown === undefined) return undefined;\n  return markdown\n    .replace(/^### (.*$)/gim, \"<h3>$1</h3>\")\n    .replace(/^## (.*$)/gim, \"<h2>$1</h2>\")\n    .replace(/^# (.*$)/gim, \"<h1>$1</h1>\")\n    .replace(/^\\> (.*$)/gim, \"<blockquote>$1</blockquote>\")\n    .replace(/\\*\\*(.*)\\*\\*/gim, \"<b>$1</b>\")\n    .replace(/\\*(.*)\\*/gim, \"<i>$1</i>\")\n    .replace(/!\\[(.*?)\\]\\((.*?)\\)/gim, \"<img alt='$1' src='$2' />\")\n    .replace(/\\[(.*?)\\]\\((.*?)\\)/gim, \"<a href='$2'>$1</a>\")\n    .replace(/\\n$/gim, \"<br />\")\n    .trim();\n}\n\nfunction Details({ children }: { children: React.ReactChild[] }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const theme = useTheme();\n\n  const [summary, ...realChildren] = children.filter(\n    (x: any) => x.props.children.toString().trim() !== \"\",\n  );\n\n  return (\n    <View>\n      <Pressable hitSlop={5} onPress={() => setIsOpen(x => !x)}>\n        <Text style={{ color: theme.secondaryTint }}>\n          {isOpen ? (\n            <Icon name=\"chevron-down-outline\" />\n          ) : (\n            <Icon name=\"chevron-forward-outline\" />\n          )}\n          {summary}\n        </Text>\n      </Pressable>\n      {isOpen && realChildren}\n    </View>\n  );\n}\n","import React from \"react\";\nimport { StyleProp, StyleSheet, TextStyle } from \"react-native\";\nimport { Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport interface ActorDisplayProps {\n  name: string;\n  host: string;\n  local: boolean;\n  colorize?: \"always\" | \"never\" | \"only_foreign\";\n  showHost?: \"always\" | \"never\" | \"only_foreign\";\n  newLine?: boolean;\n  style?: StyleProp<TextStyle>;\n  styleName?: StyleProp<TextStyle>;\n  styleHost?: StyleProp<TextStyle>;\n}\n\nexport function ActorDisplay(props: ActorDisplayProps) {\n  const theme = useTheme();\n  const colorize = props.colorize || \"never\";\n  const showHost = props.showHost || \"only_foreign\";\n\n  const shouldDoIfLocal = (\n    when: \"always\" | \"never\" | \"only_foreign\",\n    local: boolean,\n  ) => {\n    if (when === \"always\") return true;\n    if (when === \"never\") return false;\n    return !local;\n  };\n\n  const shouldColorize = shouldDoIfLocal(colorize, props.local);\n  const shouldShowHost = shouldDoIfLocal(showHost, props.local);\n\n  const nameStyle = shouldColorize\n    ? { color: props.local ? theme.blue : theme.green }\n    : {};\n\n  return (\n    <Text style={[styles.root, props.style]}>\n      <Text style={[styles.name, nameStyle, props.styleName]}>\n        {props.name}\n      </Text>\n      {shouldShowHost && (\n        <Text\n          style={[styles.host, { color: theme.secondaryText }, props.styleHost]}\n        >\n          {props.newLine && \"\\n\"}\n          {!props.newLine && \"@\"}\n          {props.host}\n        </Text>\n      )}\n    </Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {},\n  name: {\n    fontWeight: \"500\",\n  },\n  host: {\n    fontWeight: \"200\",\n  },\n});\n\nexport default React.memo(ActorDisplay);\n","import Icon from \"@expo/vector-icons/Ionicons\";\nimport { openURL } from \"expo-linking\";\nimport React, { useMemo, useState } from \"react\";\nimport {\n  StyleSheet,\n  Image,\n  Pressable,\n  Platform,\n  ViewStyle,\n} from \"react-native\";\nimport ElapsedTime from \"./ElapsedTime\";\nimport VoteCounter from \"./VoteCounter\";\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport ContentDisplay from \"./ContentDisplay\";\nimport ActorDisplay from \"./ActorDisplay\";\n\nexport interface PostDisplayProps {\n  post: Post;\n  navigation: any;\n  showHtmlContent?: boolean;\n  showAuthor?: boolean;\n}\n\nexport default function PostDisplay(props: PostDisplayProps) {\n  const [imgAspect, setImgAspect] = useState(1);\n  const isImage = useMemo(() => isImageUrl(props.post.href), [props.post.href]);\n  const theme = useTheme();\n\n  const post = props.post;\n\n  return (\n    <View>\n      <Text style={styles.title}>\n        {props.post.sticky && (\n          <>\n            <Icon name=\"pin\" size={25} color={theme.secondaryTint} />{\" \"}\n          </>\n        )}\n        {props.post.title}\n      </Text>\n      {props.post.href &&\n        (isImage ? (\n          <Image\n            style={{\n              ...styles.image,\n              aspectRatio: imgAspect,\n              backgroundColor: theme.secondaryBackground,\n            }}\n            source={{\n              uri: props.post.href,\n            }}\n            onLoad={event =>\n              Platform.OS !== \"web\" &&\n              setImgAspect(\n                Math.max(\n                  event.nativeEvent.source.width /\n                    event.nativeEvent.source.height,\n                  0.5,\n                ),\n              )\n            }\n          />\n        ) : (\n          <Pressable\n            style={[\n              styles.link,\n              { backgroundColor: theme.secondaryBackground },\n            ]}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              if (props.post.href) {\n                openURL(props.post.href);\n              }\n            }}\n          >\n            <Text>{props.post.href}</Text>\n          </Pressable>\n        ))}\n      {props.showHtmlContent && !!props.post.content_html && (\n        <View style={{ padding: 15 }}>\n          <ContentDisplay\n            contentHtml={props.post.content_html}\n            contentText={props.post.content_text}\n          />\n        </View>\n      )}\n      {props.showAuthor && (\n        <View\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            paddingHorizontal: 15,\n            paddingTop: 15,\n          }}\n        >\n          <Text style={styles.by}>by{\"   \"}</Text>\n          <ActorDisplay\n            name={post.author.username}\n            host={post.author.host}\n            local={post.author.local}\n            showHost={\"only_foreign\"}\n            colorize={\"always\"}\n            newLine={true}\n          />\n        </View>\n      )}\n      <View style={styles.foot}>\n        <Pressable\n          hitSlop={8}\n          onPress={() =>\n            props.navigation.navigate(\"Community\", {\n              community: props.post.community,\n            })\n          }\n          style={[\n            styles.footItem,\n            styles.pointer,\n            {\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            },\n          ]}\n        >\n          {props.showAuthor && <Text style={styles.by}>in{\"   \"}</Text>}\n          <ActorDisplay\n            name={post.community.name}\n            host={post.community.host}\n            local={post.community.local}\n            showHost={\"only_foreign\"}\n            colorize={props.showAuthor ? \"always\" : \"never\"}\n            newLine={true}\n          />\n        </Pressable>\n        <View style={{ flex: 1 }} />\n        <View style={styles.footItem}>\n          <ElapsedTime time={props.post.created} />\n        </View>\n        <View style={styles.footItem}>\n          <Text style={styles.footText}>\n            <Icon name=\"chatbubble-outline\" size={12} />{\" \"}\n            {props.post.replies_count_total}\n          </Text>\n        </View>\n        <View style={styles.footItem}>\n          <VoteCounter type=\"post\" content={post} />\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n  },\n  pointer: {\n    ...(Platform.OS == \"web\" ? { cursor: \"pointer\" } : {}),\n  } as ViewStyle,\n  title: {\n    fontSize: 20,\n    padding: 15,\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderRadius: 5,\n    marginHorizontal: 15,\n    ...(Platform.OS == \"web\" ? { cursor: \"pointer\" } : {}),\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n  },\n  footText: {},\n  footItem: {\n    padding: 15,\n  },\n  by: {\n    fontSize: 11,\n  },\n  score: {\n    fontSize: 18,\n  },\n  actions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    padding: 10,\n  },\n});\n\nfunction isImageUrl(url?: string): boolean {\n  if (!url) return false;\n  return [\".png\", \".jpg\", \".jpeg\", \".bmp\", \".gif\", \".webp\"].some(ext =>\n    url.endsWith(ext),\n  );\n}\n","import { useState, useEffect, useContext } from \"react\";\nimport LotideContext from \"../store/LotideContext\";\nimport * as LotideService from \"../services/LotideService\";\nimport { useRefreshableData } from \"./useRefreshableData\";\n\nexport function usePosts(\n  sort?: SortOption,\n  inYourFollows?: boolean,\n  community?: CommunityId,\n): [Post[], boolean, () => void, () => void] {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [page, setPage] = useState<string | null>(null);\n  const [nextPage, setNextPage] = useState<string | null>(null);\n  const [loadingPage, setLoadingPage] =\n    useState<string | null | undefined>(undefined);\n  const [reloadId, setReloadId] = useState(0);\n  const ctx = useContext(LotideContext).ctx;\n\n  const [isLoading, refresh] = useRefreshableData(\n    stopLoading => {\n      if (!ctx.login) return;\n      if (loadingPage !== undefined) return;\n      setLoadingPage(page);\n      LotideService.getPosts(ctx, page, sort, inYourFollows, community)\n        .then(data => {\n          setPosts(p => [...p, ...data.items]);\n          setNextPage(data.next_page);\n          setLoadingPage(undefined);\n        })\n        .then(() => stopLoading())\n        .catch(e => {\n          stopLoading();\n          setPosts(p => [\n            ...p,\n            {\n              id: -1,\n              title: \"Lotide error\",\n              content_html: `<p>Error: ${e}</p>`,\n              created: \"\",\n              replies_count_total: 0,\n              score: 0,\n              sticky: true,\n              author: {\n                id: -1,\n                username: \"Failure\",\n                local: false,\n                host: \"hoot-mobile\",\n              },\n              community: {\n                id: -1,\n                name: \"something-went-wrong\",\n                local: false,\n                host: \"hoot-mobile\",\n              },\n            },\n          ]);\n        });\n    },\n    [reloadId, page],\n  );\n\n  useEffect(() => {\n    setPosts([]);\n    setPage(null);\n    setNextPage(null);\n    refresh();\n  }, [ctx, sort]);\n\n  function loadNextPage() {\n    if (nextPage !== null) {\n      setPage(nextPage);\n    }\n  }\n\n  function refreshData() {\n    setPosts([]);\n    setPage(null);\n    setNextPage(null);\n    setReloadId(id => id + 1);\n    refresh();\n  }\n\n  return [posts, isLoading, refreshData, loadNextPage];\n}\n\nexport function useReplies(\n  ctx: LotideContext,\n  postId: PostId,\n  deps: any[],\n  replyId?: ReplyId,\n): Paged<Reply> {\n  const [replies, setReplies] = useState({\n    items: [] as Reply[],\n  } as Paged<Reply>);\n  useEffect(() => {\n    if (replyId) {\n      LotideService.getReply(ctx, replyId).then(async reply => {\n        reply.replies = await LotideService.getReplyReplies(ctx, reply.id);\n        setReplies({ items: [reply], next_page: null });\n      });\n    } else {\n      LotideService.getPostReplies(ctx, postId).then(data => {\n        setReplies(data);\n      });\n    }\n  }, deps);\n  return replies;\n}\n","import { useState, useEffect } from \"react\";\n\nexport function useRefreshableData<T>(\n  effect: (stopLoading: () => void) => void | (() => void | undefined),\n  deps: any[],\n): [boolean, () => void] {\n  const [refreshCount, setRefreshCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    effect(() => setIsLoading(false));\n  }, [refreshCount, ...deps]);\n\n  function refresh() {\n    setRefreshCount(c => c + 1);\n    setIsLoading(true);\n  }\n\n  return [isLoading, refresh];\n}\n","export interface KnownHost {\n  name: string;\n  domain: string;\n}\n\nexport const KnownHosts: KnownHost[] = [\n  {\n    name: \"Gold&Black\",\n    domain: \"hoot.goldandblack.xyz\",\n  },\n  {\n    name: \"Narwhal.City\",\n    domain: \"narwhal.city\",\n  },\n  {\n    name: \"FBXL\",\n    domain: \"lotide.fbxl.net\",\n  },\n  {\n    name: \"Tide C\",\n    domain: \"c.tide.tk\",\n  },\n  {\n    name: \"Exopla\",\n    domain: \"lotide.exopla.net.eu.org\",\n  },\n  {\n    name: \"Narwhal.City (Dev)\",\n    domain: \"dev.narwhal.city\",\n  },\n  {\n    name: \"Tide B\",\n    domain: \"b.tide.tk\",\n  },\n  {\n    name: \"Tide A\",\n    domain: \"a.tide.tk\",\n  },\n];\n\nexport default KnownHosts;\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport const lotideContext = {\n  async store(ctx: LotideContext) {\n    return AsyncStorage.setItem(\"@lotide_ctx\", JSON.stringify(ctx));\n  },\n  async remove() {\n    return AsyncStorage.removeItem(\"@lotide_ctx\");\n  },\n  async query(): Promise<LotideContext | undefined> {\n    return AsyncStorage.getItem(\"@lotide_ctx\").then(ctxStr => {\n      if (ctxStr !== null) {\n        return JSON.parse(ctxStr) as LotideContext;\n      } else {\n        return undefined;\n      }\n    });\n  },\n};\n\nexport const lotideContextKV = {\n  async store(ctx: LotideContext) {\n    if (!ctx.login) return;\n    const name = `${ctx.login.user.username}@${ctx.apiUrl}`;\n    serviceKV.store(\"@lotide_ctx_arr\", name, ctx);\n  },\n  async query(k: string): Promise<LotideContext | undefined> {\n    return serviceKV.query<LotideContext>(\"@lotide_ctx_arr\", k);\n  },\n  async listKeys(): Promise<string[]> {\n    return serviceKV.listKeys(\"@lotide_ctx_arr\");\n  },\n  async remove(k: string): Promise<LotideContext | undefined> {\n    return serviceKV.remove(\"@lotide_ctx_arr\", k);\n  },\n  async logout(ctx: LotideContext) {\n    if (!ctx.login) return;\n    const name = `${ctx.login.user.username}@${ctx.apiUrl}`;\n    serviceKV.store(\"@lotide_ctx_arr\", name, { apiUrl: ctx.apiUrl });\n  },\n  async getStore(): Promise<{ [key: string]: LotideContext }> {\n    const storeStr = await AsyncStorage.getItem(\"@lotide_ctx_arr\");\n    return storeStr ? JSON.parse(storeStr) : {};\n  },\n};\n\nconst serviceKV = {\n  async store<T>(path: string, k: string, v: T) {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    store[k] = v;\n    await AsyncStorage.setItem(path, JSON.stringify(store));\n  },\n\n  async query<T>(path: string, k: string): Promise<T | undefined> {\n    const storeStr = await AsyncStorage.getItem(path);\n    return storeStr ? JSON.parse(storeStr)[k] : undefined;\n  },\n\n  async listKeys(path: string): Promise<string[]> {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    return Object.keys(store);\n  },\n\n  async remove<T>(path: string, k: string): Promise<T | undefined> {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    const v = store[k];\n    delete store[k];\n    await AsyncStorage.setItem(path, JSON.stringify(store));\n    return v;\n  },\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Platform, Pressable, ScrollView, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport KnownHosts from \"../constants/KnownHosts\";\nimport ActorDisplay from \"./ActorDisplay\";\nimport { Text, TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport useTheme from \"../hooks/useTheme\";\nimport { lotideContextKV } from \"../services/StorageService\";\nimport LotideContext from \"../store/LotideContext\";\n\nexport interface HostListProps {\n  onSelect: (domain: string, name?: string, username?: string) => void;\n}\n\ninterface HostData {\n  name: string;\n  domain: string;\n  instanceInfo?: InstanceInfo | null;\n}\n\nexport default function HostList(props: HostListProps) {\n  const [hostText, setHostText] = useState(\"\");\n  const [knownHosts, setKnowHosts] = useState<HostData[]>(KnownHosts);\n  const [existingProfiles, setExistingProfiles] = useState<\n    [string, LotideContext][]\n  >([]);\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n\n  useEffect(() => {\n    KnownHosts.map((h, i) => {\n      return LotideService.getInstanceInfo({\n        apiUrl: `https://${h.domain}/api/unstable`,\n      })\n        .then(d => {\n          setKnowHosts(hosts =>\n            hosts.map((h2, j) =>\n              i !== j\n                ? h2\n                : { name: h2.name, domain: h2.domain, instanceInfo: d },\n            ),\n          );\n        })\n        .catch(() => {\n          setKnowHosts(hosts =>\n            hosts.map((h2, j) =>\n              i !== j\n                ? h2\n                : { name: h2.name, domain: h2.domain, instanceInfo: null },\n            ),\n          );\n        });\n    });\n  }, []);\n\n  useEffect(() => {\n    lotideContextKV\n      .getStore()\n      .then(object => Object.entries(object))\n      .then(setExistingProfiles);\n  }, []);\n\n  const renderItem = ({ item }: { item: HostData }) => {\n    const enabled = item.instanceInfo?.software.version.startsWith(\"0.9.\");\n    const color = enabled ? theme.text : theme.secondaryText;\n    return (\n      <View\n        style={{\n          borderBottomWidth: StyleSheet.hairlineWidth || 1,\n          borderColor: theme.secondaryText,\n          paddingVertical: 25,\n        }}\n      >\n        <Pressable\n          onPress={() => enabled && props.onSelect(item.domain, item.name)}\n        >\n          <ActorDisplay\n            name={item.name}\n            host={item.domain}\n            local={false}\n            newLine={true}\n            styleName={{\n              fontSize: 24,\n              fontWeight: \"300\",\n              fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n              color,\n            }}\n          />\n          {item.instanceInfo ? (\n            <>\n              <Text style={{ color: theme.secondaryText }}>\n                {item.instanceInfo.software.version}\n                {!enabled && \" - Out of date\"}\n              </Text>\n              {!!item.instanceInfo.description && (\n                <Text style={{ color }}>{item.instanceInfo.description}</Text>\n              )}\n            </>\n          ) : item.instanceInfo === null ? (\n            <Text style={{ color }}>Failed to load info</Text>\n          ) : (\n            <Text style={{ color }}>Loading...</Text>\n          )}\n        </Pressable>\n      </View>\n    );\n  };\n  return (\n    <ScrollView contentContainerStyle={styles.root}>\n      <Text style={styles.title}>Login to continue</Text>\n      {existingProfiles.length > 0 && (\n        <Text style={styles.subtitle}>Select an existing profile</Text>\n      )}\n      {existingProfiles.map(p => {\n        const [username, url] = p[0].split(\"@\");\n        const isUnlocked = !!p[1].login;\n        const color = isUnlocked ? theme.text : theme.secondaryText;\n        const host = url\n          .replace(\"http://\", \"\")\n          .replace(\"https://\", \"\")\n          .split(/[/?#]/)[0];\n        const hostName = KnownHosts.find(x => x.domain == host)?.name;\n        return (\n          <Pressable\n            key={p[0]}\n            onPress={() => {\n              if (isUnlocked) {\n                lotideContext.setContext(p[1]);\n              } else {\n                props.onSelect(host.toLowerCase(), undefined, username);\n              }\n            }}\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <Icon\n              name={isUnlocked ? \"lock-open-outline\" : \"lock-closed-outline\"}\n              color={color}\n              style={{ marginRight: 10 }}\n              size={20}\n            />\n            <ActorDisplay\n              name={username}\n              host={host}\n              local={true}\n              showHost={\"always\"}\n              newLine={true}\n              style={{ paddingVertical: 15, paddingBottom: 10 }}\n              styleName={{ color }}\n            />\n            <View style={{ flex: 1 }} />\n            <Text\n              style={{\n                fontSize: 16,\n                color,\n                fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n              }}\n            >\n              {hostName}\n            </Text>\n          </Pressable>\n        );\n      })}\n      <Text style={styles.subtitle}>\n        {existingProfiles.length > 0\n          ? \"Or sign into a new acount\"\n          : \"Enter a host or select one below\"}\n      </Text>\n      <TextInput\n        placeholder=\"Host domain\"\n        style={{ paddingVertical: 10, paddingHorizontal: 10 }}\n        value={hostText}\n        onChangeText={setHostText}\n        onSubmitEditing={() => props.onSelect(hostText.toLowerCase())}\n        keyboardType=\"url\"\n        returnKeyType=\"next\"\n      />\n      {knownHosts\n        .filter(\n          x =>\n            hostText === \"\" ||\n            x.domain.includes(hostText.toLowerCase()) ||\n            x.name.toLowerCase().includes(hostText.toLowerCase()),\n        )\n        .map(item => (\n          <View key={item.domain}>{renderItem({ item })}</View>\n        ))}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 10,\n    textAlign: \"center\",\n  },\n  subtitle: {\n    fontWeight: \"300\",\n    marginBottom: 10,\n    marginTop: 15,\n    textAlign: \"center\",\n  },\n});\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n  TextInput as DefaultTextInput,\n} from \"react-native\";\nimport { Text, TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport useTheme from \"../hooks/useTheme\";\nimport { useNavigation } from \"@react-navigation/core\";\n\nexport interface LoginProps {\n  hostName?: string;\n  domain: string;\n  username?: string;\n  onGoBack: () => void;\n}\n\nexport default function Login(props: LoginProps) {\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [username, setUsername] = useState(props.username || \"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const usernameRef = useRef<DefaultTextInput>(null);\n  const passwordRef = useRef<DefaultTextInput>(null);\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n  const navigation = useNavigation();\n\n  function fail(message: string) {\n    Alert.alert(\"Failed to submit\", message);\n  }\n\n  function register() {\n    if (!username) return fail(\"Please enter a username\");\n    if (!password) return fail(\"Enter a password\");\n    if (!email) return fail(\"Please enter an email address\");\n\n    LotideService.register(\n      `https://${props.domain}/api/unstable`,\n      username,\n      password,\n      email,\n    )\n      .then(data => {\n        lotideContext.setContext({\n          apiUrl: `https://${props.domain}/api/unstable`,\n          login: data,\n        });\n      })\n      .catch(e => {\n        Alert.alert(\"Failed to register\", e);\n        console.error(e);\n      });\n  }\n\n  function login() {\n    if (!username) return fail(\"Please enter a username\");\n    if (!password) return fail(\"Enter a password\");\n\n    LotideService.login(\n      `https://${props.domain}/api/unstable`,\n      username,\n      password,\n    )\n      .then(data => {\n        lotideContext.setContext({\n          apiUrl: `https://${props.domain}/api/unstable`,\n          login: data,\n        });\n      })\n      .catch(e => {\n        Alert.alert(\"Failed to login\", e);\n        console.error(e);\n      });\n  }\n\n  function submit() {\n    if (isRegistering) {\n      register();\n    } else {\n      login();\n    }\n  }\n\n  return (\n    <Pressable\n      style={{ flex: 1 }}\n      onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n    >\n      <KeyboardAvoidingView style={styles.root} behavior=\"padding\">\n        {props.hostName ? (\n          <Pressable style={{ alignItems: \"center\" }}>\n            <Text style={styles.name}>{props.hostName}</Text>\n            <Text style={[styles.domain, { color: theme.secondaryText }]}>\n              {props.domain}\n            </Text>\n          </Pressable>\n        ) : (\n          <Pressable>\n            <Text style={{ fontSize: 24 }}>{props.domain}</Text>\n          </Pressable>\n        )}\n        <Pressable hitSlop={5} onPress={() => setIsRegistering(x => !x)}>\n          <Text style={[styles.loginRegister, { color: theme.secondaryText }]}>\n            <Text\n              style={{\n                color: isRegistering\n                  ? theme.secondaryText\n                  : theme.secondaryTint,\n              }}\n            >\n              Login\n            </Text>\n            {\" | \"}\n            <Text\n              style={{\n                color: isRegistering\n                  ? theme.secondaryTint\n                  : theme.secondaryText,\n              }}\n            >\n              Register\n            </Text>\n          </Text>\n        </Pressable>\n        {isRegistering && (\n          <TextInput\n            style={styles.input}\n            placeholder=\"Email Address\"\n            value={email}\n            onChangeText={setEmail}\n            keyboardType=\"email-address\"\n            textContentType=\"emailAddress\"\n            autoCompleteType=\"email\"\n            returnKeyType=\"next\"\n            onSubmitEditing={() => usernameRef.current?.focus()}\n          />\n        )}\n        <TextInput\n          ref={usernameRef}\n          style={styles.input}\n          placeholder=\"Username\"\n          value={username}\n          onChangeText={setUsername}\n          keyboardType=\"ascii-capable\"\n          textContentType=\"username\"\n          autoCompleteType=\"username\"\n          returnKeyType=\"next\"\n          onSubmitEditing={() => passwordRef.current?.focus()}\n        />\n        <TextInput\n          ref={passwordRef}\n          style={styles.input}\n          placeholder=\"Password\"\n          value={password}\n          onChangeText={setPassword}\n          secureTextEntry={true}\n          textContentType={isRegistering ? \"newPassword\" : \"password\"}\n          autoCompleteType=\"password\"\n          returnKeyType=\"done\"\n          onSubmitEditing={submit}\n        />\n        {!isRegistering && (\n          <Pressable\n            style={{ padding: 15 }}\n            onPress={() =>\n              navigation.navigate(\"ForgotPassword\", { node: props.domain })\n            }\n          >\n            <Text secondary>Forgot Password</Text>\n          </Pressable>\n        )}\n        <View style={styles.actionButtons}>\n          <Button\n            title=\"Change Host\"\n            onPress={props.onGoBack}\n            color={theme.secondaryTint}\n          />\n          <Button\n            title={isRegistering ? \"Register\" : \"Login\"}\n            onPress={submit}\n            color={theme.tint}\n          />\n        </View>\n      </KeyboardAvoidingView>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 35,\n  },\n  name: {\n    fontSize: 50,\n    fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n  },\n  domain: {\n    fontWeight: \"300\",\n  },\n  loginRegister: {\n    padding: 15,\n  },\n  input: {\n    width: \"100%\",\n    marginVertical: 5,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  actionButtons: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n});\n","import { lotideRequest } from \"./util\";\n\nexport async function login(\n  apiUrl: string,\n  username: string,\n  password: string,\n): Promise<Login> {\n  return lotideRequest(\n    { apiUrl },\n    \"POST\",\n    \"logins\",\n    { username, password },\n    true,\n  ).then(data => data.json());\n}\n\nexport async function register(\n  apiUrl: string,\n  username: string,\n  password: string,\n  email?: string,\n): Promise<Login> {\n  return lotideRequest(\n    { apiUrl },\n    \"POST\",\n    \"users\",\n    {\n      username,\n      password,\n      email_address: email,\n      login: true,\n    },\n    true,\n  ).then(data => data.json());\n}\n\nexport async function logout(ctx: LotideContext) {\n  return lotideRequest(ctx, \"DELETE\", \"logins/~current\");\n}\n\nexport async function forgotPasswordRequestKey(\n  ctx: LotideContext,\n  email: string,\n) {\n  return lotideRequest(\n    ctx,\n    \"POST\",\n    \"forgot_password/keys\",\n    {\n      email_address: email,\n    },\n    true,\n  );\n}\n\nexport async function forgotPasswordTestKey(ctx: LotideContext, key: string) {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `forgot_password/keys/${key}`,\n    undefined,\n    true,\n  );\n}\n\nexport async function forgotPasswordReset(\n  ctx: LotideContext,\n  key: string,\n  newPassword: string,\n) {\n  return lotideRequest(\n    ctx,\n    \"POST\",\n    `forgot_password/keys/${key}/reset`,\n    { new_password: newPassword },\n    true,\n  );\n}\n","import React, { useState } from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { View } from \"./Themed\";\nimport HostList from \"./HostList\";\nimport Login from \"./Login\";\n\nexport default function SuggestLogin() {\n  const [hostName, setHostName] = useState<string>();\n  const [domain, setDomain] = useState<string>();\n  const [username, setUsername] = useState<string>();\n\n  return (\n    <View style={styles.root}>\n      {!domain ? (\n        <HostList\n          onSelect={(domain, name, username) => {\n            setHostName(name);\n            setDomain(domain);\n            setUsername(username);\n          }}\n        />\n      ) : (\n        <Login\n          hostName={hostName}\n          domain={domain}\n          username={username}\n          onGoBack={() => setDomain(undefined)}\n        />\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  input: {\n    width: \"100%\",\n    marginBottom: 20,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  actionButtons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    width: \"100%\",\n  },\n});\n","import React, { ReactNode, useEffect, useRef, useState } from \"react\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport {\n  ColorValue,\n  NativeScrollEvent,\n  NativeSyntheticEvent,\n  Platform,\n  ScrollView,\n  useWindowDimensions,\n  View,\n  ViewStyle,\n} from \"react-native\";\nimport * as Haptics from \"../services/HapticService\";\n\nexport type Glyph = keyof typeof Icon.glyphMap;\n\nexport type SwipeActionProps = {\n  iconLeftSide: [Glyph, Glyph];\n  iconRightSide: [Glyph, Glyph];\n  colorLeftSide: ColorValue;\n  colorRightSide: ColorValue;\n  backgroundColor?: ColorValue;\n  onLeftSide: () => void;\n  onRightSide: () => void;\n  onReturnToCenter?: () => void;\n  children: ReactNode;\n  distanceToActivate?: number;\n  style?: ViewStyle;\n};\n\nexport default function SwipeAction(props: SwipeActionProps) {\n  if (Platform.OS !== \"ios\")\n    return <View style={props.style}>{props.children}</View>;\n  const distanceToActivate = props.distanceToActivate || 60;\n  const [isScrolling, setIsScrolling] = useState(false);\n  const [scroll, setScroll] = useState(0);\n  const [isLeft, setIsLeft] = useState(false);\n  const [isRight, setIsRight] = useState(false);\n  const [isCommitted, setIsCommitted] = useState(false);\n  const dimensions = useWindowDimensions();\n  const scrollRef = useRef<ScrollView>(null);\n\n  useEffect(() => {\n    if (scroll < 0 && !isLeft) {\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n      setIsLeft(true);\n    } else if (scroll >= 0 && isLeft) {\n      setIsLeft(false);\n      if (!isScrolling) {\n        setIsCommitted(true);\n        props.onLeftSide();\n      }\n    }\n    if (scroll >= distanceToActivate * 2 && !isRight) {\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n      setIsRight(true);\n    } else if (scroll < distanceToActivate * 2 && isRight) {\n      setIsRight(false);\n      if (!isScrolling) {\n        setIsCommitted(true);\n        props.onRightSide();\n      }\n    }\n    if (scroll == distanceToActivate) {\n      props.onReturnToCenter?.();\n      setIsRight(false);\n      setIsLeft(false);\n      setIsCommitted(false);\n    }\n  }, [scroll]);\n\n  function onScroll(event: NativeSyntheticEvent<NativeScrollEvent>) {\n    const scroll = event?.nativeEvent?.contentOffset?.x;\n    setScroll(scroll);\n  }\n\n  return (\n    <ScrollView\n      ref={scrollRef}\n      horizontal\n      snapToOffsets={[\n        distanceToActivate,\n        distanceToActivate + dimensions.width,\n      ]}\n      snapToStart={false}\n      snapToEnd={false}\n      onScrollBeginDrag={() => setIsScrolling(true)}\n      onScrollEndDrag={() => {\n        scrollRef.current?.scrollTo({ x: distanceToActivate });\n        setIsScrolling(false);\n      }}\n      contentOffset={{ x: distanceToActivate, y: 0 }}\n      onScroll={onScroll}\n      scrollEventThrottle={100}\n      showsHorizontalScrollIndicator={false}\n      style={{ backgroundColor: props.backgroundColor, ...props.style }}\n      overScrollMode=\"always\"\n    >\n      <View\n        style={{\n          width: distanceToActivate,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <Icon\n          name={props.iconLeftSide[+isLeft || +isCommitted]}\n          color={props.colorLeftSide}\n          size={25}\n        />\n      </View>\n      <View style={{ width: dimensions.width }}>{props.children}</View>\n      <View\n        style={{\n          width: distanceToActivate,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <Icon\n          name={props.iconRightSide[+isRight || +isCommitted]}\n          color={props.colorRightSide}\n          size={25}\n        />\n      </View>\n    </ScrollView>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { StyleSheet, FlatList, Pressable, Platform } from \"react-native\";\n\nimport PostDisplay from \"../components/PostDisplay\";\nimport { View } from \"../components/Themed\";\nimport * as Haptics from \"../services/HapticService\";\nimport { usePosts } from \"../hooks/lotide\";\nimport { RootTabScreenProps } from \"../types\";\nimport useTheme from \"../hooks/useTheme\";\nimport LotideContext from \"../store/LotideContext\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport { hasLogin } from \"../services/LotideService\";\nimport SwipeAction from \"../components/SwipeAction\";\nimport useVote from \"../hooks/useVote\";\n\nexport default function FeedScreen({\n  navigation,\n  route,\n}: RootTabScreenProps<\"FeedScreen\">) {\n  const sort = route.params.sort;\n  const ctx = useContext(LotideContext).ctx;\n  const [posts, isLoadingPosts, refreshPosts, loadNextPage] = usePosts(\n    sort,\n    true,\n  );\n  if (!hasLogin(ctx)) return <SuggestLogin />;\n  const renderItem = ({ item }: { item: Post }) => (\n    <Item post={item} navigation={navigation} />\n  );\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={posts}\n        renderItem={renderItem}\n        keyExtractor={(post, index) => `${post.id}-${index}`}\n        refreshing={isLoadingPosts}\n        onRefresh={refreshPosts}\n        onEndReachedThreshold={2}\n        onEndReached={loadNextPage}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n    borderBottomWidth: 8,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n    color: \"#eee\",\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    backgroundColor: \"#8884\",\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n  },\n  footText: {\n    color: \"#ccc\",\n  },\n  by: {\n    fontSize: 11,\n  },\n  score: {\n    fontSize: 18,\n    color: \"#bbb\",\n  },\n});\n\nconst Item = ({ post, navigation }: { post: Post; navigation: any }) => {\n  const { isUpvoted, addVote, removeVote } = useVote(\"post\", post);\n  const [isCommitting, setIsCommitting] = useState(false);\n  const theme = useTheme();\n\n  return (\n    <SwipeAction\n      iconLeftSide={\n        isUpvoted !== isCommitting\n          ? [\"heart-dislike\", \"heart-dislike-outline\"]\n          : [\"heart-outline\", \"heart\"]\n      }\n      iconRightSide={[\"arrow-undo-outline\", \"arrow-undo\"]}\n      colorLeftSide={theme.red}\n      colorRightSide={theme.blue}\n      onLeftSide={() => {\n        isUpvoted ? removeVote() : addVote();\n        setIsCommitting(true);\n      }}\n      onRightSide={() => {\n        navigation.navigate(\"Reply\", {\n          id: post.id,\n          title: post.title,\n          html: post.content_html,\n          type: \"post\",\n        });\n      }}\n      onReturnToCenter={() => setIsCommitting(false)}\n      backgroundColor={theme.secondaryBackground}\n      style={{ borderBottomWidth: 8, borderColor: theme.secondaryBackground }}\n    >\n      <Pressable\n        style={{\n          width: \"100%\",\n          ...(Platform.OS == \"web\" ? { cursor: \"pointer\" } : {}),\n        }}\n        onPress={() => navigation.navigate(\"Post\", { post })}\n        onLongPress={() => {\n          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n          console.log(post);\n        }}\n      >\n        <View style={[]}>\n          <PostDisplay post={post} navigation={navigation} />\n        </View>\n      </Pressable>\n    </SwipeAction>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { FlatList, Pressable, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport LotideContext from \"../store/LotideContext\";\nimport { TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport ActorDisplay from \"./ActorDisplay\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport interface CommunityFinderProps {\n  placeholder?: string;\n  onlyWhenTyping?: boolean;\n  focusId?: number;\n  onSelect: (community: Community) => void;\n}\n\nexport default function CommunityFinder(props: CommunityFinderProps) {\n  const [communities, setCommunities] = useState<Paged<Community>>();\n  const [filterText, setFilterText] = useState(\"\");\n  const ctx = useContext(LotideContext).ctx;\n  const theme = useTheme();\n\n  const communitiesToDisplay = (() => {\n    if (props.onlyWhenTyping && filterText === \"\") return [];\n    if (!communities) return [];\n    if (filterText === \"\") return communities.items;\n    return communities.items.filter(\n      c =>\n        c.name.toLowerCase().includes(filterText.toLowerCase()) ||\n        c.host.includes(filterText.toLowerCase()),\n    );\n  })();\n\n  useEffect(() => {\n    LotideService.getCommunities(ctx, false).then(setCommunities);\n  }, [ctx.login?.token, props.focusId]);\n\n  const renderItem = ({ item }: { item: Community }) => {\n    return (\n      <Pressable\n        onPress={() => props.onSelect(item)}\n        style={[\n          styles.item,\n          {\n            borderColor: theme.secondaryBackground,\n          },\n        ]}\n      >\n        <ActorDisplay\n          name={item.name}\n          host={item.host}\n          local={item.local}\n          colorize={\"always\"}\n          newLine\n        />\n        <View style={{ display: \"flex\", flexDirection: \"row\" }}>\n          {item.you_are_moderator && (\n            <Icon name=\"shield-outline\" size={20} color={theme.secondaryTint} />\n          )}\n          {item.your_follow?.accepted && (\n            <Icon\n              name=\"checkmark\"\n              size={20}\n              color={theme.secondaryTint}\n              style={{ marginLeft: 5 }}\n            />\n          )}\n        </View>\n      </Pressable>\n    );\n  };\n\n  return (\n    <View>\n      <TextInput\n        placeholder={props.placeholder || \"Filter communities\"}\n        value={filterText}\n        onChangeText={setFilterText}\n        style={styles.input}\n      />\n      <FlatList\n        data={communitiesToDisplay}\n        renderItem={renderItem}\n        keyExtractor={(item, index) => `${item.id}-${index}`}\n        contentContainerStyle={styles.list}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  input: {\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginTop: 20,\n  },\n  list: {\n    padding: 20,\n    paddingBottom: 100,\n  },\n  item: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    height: 50,\n    borderBottomWidth: 1,\n    paddingHorizontal: 20,\n  },\n});\n","import React, { useContext, useEffect, useState } from \"react\";\nimport LotideContext from \"../store/LotideContext\";\nimport { RootTabScreenProps } from \"../types\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport CommunityFinder from \"../components/CommunityFinder\";\n\nexport default function SearchScreen({\n  navigation,\n}: RootTabScreenProps<\"SearchScreen\">) {\n  const [focusId, setFocusId] = useState(0);\n  const { ctx } = useContext(LotideContext);\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(x => x + 1)),\n    [],\n  );\n\n  if (!ctx.login) return <SuggestLogin />;\n\n  return (\n    <CommunityFinder\n      onSelect={community => navigation.navigate(\"Community\", { community })}\n      focusId={focusId}\n    />\n  );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Alert, Button, Pressable, ScrollView, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { View, Text, TextInput } from \"../components/Themed\";\nimport { getUserData } from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { RootTabScreenProps } from \"../types\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport * as LotideService from \"../services/LotideService\";\nimport * as StorageService from \"../services/StorageService\";\nimport useTheme from \"../hooks/useTheme\";\nimport ActorDisplay from \"../components/ActorDisplay\";\n\nexport default function ProfileScreen({\n  navigation,\n}: RootTabScreenProps<\"ProfileScreen\">) {\n  const [profile, setProfile] = useState<Profile>();\n  const [profileList, setProfileList] = useState<string[]>([]);\n  const [communities, setCommunities] = useState<Community[]>([]);\n  const [isEditing, setIsEditing] = useState(false);\n  const [focusId, setFocusId] = useState(0);\n  const theme = useTheme();\n  const { ctx, setContext } = useContext(LotideContext);\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(x => x + 1)),\n    [],\n  );\n\n  useEffect(() => {\n    if (!ctx.login) return;\n    // TODO: Use the pagination feature\n    LotideService.getCommunities(ctx, true).then(communities =>\n      setCommunities(communities.items),\n    );\n  }, [ctx.login?.user.id, focusId]);\n\n  useEffect(() => {\n    if (ctx.login !== undefined && ctx.login.user !== undefined) {\n      getUserData(ctx, ctx.login?.user.id || 0).then(setProfile);\n    }\n  }, [ctx.login?.token, focusId]);\n\n  useEffect(() => {\n    StorageService.lotideContextKV\n      .listKeys()\n      .then(keys => setProfileList(keys));\n  }, [ctx, focusId]);\n\n  if (ctx.login === undefined) {\n    return <SuggestLogin />;\n  }\n\n  function logout() {\n    Alert.alert(\n      \"Log out\",\n      \"Would you like to keep the login profile handy for later?\",\n      [\n        {\n          text: \"Cancel\",\n          style: \"cancel\",\n        },\n        {\n          text: \"Remove\",\n          onPress: () => {\n            StorageService.lotideContextKV\n              .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n              .then(() => LotideService.logout(ctx))\n              .then(() => setContext({}));\n          },\n        },\n        {\n          text: \"Keep\",\n          style: \"default\",\n          onPress: () => {\n            StorageService.lotideContextKV.logout(ctx);\n            setContext({});\n          },\n        },\n      ],\n      { cancelable: true },\n    );\n  }\n\n  return (\n    <ScrollView\n      style={[styles.container, { backgroundColor: theme.background }]}\n    >\n      <View style={styles.header}>\n        <View>\n          <Pressable hitSlop={10} onPress={() => setIsEditing(x => !x)}>\n            <Text style={styles.title}>\n              {profile?.username || ctx.login.user.username}\n              {\"  \"}\n              <Icon\n                name=\"pencil-outline\"\n                size={20}\n                color={theme.secondaryText}\n              />\n            </Text>\n          </Pressable>\n          <Text style={{ color: theme.secondaryText }}>{profile?.host}</Text>\n          {!!profile?.avatar && <Text>{profile?.avatar?.url}</Text>}\n          {!!profile?.description && <Text>{profile?.description}</Text>}\n        </View>\n        <Button\n          onPress={logout}\n          title=\"Log Out\"\n          color={theme.secondaryTint}\n          accessibilityLabel=\"Log out of the Hoot network\"\n        />\n      </View>\n      {isEditing && (\n        <View style={styles.editView}>\n          <TextInput style={styles.editViewText} placeholder=\"New email\" />\n          <TextInput\n            style={styles.editViewText}\n            placeholder=\"User bio\"\n            multiline={true}\n          />\n          <TextInput style={styles.editViewText} placeholder=\"New password\" />\n          <TextInput\n            style={styles.editViewText}\n            placeholder=\"Confirm new password\"\n          />\n          <View style={styles.editViewActionButtons}>\n            <Button\n              onPress={() => setIsEditing(false)}\n              title=\"Cancel\"\n              color={theme.secondaryTint}\n              accessibilityLabel=\"Add profile\"\n            />\n            <Button\n              onPress={() => Alert.alert(\"unimplemented\")}\n              title=\"Submit\"\n              color={theme.tint}\n              accessibilityLabel=\"Add profile\"\n            />\n          </View>\n        </View>\n      )}\n      <Button\n        onPress={() => setContext({})}\n        title=\"Add Profile\"\n        color={theme.tint}\n        accessibilityLabel=\"Add profile\"\n      />\n      {profileList\n        .map(p => [p, ...p.split(\"@\")] as string[])\n        .map(p => [\n          p[0],\n          p[1],\n          p[2].replace(\"http://\", \"\").replace(\"https://\", \"\").split(/[/?#]/)[0],\n        ])\n        .map(p => (\n          <Pressable\n            key={p[0]}\n            style={[\n              styles.altProfileButton,\n              { borderColor: theme.secondaryBackground },\n            ]}\n            onPress={() => {\n              StorageService.lotideContextKV.query(p[0]).then(ctx => {\n                if (ctx !== undefined) {\n                  setContext(ctx);\n                  setIsEditing(false);\n                }\n              });\n            }}\n          >\n            <ActorDisplay\n              name={p[1]}\n              host={p[2]}\n              local={true}\n              showHost={\"always\"}\n              colorize={\"never\"}\n              newLine={true}\n            />\n          </Pressable>\n        ))}\n      <View style={{ paddingTop: 10 }}>\n        <Button\n          onPress={() => navigation.navigate(\"NewCommunity\")}\n          title=\"Create Community\"\n          color={theme.tint}\n          accessibilityLabel=\"Create a new community\"\n        />\n      </View>\n      <Text style={styles.followingTitle}>Communities You Follow:</Text>\n      {communities.map(community => (\n        <View\n          key={community.id}\n          style={[\n            styles.altProfileButton,\n            { borderColor: theme.secondaryBackground },\n          ]}\n        >\n          <ActorDisplay\n            name={community.name}\n            host={community.host}\n            local={community.local}\n            showHost={\"always\"}\n            colorize={\"always\"}\n            newLine={true}\n          />\n        </View>\n      ))}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\",\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  followingTitle: {\n    fontSize: 18,\n    fontWeight: \"500\",\n    padding: 20,\n  },\n  editView: {\n    margin: 20,\n  },\n  editViewText: {\n    marginBottom: 15,\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n  },\n  editViewActionButtons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    height: 40,\n    borderWidth: 1,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  altProfileButton: {\n    marginHorizontal: 20,\n    paddingVertical: 15,\n    borderBottomWidth: 1,\n  },\n});\n","import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n  TextInput,\n  TouchableWithoutFeedback,\n} from \"react-native\";\nimport { View, Text, TextInput as TextInputThemed } from \"../components/Themed\";\nimport LotideContext from \"../store/LotideContext\";\nimport { RootTabScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport useTheme from \"../hooks/useTheme\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport CommunityFinder from \"../components/CommunityFinder\";\nimport ActorDisplay from \"../components/ActorDisplay\";\n\nexport default function NewPostScreen({\n  navigation,\n  route,\n}: RootTabScreenProps<\"NewPostScreen\">) {\n  const [community, setCommunity] = useState<Community | null | undefined>(\n    route.params.community,\n  );\n  const [title, setTitle] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n  const ctx = lotideContext.ctx;\n\n  useEffect(() => {\n    return navigation.addListener(\"focus\", () => {\n      if (route.params.community) {\n        return setCommunity(route.params.community);\n      }\n      if (community === null) {\n        return setCommunity(undefined);\n      }\n    });\n  }, [community, community?.id, route.params.community?.id]);\n\n  if (ctx.login === undefined) {\n    return <SuggestLogin />;\n  }\n\n  if (community === null)\n    return <CommunityFinder onSelect={setCommunity} onlyWhenTyping />;\n\n  function submit() {\n    if (!community) return;\n    LotideService.submitPost(ctx, {\n      community: community.id,\n      title: title,\n      href: link || undefined,\n      content_markdown: content || \" \",\n    })\n      .then(data => {\n        LotideService.getPost(ctx, data.id).then(post => {\n          reset();\n          navigation.navigate(\"Post\", { post });\n        });\n      })\n      .catch(e => Alert.alert(\"Could not submit post\", e));\n  }\n\n  function reset() {\n    setCommunity(undefined);\n    setTitle(\"\");\n    setLink(\"\");\n    setContent(\"\");\n  }\n\n  return (\n    <KeyboardAvoidingView style={{ width: \"100%\", height: \"100%\" }}>\n      <TouchableWithoutFeedback\n        onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n      >\n        <View style={styles.container}>\n          <Pressable onPress={() => setCommunity(null)}>\n            {community ? (\n              <ActorDisplay\n                name={community.name}\n                host={community.host}\n                local={community.local}\n                colorize={\"always\"}\n                showHost={\"always\"}\n                newLine\n                style={styles.input}\n              />\n            ) : (\n              <Text style={[styles.input, { color: theme.secondaryText }]}>\n                Select a Community\n              </Text>\n            )}\n          </Pressable>\n          <TextInput\n            style={[styles.input, styles.title, { color: theme.text }]}\n            placeholder=\"Add a Title\"\n            placeholderTextColor={theme.placeholderText}\n            value={title}\n            onChangeText={setTitle}\n          />\n          {title.length >= 4 ? (\n            <>\n              <TextInput\n                style={[styles.input, { color: theme.text }]}\n                placeholder=\"Link\"\n                placeholderTextColor={theme.placeholderText}\n                value={link}\n                onChangeText={setLink}\n                keyboardType=\"url\"\n                textContentType=\"URL\"\n              />\n              <TextInputThemed\n                style={{ marginVertical: 20, minHeight: 100 }}\n                multiline\n                placeholder=\"Add post content\"\n                value={content}\n                onChangeText={setContent}\n              />\n            </>\n          ) : (\n            <Text style={{ color: theme.secondaryText }}>\n              {title.length > 0 && 4 - title.length}\n            </Text>\n          )}\n          {!!community && title.length >= 4 && (\n            <Button\n              onPress={submit}\n              title=\"Submit\"\n              color={theme.tint}\n              accessibilityLabel=\"Submit new post\"\n            />\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"stretch\",\n    padding: 15,\n    height: \"100%\",\n    width: \"100%\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    paddingVertical: 10,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  item: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginBottom: 1,\n  },\n});\n","import React from \"react\";\nimport { View, Text } from \"../components/Themed\";\n\nexport default function SettingsScreen() {\n  return (\n    <View>\n      <Text>Settings screen. It'll be implemented eventually.</Text>\n    </View>\n  );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Alert, Button, FlatList, Pressable, StyleSheet } from \"react-native\";\nimport { View, Text } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as Haptics from \"../services/HapticService\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { usePosts } from \"../hooks/lotide\";\nimport PostDisplay from \"../components/PostDisplay\";\nimport { ActorDisplay } from \"../components/ActorDisplay\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nexport default function CommunityScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Community\">) {\n  const [community, setCommunity] = useState(route.params.community);\n  const [posts, isLoadingPosts, refreshPosts, loadNextPage] = usePosts(\n    \"hot\",\n    undefined,\n    community.id,\n  );\n  const [reloadId, setReloadId] = useState(0);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  useEffect(() => {\n    LotideService.getCommunity(ctx, community.id).then(setCommunity);\n  }, [route.params.community.id, route.params.community.description, reloadId]);\n\n  const renderItem = ({ item }: { item: Post }) => (\n    <Item post={item} navigation={navigation} />\n  );\n\n  return (\n    <View style={[styles.root, { backgroundColor: theme.background }]}>\n      <FlatList\n        data={posts}\n        renderItem={renderItem}\n        ListHeaderComponent={\n          <ListHeader community={community} setReloadId={setReloadId} />\n        }\n        keyExtractor={(post, index) => `${post.id}-${index}`}\n        refreshing={isLoadingPosts}\n        onRefresh={refreshPosts}\n        onEndReachedThreshold={2}\n        onEndReached={loadNextPage}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    height: \"100%\",\n  },\n  header: {\n    padding: 20,\n    paddingVertical: 15,\n    borderBottomWidth: StyleSheet.hairlineWidth || 1,\n  },\n  title: {\n    fontSize: 20,\n  },\n  description: {\n    marginTop: 10,\n  },\n  buttons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n    borderBottomWidth: 8,\n  },\n});\n\nconst Item = ({ post, navigation }: { post: Post; navigation: any }) => {\n  const theme = useTheme();\n  return (\n    <Pressable\n      onPress={() => navigation.navigate(\"Post\", { post })}\n      onLongPress={() => {\n        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n      }}\n    >\n      <View\n        style={[styles.item, { borderBottomColor: theme.secondaryBackground }]}\n      >\n        <PostDisplay post={post} navigation={navigation} />\n      </View>\n    </Pressable>\n  );\n};\n\ntype ListHeaderProps = {\n  community: Community;\n  setReloadId: (a: (x: number) => number) => void;\n};\n\nconst ListHeader = React.memo((props: ListHeaderProps) => {\n  const theme = useTheme();\n  const navigation = useNavigation();\n  const community = props.community;\n  const setReloadId = props.setReloadId;\n  const { ctx } = useContext(LotideContext);\n\n  const isFollowing = community.your_follow?.accepted || false;\n\n  function follow() {\n    LotideService.followCommunity(ctx, community.id).then(data => {\n      if (data.accepted === false) {\n        Alert.alert(\n          \"Follow request rejected.\",\n          \"This could be an issue with the node you are connected to.\",\n        );\n      }\n      setReloadId(x => x + 1);\n    });\n  }\n\n  function unfollow() {\n    LotideService.unfollowCommunity(ctx, community.id).then(() => {\n      setReloadId(x => x + 1);\n    });\n  }\n\n  return (\n    <View\n      style={[\n        styles.header,\n        {\n          borderBottomColor: theme.tertiaryBackground,\n        },\n      ]}\n    >\n      <View>\n        <ActorDisplay\n          name={community.name}\n          host={community.host}\n          local={community.local}\n          newLine={true}\n          colorize=\"always\"\n          showHost=\"always\"\n          styleName={[styles.title]}\n        />\n        {community.description !== \"\" && (\n          <Text style={styles.description}>{community.description}</Text>\n        )}\n      </View>\n      <View style={[styles.buttons]}>\n        <Button\n          onPress={() => navigation.navigate(\"NewPostScreen\", { community })}\n          title=\"Post\"\n          color={theme.tint}\n          accessibilityLabel=\"Post to this community\"\n        />\n        {community.you_are_moderator && (\n          <Button\n            onPress={() => navigation.navigate(\"EditCommunity\", { community })}\n            title=\"Edit\"\n            color={theme.tint}\n            accessibilityLabel=\"Edit your community community\"\n          />\n        )}\n        {isFollowing ? (\n          <Button\n            onPress={unfollow}\n            title=\"Unfollow\"\n            color={theme.secondaryTint}\n            accessibilityLabel=\"Stop seeing posts from this community\"\n          />\n        ) : (\n          <Button\n            onPress={follow}\n            title=\"Follow\"\n            color={theme.tint}\n            accessibilityLabel=\"See posts from this community in your feed\"\n          />\n        )}\n      </View>\n    </View>\n  );\n});\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport { Text, TextInput } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport ContentDisplay from \"../components/ContentDisplay\";\nimport { ScrollView } from \"react-native-gesture-handler\";\n\nexport default function ReplyScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Reply\">) {\n  const [text, setText] = useState(\"\");\n  const scrollRef = useRef<ScrollView>(null);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n  const id = route.params.id;\n  const title = route.params.title;\n  const html = route.params.html;\n  const type = route.params.type;\n\n  function submit() {\n    if (type === \"post\") {\n      LotideService.replyToPost(ctx, id, text).then(() => navigation.pop());\n    } else {\n      LotideService.replyToReply(ctx, id, text).then(() => navigation.pop());\n    }\n  }\n\n  function scrollToBottom() {\n    if (scrollRef.current) {\n      scrollRef.current.scrollToEnd({ animated: true });\n    }\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n    >\n      <ScrollView ref={scrollRef}>\n        <Pressable\n          style={styles.root}\n          onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n        >\n          <Text>Reply to {type}</Text>\n          {!!title && <Text style={styles.title}>{title}</Text>}\n          {html && <ContentDisplay contentHtml={html} />}\n          <TextInput\n            style={styles.input}\n            multiline\n            placeholder=\"Type your reply\"\n            value={text}\n            onChangeText={setText}\n            onFocus={scrollToBottom}\n          />\n          <Button title=\"Submit\" color={theme.tint} onPress={submit} />\n        </Pressable>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: { padding: 20, paddingBottom: 100 },\n  title: {\n    fontSize: 20,\n    marginVertical: 10,\n  },\n  input: {\n    marginVertical: 20,\n    minHeight: 100,\n  },\n});\n","import React from \"react\";\n\nexport const defaultSelectedReplyContext: SelectedReplyContext = [\n  undefined,\n  () => {},\n];\n\nexport const SelectedReplyContext = React.createContext<SelectedReplyContext>(\n  defaultSelectedReplyContext,\n);\n","import React, { useContext, useState } from \"react\";\nimport { ColorValue, Pressable, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { View, Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport ElapsedTime from \"./ElapsedTime\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport ContentDisplay from \"./ContentDisplay\";\nimport { SelectedReplyContext } from \"../store/SelectedReplyContext\";\nimport VoteCounter from \"./VoteCounter\";\nimport ActorDisplay from \"./ActorDisplay\";\n\nexport interface RepliesDisplayProps {\n  replies: Paged<Reply>;\n  navigation: any;\n  layer?: number;\n  postId?: PostId;\n  replyId?: ReplyId;\n  highlightedReplies?: ReplyId[];\n}\n\nexport default function RepliesDisplay({\n  replies,\n  navigation,\n  layer = 0,\n  postId,\n  replyId,\n  highlightedReplies = [],\n}: RepliesDisplayProps) {\n  const [nextPageData, setNextPageData] = useState<Paged<Reply>>();\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n  const layerColors = [\n    theme.text,\n    theme.red,\n    theme.orange,\n    theme.yellow,\n    theme.green,\n    theme.teal,\n    theme.blue,\n    theme.indigo,\n    theme.purple,\n  ];\n\n  return (\n    <View>\n      {replies.items.map(reply => (\n        <ReplyDisplay\n          reply={reply}\n          layer={layer}\n          key={reply.id}\n          navigation={navigation}\n          layerColors={layerColors}\n          postId={postId}\n          highlightedReplies={highlightedReplies}\n        />\n      ))}\n      {replies.next_page !== null &&\n        nextPageData === undefined &&\n        (postId || replyId) && (\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              if (replyId) {\n                LotideService.getReplyReplies(\n                  ctx,\n                  replyId,\n                  replies.next_page || undefined,\n                ).then(setNextPageData);\n              } else if (postId) {\n                LotideService.getPostReplies(\n                  ctx,\n                  postId,\n                  replies.next_page || undefined,\n                ).then(setNextPageData);\n              }\n            }}\n          >\n            <Text\n              style={{ color: theme.tint, paddingTop: 5, paddingBottom: 10 }}\n            >\n              More replies <Icon name=\"chevron-down-outline\" />\n            </Text>\n          </Pressable>\n        )}\n      {nextPageData !== undefined && (\n        <RepliesDisplay\n          replies={nextPageData}\n          navigation={navigation}\n          layer={layer}\n          postId={postId}\n          replyId={replyId}\n          highlightedReplies={highlightedReplies}\n        />\n      )}\n      {replies.next_page === null && layer === 0 && (\n        <Text style={{ margin: 17, color: theme.secondaryText }}>\n          {replies.items.length > 0 ? \"No more replies\" : \"No replies yet\"}\n        </Text>\n      )}\n    </View>\n  );\n}\n\nfunction ReplyDisplay({\n  reply,\n  layer = 0,\n  navigation,\n  layerColors,\n  postId,\n  highlightedReplies = [],\n}: {\n  reply: Reply;\n  layer: number;\n  navigation: any;\n  layerColors: ColorValue[];\n  postId?: PostId;\n  highlightedReplies?: ReplyId[];\n}) {\n  const [nextPageData, setNextPageData] = useState<Paged<Reply>>();\n  const [showChildren, setShowChildren] = React.useState(true);\n  const theme = useTheme();\n  const { ctx } = useContext(LotideContext);\n  const [selectedReply, setSelectedReply] = useContext(SelectedReplyContext);\n\n  return (\n    <View style={{ paddingLeft: 0 }}>\n      <View\n        style={{\n          paddingVertical: 8,\n          borderTopWidth: 0.5,\n          borderTopColor: theme.secondaryBackground,\n        }}\n      >\n        <Pressable\n          onPress={() =>\n            setSelectedReply(selectedReply != reply.id ? reply.id : undefined)\n          }\n        >\n          <View\n            style={{\n              borderLeftWidth: 2,\n              borderColor: layerColors[layer % layerColors.length],\n              paddingLeft: 15,\n              paddingVertical: 3,\n              backgroundColor: highlightedReplies.includes(reply.id)\n                ? theme.secondaryBackground\n                : theme.background,\n            }}\n          >\n            <View\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                flexWrap: \"wrap\",\n                marginBottom: 5,\n              }}\n            >\n              <ActorDisplay\n                name={reply.author.username}\n                host={reply.author.host}\n                local={reply.author.local}\n                showHost=\"only_foreign\"\n                colorize=\"only_foreign\"\n                style={{ fontSize: 16, fontWeight: \"500\" }}\n              />\n              <View\n                style={{\n                  marginRight: 15,\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Text>{!showChildren && \"...    \"}</Text>\n                <Icon name=\"heart-outline\" size={14} color={theme.text} light />\n                <Text>{` ${reply.score}   `}</Text>\n                <ElapsedTime time={reply.created} />\n              </View>\n            </View>\n            {showChildren && !!reply.content_html && (\n              <ContentDisplay\n                contentHtml={reply.content_html}\n                contentText={reply.content_text}\n              />\n            )}\n          </View>\n          {selectedReply == reply.id && (\n            <View style={styles.buttons}>\n              <VoteCounter\n                type=\"reply\"\n                content={reply}\n                hideCount\n                style={styles.button}\n              />\n              {/* <Pressable style={styles.button}>\n                <Icon color={theme.text} size={20} name=\"bookmark-outline\" />\n              </Pressable> */}\n              <Pressable\n                style={styles.button}\n                onPress={() => {\n                  Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n                  navigation.navigate(\"Reply\", {\n                    id: reply.id,\n                    title: reply.author.username,\n                    html: reply.content_html,\n                    type: \"reply\",\n                  });\n                }}\n              >\n                <Icon color={theme.text} size={20} name=\"arrow-undo-outline\" />\n              </Pressable>\n              <Pressable\n                style={styles.button}\n                onPress={() => {\n                  setShowChildren(s => !s);\n                }}\n              >\n                <Icon\n                  color={\n                    (reply.replies?.items.length || 0) > 0\n                      ? theme.text\n                      : theme.secondaryText\n                  }\n                  size={20}\n                  name={\n                    showChildren ? \"chevron-up-outline\" : \"chevron-down-outline\"\n                  }\n                />\n              </Pressable>\n              {/* <Pressable style={styles.button}>\n                <Icon\n                  color={theme.text}\n                  size={20}\n                  name=\"ellipsis-vertical-outline\"\n                />\n              </Pressable> */}\n            </View>\n          )}\n        </Pressable>\n      </View>\n      {reply.replies !== null\n        ? reply.replies.items.length > 0 &&\n          (showChildren ? (\n            <View style={{ paddingLeft: 15 }}>\n              <RepliesDisplay\n                replies={reply.replies}\n                layer={layer + 1}\n                navigation={navigation}\n                postId={postId}\n                replyId={reply.id}\n                highlightedReplies={highlightedReplies}\n              />\n            </View>\n          ) : (\n            <Text>...</Text>\n          ))\n        : nextPageData === undefined && (\n            <Pressable\n              hitSlop={5}\n              onPress={() => {\n                LotideService.getReplyReplies(ctx, reply.id).then(\n                  setNextPageData,\n                );\n              }}\n            >\n              <View style={{ paddingHorizontal: 15, paddingBottom: 10 }}>\n                <Text style={{ color: theme.tint }}>\n                  More replies <Icon name=\"chevron-forward-outline\" />\n                </Text>\n              </View>\n            </Pressable>\n          )}\n      {nextPageData !== undefined && (\n        <View style={{ paddingLeft: 15 }}>\n          <RepliesDisplay\n            replies={nextPageData}\n            navigation={navigation}\n            layer={layer + 1}\n            postId={postId}\n            replyId={reply.id}\n          />\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    paddingHorizontal: 15,\n  },\n  button: {\n    padding: 10,\n    paddingHorizontal: 15,\n  },\n});\n","import Icon from \"@expo/vector-icons/Ionicons\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  StatusBar,\n  ScrollView,\n  Pressable,\n  Share,\n} from \"react-native\";\nimport * as Haptics from \"../services/HapticService\";\nimport PostDisplay from \"../components/PostDisplay\";\nimport { View, Text } from \"../components/Themed\";\nimport { useReplies } from \"../hooks/lotide\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport LotideContext from \"../store/LotideContext\";\nimport RepliesDisplay from \"../components/RepliesDisplay\";\nimport { SelectedReplyContext } from \"../store/SelectedReplyContext\";\n\nexport default function ModalScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Post\">) {\n  const post = route.params.post;\n  const [highlightedReplies, setHighlightedReplies] = useState(\n    route.params.highlightedReplies,\n  );\n  const [focusId, setFocusId] = useState(0);\n  const [selectedReply, setSelectedReply] = useState<ReplyId>();\n  const ctx = useContext(LotideContext).ctx;\n  const replies = useReplies(\n    ctx,\n    post.id,\n    [focusId, highlightedReplies?.join(\",\")],\n    highlightedReplies?.[0],\n  );\n  const theme = useTheme();\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(x => x + 1)),\n    [],\n  );\n\n  return (\n    <ScrollView>\n      <View\n        style={{\n          ...styles.item,\n          backgroundColor: theme.background,\n        }}\n      >\n        <PostDisplay\n          post={post}\n          navigation={navigation}\n          showHtmlContent\n          showAuthor\n        />\n        <View style={styles.actions}>\n          <Icon name=\"bookmark-outline\" size={25} color={theme.text} />\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              navigation.navigate(\"Reply\", {\n                id: post.id,\n                title: post.title,\n                html: post.content_html,\n                type: \"post\",\n              });\n            }}\n          >\n            <Icon name=\"arrow-undo-outline\" size={25} color={theme.text} />\n          </Pressable>\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              Share.share({\n                message: post.title,\n                url: `https://dev.goldandblack.xyz/p/posts/${post.id}`,\n                title: \"Hoot\",\n              });\n            }}\n          >\n            <Icon name=\"share-outline\" size={25} color={theme.text} />\n          </Pressable>\n        </View>\n        {highlightedReplies && (\n          <Pressable onPress={() => setHighlightedReplies(undefined)}>\n            <Text style={{ color: theme.tint, paddingVertical: 10 }}>\n              Show all replies\n            </Text>\n          </Pressable>\n        )}\n        <SelectedReplyContext.Provider\n          value={[selectedReply, setSelectedReply]}\n        >\n          <RepliesDisplay\n            replies={replies}\n            navigation={navigation}\n            postId={post.id}\n            highlightedReplies={highlightedReplies}\n          />\n        </SelectedReplyContext.Provider>\n        <View style={{ height: 300 }} />\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    backgroundColor: \"#8884\",\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n    borderBottomColor: \"#8884\",\n    borderBottomWidth: 2,\n  },\n  by: {\n    fontSize: 11,\n  },\n  actions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    padding: 10,\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import * as LotideService from \"../services/LotideService\";\n\nexport interface Origin {\n  type: \"post\" | \"comment\";\n  id: number;\n  content_text?: string;\n  content_html?: string;\n  author: Profile;\n}\n\nexport async function transformToFullNotification(\n  ctx: LotideContext,\n  notification: UserNotification,\n): Promise<FullNotification> {\n  const post = LotideService.getPost(ctx, notification.post.id);\n  const origin = notification.comment\n    ? originFromComment(ctx, notification.comment!)\n    : originFromPost(await post);\n  const reply = await LotideService.getReply(ctx, notification.reply.id);\n\n  return {\n    unseen: notification.unseen,\n    reply: {\n      id: reply.id,\n      content_text: reply.content_text,\n      content_html: reply.content_html,\n      author: reply.author,\n    },\n    origin: await origin,\n    post: await post,\n  };\n}\n\nexport async function originFromComment(\n  ctx: LotideContext,\n  commentId: ReplyId,\n): Promise<Origin> {\n  const comment = await LotideService.getReply(ctx, commentId);\n  return {\n    type: \"comment\",\n    id: commentId,\n    content_text: comment.content_text,\n    content_html: comment.content_html,\n    author: comment.author,\n  };\n}\n\nexport async function originFromPost(post: Post): Promise<Origin> {\n  return {\n    type: \"post\",\n    id: post.id,\n    content_text: post.title,\n    author: post.author,\n  };\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { FlatList, Pressable, StyleSheet } from \"react-native\";\nimport ActorDisplay from \"../components/ActorDisplay\";\nimport ContentDisplay from \"../components/ContentDisplay\";\nimport SuggestLogin from \"../components/SuggestLogin\";\n\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { transformToFullNotification } from \"../transformers/NotificationTransformer\";\nimport { RootTabScreenProps } from \"../types\";\n\nexport default function NotificationScreen({\n  navigation,\n}: RootTabScreenProps<\"NotificationScreen\">) {\n  const [notifications, setNotifications] = useState<FullNotification[]>([]);\n  const [isRefreshing, setIsRefreshing] = useState(true);\n  const [focusId, setFocusId] = useState(0);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  useEffect(() => {\n    if (!ctx.login) return;\n    LotideService.getNotifications(ctx).then(notifications => {\n      const promises = notifications.map(n =>\n        transformToFullNotification(ctx, n),\n      );\n      Promise.all(promises)\n        .then(setNotifications)\n        .then(() => setIsRefreshing(false));\n    });\n  }, [focusId]);\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(i => i + 1)),\n    [],\n  );\n\n  if (!ctx.login) return <SuggestLogin />;\n\n  const renderItem = ({ item }: { item: FullNotification }) => {\n    return (\n      <Pressable\n        style={[styles.item, { borderColor: theme.secondaryBackground }]}\n        onPress={() => {\n          const highlightedReplies =\n            item.origin.type === \"comment\"\n              ? [item.origin.id, item.reply.id]\n              : [item.reply.id];\n          navigation.navigate(\"Post\", {\n            post: item.post,\n            highlightedReplies,\n          });\n        }}\n      >\n        <Text style={styles.name}>{item.post.author.username}</Text>\n        <Text style={styles.title}>{item.post.title}</Text>\n        <Text>\n          In{\" \"}\n          <ActorDisplay\n            name={item.post.community.name}\n            host={item.post.community.host}\n            local={item.post.community.local}\n            showHost={\"always\"}\n            colorize={\"never\"}\n          />\n        </Text>\n        {item.origin.type === \"comment\" ? (\n          <>\n            <View style={[styles.level1, { borderColor: theme.secondaryText }]}>\n              <Text style={styles.name}>{item.origin.author.username}</Text>\n              <ContentDisplay\n                contentHtml={item.origin.content_html}\n                contentText={item.origin.content_text}\n              />\n            </View>\n            <View style={[styles.level2, { borderColor: theme.tint }]}>\n              <Text style={styles.name}>{item.reply.author.username}</Text>\n              <ContentDisplay\n                contentHtml={item.reply.content_html}\n                contentText={item.reply.content_text}\n              />\n            </View>\n          </>\n        ) : (\n          <>\n            <View style={[styles.level1, { borderColor: theme.tint }]}>\n              <Text style={styles.name}>{item.reply.author.username}</Text>\n              <ContentDisplay\n                contentHtml={item.reply.content_html}\n                contentText={item.reply.content_text}\n              />\n            </View>\n          </>\n        )}\n      </Pressable>\n    );\n  };\n\n  return (\n    <FlatList\n      style={styles.container}\n      data={notifications}\n      renderItem={renderItem}\n      keyExtractor={(item, index) => `${item.reply.id}-${index}`}\n      refreshing={isRefreshing}\n      onRefresh={() => {\n        setIsRefreshing(true);\n        setFocusId(i => i + 1);\n      }}\n    ></FlatList>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  item: { borderBottomWidth: 5, padding: 15 },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  level1: {\n    marginTop: 5,\n    borderLeftWidth: 2,\n    paddingLeft: 15,\n    padding: 5,\n  },\n  level2: {\n    marginTop: 5,\n    marginLeft: 15,\n    borderLeftWidth: 2,\n    paddingLeft: 15,\n    padding: 5,\n  },\n  name: {\n    fontWeight: \"600\",\n    marginBottom: 3,\n  },\n  thin: {\n    fontWeight: \"200\",\n  },\n});\n","import { lotideRequest } from \"./util\";\n\nexport async function getNotifications(\n  ctx: LotideContext,\n): Promise<UserNotification[]> {\n  return lotideRequest(ctx, \"GET\", \"users/~me/notifications\").then(data =>\n    data.json(),\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { Alert, Button, StyleSheet, TextInput } from \"react-native\";\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\n\nexport default function NewCommunityScreen({\n  navigation,\n}: RootStackScreenProps<\"NewCommunity\">) {\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  function submit() {\n    LotideService.newCommunity(ctx, name)\n      .then(async data => {\n        const id = data.community.id;\n        if (description) {\n          await LotideService.editCommunity(ctx, id, description);\n        }\n        await LotideService.followCommunity(ctx, id);\n        const community = await LotideService.getCommunity(ctx, id);\n        navigation.replace(\"Community\", { community });\n      })\n      .catch(e => Alert.alert(\"Failed to create community\", e));\n  }\n\n  return (\n    <View style={styles.root}>\n      <TextInput\n        style={[styles.input, { fontSize: 20, color: theme.text }]}\n        placeholder=\"Community Name\"\n        value={name}\n        onChangeText={setName}\n      />\n      {name.length >= 4 ? (\n        <>\n          <TextInput\n            style={[styles.input, { color: theme.text }]}\n            placeholder=\"Description (Optional)\"\n            value={description}\n            onChangeText={setDescription}\n          />\n          <Button\n            title=\"Submit\"\n            color={theme.tint}\n            onPress={submit}\n            accessibilityLabel=\"Create new community\"\n          />\n        </>\n      ) : (\n        <Text>{name.length > 0 && 4 - name.length}</Text>\n      )}\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"flex-start\",\n    padding: 15,\n    height: \"100%\",\n    width: \"100%\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    paddingVertical: 10,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  item: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginBottom: 1,\n  },\n});\n","import React, { useState } from \"react\";\nimport { RootStackScreenProps } from \"../types\";\nimport { Text, TextInput, View } from \"../components/Themed\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as LotideService from \"../services/LotideService\";\n\nexport default function ForgotPasswordScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"ForgotPassword\">) {\n  const [isAwaitingKey, setIsAwaitingKey] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [validKey, setValidKey] = useState<string>();\n  const [password, setPassword] = useState(\"\");\n  const theme = useTheme();\n\n  function submitEmail() {\n    if (!email)\n      return Alert.alert(\n        \"Email address required\",\n        \"An email with a password reset key will be emailed to you\",\n      );\n    LotideService.forgotPasswordRequestKey(\n      { apiUrl: `https://${route.params.node}/api/unstable` },\n      email,\n    )\n      .then(() => {\n        setIsAwaitingKey(true);\n      })\n      .catch(e => Alert.alert(\"Failed to send reset key\", e));\n  }\n\n  function submitPassword() {\n    if (!password) return Alert.alert(\"Password required\");\n    if (!validKey) return Alert.alert(\"No key\", \"Fail. This shouldn't happen\");\n    LotideService.forgotPasswordReset(\n      { apiUrl: `https://${route.params.node}/api/unstable` },\n      validKey,\n      password,\n    ).then(() => navigation.popToTop());\n  }\n\n  function keyChange(key: string) {\n    if (key.length < 6) return;\n    LotideService.forgotPasswordTestKey(\n      { apiUrl: `https://${route.params.node}/api/unstable` },\n      key,\n    ).then(() => setValidKey(key));\n  }\n\n  return (\n    <Pressable\n      style={{ flex: 1 }}\n      onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n    >\n      <KeyboardAvoidingView style={styles.root} behavior=\"padding\">\n        <Pressable>\n          <Text>{route.params.node}</Text>\n        </Pressable>\n        {!isAwaitingKey ? (\n          <>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Email Address\"\n              value={email}\n              onChangeText={setEmail}\n              keyboardType=\"email-address\"\n              textContentType=\"emailAddress\"\n              autoCompleteType=\"email\"\n              returnKeyType=\"go\"\n              autoCapitalize=\"none\"\n            />\n            <Button title=\"Submit\" onPress={submitEmail} color={theme.tint} />\n          </>\n        ) : (\n          <>\n            {validKey ? (\n              <>\n                <TextInput\n                  placeholder=\"New Password\"\n                  style={styles.input}\n                  value={password}\n                  onChangeText={setPassword}\n                  autoCapitalize=\"none\"\n                  secureTextEntry={true}\n                  textContentType=\"password\"\n                  autoCompleteType=\"password\"\n                />\n                <View style={styles.actionButtons}>\n                  <Button\n                    title=\"Go Back\"\n                    onPress={() => setIsAwaitingKey(false)}\n                    color={theme.secondaryTint}\n                  />\n                  <Button\n                    title=\"Submit\"\n                    onPress={submitPassword}\n                    color={theme.tint}\n                  />\n                </View>\n              </>\n            ) : (\n              <TextInput\n                placeholder=\"Key\"\n                style={styles.input}\n                onChangeText={keyChange}\n                autoCapitalize=\"none\"\n              />\n            )}\n          </>\n        )}\n      </KeyboardAvoidingView>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 30,\n  },\n  input: {\n    width: \"100%\",\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    marginTop: 15,\n  },\n  actionButtons: {\n    display: \"flex\",\n    width: \"100%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n});\n","import React, { useContext, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport { TextInput } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport ActorDisplay from \"../components/ActorDisplay\";\n\nexport default function ReplyScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"EditCommunity\">) {\n  const community = route.params.community;\n  const [description, setDescription] = useState(community.description || \"\");\n  const theme = useTheme();\n  const { ctx } = useContext(LotideContext);\n\n  function submit() {\n    LotideService.editCommunity(ctx, community.id, description)\n      .then(() => LotideService.getCommunity(ctx, community.id))\n      .then(data =>\n        navigation.navigate(\"Community\", {\n          community: { ...data, description },\n        }),\n      )\n      .catch(e => Alert.alert(\"Failed to edit community\", e));\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n    >\n      <Pressable\n        style={styles.root}\n        onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n      >\n        <ActorDisplay\n          name={community.name}\n          host={community.host}\n          local={community.local}\n          showHost=\"always\"\n          newLine\n          style={styles.title}\n        />\n        <TextInput\n          style={styles.input}\n          multiline\n          placeholder=\"Add a description\"\n          value={description}\n          onChangeText={setDescription}\n        />\n        <Button title=\"Submit\" color={theme.tint} onPress={submit} />\n      </Pressable>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: { padding: 20, paddingBottom: 100 },\n  title: {\n    fontSize: 20,\n    marginVertical: 10,\n  },\n  input: {\n    marginVertical: 20,\n    minHeight: 100,\n  },\n});\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport React, { useState } from \"react\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport { ActionSheetIOS, ColorSchemeName, Pressable } from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport {\n  RootStackParamList,\n  RootTabParamList,\n  RootTabScreenProps,\n} from \"../types\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\n\nimport FeedScreen from \"../screens/FeedScreen\";\nimport SearchScreen from \"../screens/SearchScreen\";\nimport ProfileScreen from \"../screens/ProfileScreen\";\nimport NewPostScreen from \"../screens/NewPostScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport CommunityScreen from \"../screens/CommunityScreen\";\nimport ReplyScreen from \"../screens/ReplyScreen\";\nimport ModalScreen from \"../screens/ModalScreen\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport NotificationScreen from \"../screens/NotificationScreen\";\nimport NewCommunityScreen from \"../screens/NewCommunity\";\nimport ForgotPasswordScreen from \"../screens/ForgotPasswordScreen\";\nimport EditCommunityScreen from \"../screens/EditCommunityScreen\";\n\nexport default function Navigation({\n  colorScheme,\n}: {\n  colorScheme: ColorSchemeName;\n}) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n    >\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Root\"\n        component={BottomTabNavigator}\n        options={{ headerShown: false }}\n      />\n      <Stack.Screen name=\"Web\" component={ModalScreen} />\n      <Stack.Screen name=\"Post\" component={ModalScreen} />\n      <Stack.Screen name=\"Reply\" component={ReplyScreen} />\n      <Stack.Screen name=\"Community\" component={CommunityScreen} />\n      <Stack.Screen name=\"NewCommunity\" component={NewCommunityScreen} />\n      <Stack.Screen name=\"EditCommunity\" component={EditCommunityScreen} />\n      <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n      <Stack.Screen\n        name=\"ForgotPassword\"\n        component={ForgotPasswordScreen}\n        options={{ title: \"Forgot Password\" }}\n      />\n      <Stack.Screen\n        name=\"NotFound\"\n        component={NotFoundScreen}\n        options={{ title: \"Oops!\" }}\n      />\n      <Stack.Group screenOptions={{ presentation: \"modal\" }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createDrawerNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator({ navigation }: any) {\n  const [sort, setSort] = useState<SortOption>(\"hot\");\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"FeedScreen\"\n      screenOptions={{\n        drawerActiveTintColor: Colors[colorScheme].tint as unknown as string,\n        headerTintColor: Colors[colorScheme].text as unknown as string,\n        headerPressColor: Colors[colorScheme].text as unknown as string,\n        drawerType: \"permanent\",\n        drawerHideStatusBarOnOpen: true,\n      }}\n    >\n      <BottomTab.Screen\n        name=\"FeedScreen\"\n        component={FeedScreen}\n        initialParams={{ sort }}\n        options={({ navigation }: RootTabScreenProps<\"FeedScreen\">) => ({\n          title: \"Hoot\",\n          drawerIcon: ({ color }) => (\n            <TabBarIcon name=\"newspaper-outline\" color={color} />\n          ),\n          headerRight: () => (\n            <Pressable\n              onPress={() => {\n                ActionSheetIOS.showActionSheetWithOptions(\n                  {\n                    options: [\"Cancel\", \"Hot\", \"New\"],\n                    title: \"Sort by:\",\n                    cancelButtonIndex: 0,\n                  },\n                  buttonIndex => {\n                    const newSort = [sort, \"hot\", \"new\"][\n                      buttonIndex\n                    ] as SortOption;\n                    setSort(newSort);\n                    navigation.navigate(\"FeedScreen\", { sort: newSort });\n                  },\n                );\n              }}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}\n            >\n              <Icon\n                name={\n                  { hot: \"flame-outline\", new: \"time-outline\" }[sort] as any\n                }\n                size={25}\n                color={Colors[colorScheme].tint}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"SearchScreen\"\n        component={SearchScreen}\n        options={{\n          title: \"Communities\",\n          drawerIcon: ({ color }) => (\n            <TabBarIcon name=\"search-outline\" color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"NewPostScreen\"\n        component={NewPostScreen}\n        initialParams={{ community: undefined }}\n        options={{\n          title: \"New Post\",\n          drawerIcon: ({ color }) => (\n            <TabBarIcon name=\"add-outline\" color={color} size={40} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"NotificationScreen\"\n        component={NotificationScreen}\n        options={{\n          title: \"Notifications\",\n          drawerIcon: ({ color }) => (\n            <TabBarIcon name=\"notifications-outline\" color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{\n          title: \"Profile\",\n          drawerIcon: ({ color }) => (\n            <TabBarIcon name=\"person-circle-outline\" color={color} />\n          ),\n          headerRight: () => (\n            <Pressable\n              onPress={() => {\n                navigation.navigate(\"Settings\");\n              }}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}\n            >\n              <Icon\n                name=\"settings-outline\"\n                size={25}\n                color={Colors[colorScheme].secondaryText}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof Icon>[\"name\"];\n  color: string;\n  size?: number;\n}) {\n  return <Icon size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport voteReducer from \"../slices/voteSlice\";\n\nconst store = configureStore({\n  reducer: {\n    vote: voteReducer,\n  },\n});\n\nexport default store;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\nimport LotideContext, { defaultLotideContext } from \"./store/LotideContext\";\nimport * as StorageService from \"./services/StorageService\";\nimport * as LotideService from \"./services/LotideService\";\nimport { Provider } from \"react-redux\";\nimport reduxStore from \"./store/reduxStore\";\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n  const [ctx, setContext] = useState<LotideContext>(defaultLotideContext);\n\n  useEffect(() => {\n    StorageService.lotideContext.query().then(ctx => {\n      if (ctx !== undefined) {\n        setContext(ctx);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!ctx.apiUrl) return;\n    LotideService.getInstanceInfo(ctx)\n      .then(data => {\n        console.log(data);\n        if (!data.software.version.startsWith(\"0.9.\")) {\n          throw \"Bad version\";\n        }\n      })\n      .catch(() => {\n        StorageService.lotideContextKV\n          .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n          .then(() => applyNewContext({}));\n      });\n    if (!ctx.login) return;\n    LotideService.getUserData(ctx, ctx.login.user.id).catch(() => {\n      StorageService.lotideContextKV\n        .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n        .then(() => applyNewContext({}));\n    });\n  }, [ctx]);\n\n  function applyNewContext(ctx: LotideContext) {\n    StorageService.lotideContextKV\n      .store(ctx)\n      .then(() => AsyncStorage.setItem(\"@lotide_ctx\", JSON.stringify(ctx)))\n      .then(() => setContext(ctx));\n  }\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={reduxStore}>\n        <LotideContext.Provider\n          value={{\n            ctx,\n            setContext: (ctx: LotideContext) => applyNewContext(ctx),\n          }}\n        >\n          <SafeAreaProvider>\n            <Navigation colorScheme={colorScheme} />\n            <StatusBar />\n          </SafeAreaProvider>\n        </LotideContext.Provider>\n      </Provider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}
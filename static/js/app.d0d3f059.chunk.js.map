{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","navigation/LinkingConfiguration.ts","hooks/useTheme.ts","components/Themed.tsx","hooks/useElapsedTime.ts","components/ElapsedTime.tsx","services/HapticService.ts","store/LotideContext.ts","services/LotideService/util.ts","services/LotideService/Community.ts","services/LotideService/Instance.ts","services/LotideService/Post.ts","services/LotideService/Reply.ts","components/VoteCounter.tsx","components/ContentDisplay.tsx","components/ActorDisplay.tsx","components/PostDisplay.tsx","hooks/lotide.ts","hooks/useRefreshableData.ts","constants/KnownHosts.ts","services/StorageService.ts","components/HostList.tsx","components/Login.tsx","services/LotideService/User.ts","components/SuggestLogin.tsx","screens/FeedScreen.tsx","components/CommunityFinder.tsx","screens/SearchScreen.tsx","screens/ProfileScreen.tsx","screens/NewPostScreen.tsx","screens/SettingsScreen.tsx","screens/CommunityScreen.tsx","screens/ReplyScreen.tsx","store/SelectedReplyContext.ts","components/RepliesDisplay.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","transformers/NotificationTransformer.ts","screens/NotificationScreen.tsx","services/LotideService/Notification.ts","screens/NewCommunity.tsx","screens/ForgotPasswordScreen.tsx","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","PlatformColor","Platform","OS","require","light","buildIOS","tint","secondaryTint","text","secondaryText","placeholderText","background","secondaryBackground","tertiaryBackground","tabIconDefault","tabIconSelected","red","orange","yellow","green","teal","blue","indigo","purple","dark","linking","prefixes","Linking","config","screens","Root","TabOne","TabOneScreen","TabTwo","TabTwoScreen","Modal","NotFound","useTheme","colorScheme","Colors","Text","props","style","secondary","otherProps","theme","color","View","backgroundColor","TextInput","forwardRef","ref","placeholderTextColor","themeStyle","paddingHorizontal","paddingVertical","borderRadius","useElapsedTime","time","useMemo","seconds","Math","round","Date","now","parse","minutes","hours","days","weeks","calculateElapsedTime","ElapsedTime","elapsedTime","styles","root","name","size","StyleSheet","create","impactAsync","a","async","Haptics","defaultLotideContext","apiUrl","login","undefined","createContext","ctx","setContext","lotideRequest","method","path","body","noLogin","fetch","headers","buildHeaders","JSON","stringify","then","res","ok","catch","e","console","error","Authorization","token","getCommunities","onlyFollowing","page","data","json","getCommunity","communityId","getUserData","userId","followCommunity","try_wait_for_accept","editCommunity","id","description","getInstanceInfo","getPost","postId","getReply","replyId","getPostReplies","getReplyReplies","VoteCounter","useState","isUpvoted","setIsUpvoted","useContext","LotideContext","type","isUpvotedByAPI","post","your_vote","toggleVote","Light","LotideService","Alert","alert","useEffect","scoreColor","shouldAddOne","shouldSubtractOne","Pressable","onPress","hitSlop","hideCount","score","display","flexDirection","alignItems","fontSize","minWidth","ContentDisplay","html","contentHtml","markdown","contentMarkdown","replace","trim","contentText","RootComponent","value","renderNode","stylesheet","cite","fontStyle","del","textDecorationLine","textDecorationStyle","dfn","ins","samp","fontFamily","small","textComponentProps","onLinkLongPress","url","node","index","siblings","parent","defaultRenderer","includes","children","key","attribs","title","padding","borderLeftWidth","borderColor","paddingLeft","Details","width","alignSelf","borderBottomWidth","hairlineWidth","isOpen","setIsOpen","filter","x","toString","summary","realChildren","ActorDisplay","colorize","showHost","shouldDoIfLocal","when","local","shouldColorize","shouldShowHost","nameStyle","styleName","host","styleHost","newLine","fontWeight","PostDisplay","imgAspect","setImgAspect","isImage","href","some","ext","endsWith","sticky","Image","image","aspectRatio","source","uri","onLoad","event","max","nativeEvent","height","link","Medium","openURL","showHtmlContent","content_html","content_text","foot","navigation","navigate","community","by","author","username","showCommunityHost","created","footText","replies_count_total","item","marginVertical","marginHorizontal","resizeMode","justifyContent","actions","usePosts","sort","inYourFollows","posts","setPosts","setPage","nextPage","setNextPage","loadingPage","setLoadingPage","reloadId","setReloadId","effect","deps","refreshCount","setRefreshCount","isLoading","setIsLoading","c","useRefreshableData","stopLoading","join","p","items","next_page","refresh","KnownHosts","domain","lotideContext","AsyncStorage","getItem","ctxStr","lotideContextKV","user","serviceKV","store","k","query","listKeys","remove","storeStr","v","setItem","Object","keys","HostList","hostText","setHostText","knownHosts","setKnowHosts","existingProfiles","setExistingProfiles","map","h","i","d","hosts","h2","j","instanceInfo","object","entries","ScrollView","contentContainerStyle","length","subtitle","split","isUnlocked","onSelect","toLowerCase","marginRight","paddingBottom","placeholder","onChangeText","onSubmitEditing","keyboardType","returnKeyType","enabled","software","version","startsWith","renderItem","marginBottom","textAlign","marginTop","Login","isRegistering","setIsRegistering","setUsername","password","setPassword","email","setEmail","usernameRef","useRef","passwordRef","useNavigation","fail","message","register","email_address","submit","flex","Keyboard","dismiss","KeyboardAvoidingView","behavior","hostName","loginRegister","input","textContentType","autoCompleteType","current","focus","secureTextEntry","actionButtons","Button","onGoBack","SuggestLogin","setHostName","setDomain","container","FeedScreen","route","params","isLoadingPosts","refreshPosts","loadNextPage","hasLogin","FlatList","keyExtractor","refreshing","onRefresh","onEndReachedThreshold","onEndReached","Item","onLongPress","Heavy","log","borderBottomColor","CommunityFinder","communities","setCommunities","filterText","setFilterText","communitiesToDisplay","onlyWhenTyping","you_are_moderator","your_follow","accepted","marginLeft","list","SearchScreen","ProfileScreen","profile","setProfile","profileList","setProfileList","isEditing","setIsEditing","StorageService","header","avatar","cancelable","accessibilityLabel","editView","editViewText","multiline","editViewActionButtons","altProfileButton","paddingTop","followingTitle","margin","separator","inputContainer","borderWidth","NewPostScreen","setCommunity","setTitle","setLink","content","setContent","addListener","TouchableWithoutFeedback","content_markdown","SettingsScreen","CommunityScreen","isFollowing","ReplyScreen","setText","scrollRef","onFocus","scrollToEnd","animated","pop","minHeight","defaultSelectedReplyContext","SelectedReplyContext","React","RepliesDisplay","replies","layer","highlightedReplies","nextPageData","setNextPageData","layerColors","reply","ReplyDisplay","showChildren","setShowChildren","selectedReply","setSelectedReply","borderTopWidth","borderTopColor","buttons","button","s","ModalScreen","setHighlightedReplies","focusId","setFocusId","setReplies","useReplies","Share","share","Provider","StatusBar","currentHeight","NotFoundScreen","TouchableOpacity","linkText","originFromComment","commentId","comment","originFromPost","NotificationScreen","notifications","setNotifications","isRefreshing","setIsRefreshing","promises","n","notification","origin","unseen","transformToFullNotification","Promise","all","level1","level2","thin","NewCommunityScreen","setName","setDescription","ForgotPasswordScreen","isAwaitingKey","setIsAwaitingKey","validKey","setValidKey","autoCapitalize","newPassword","new_password","popToTop","Navigation","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","component","BottomTabNavigator","options","headerShown","Group","screenOptions","presentation","BottomTab","createBottomTabNavigator","setSort","initialRouteName","tabBarActiveTintColor","tabBarShowLabel","initialParams","tabBarIcon","TabBarIcon","headerRight","ActionSheetIOS","showActionSheetWithOptions","cancelButtonIndex","buttonIndex","newSort","opacity","pressed","hot","new","headerLeft","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","FontAwesome","font","warn","useCachedResources","applyNewContext","module","exports"],"mappings":"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","file":"static/js/app.d0d3f059.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import { ColorValue, Platform } from \"react-native\";\nconst PlatformColor =\n  Platform.OS === \"web\" ? () => {} : require(\"react-native\").PlatformColor;\n\nexport interface ColorsObject {\n  tint: ColorValue;\n  secondaryTint: ColorValue;\n  text: ColorValue;\n  secondaryText: ColorValue;\n  placeholderText: ColorValue;\n  background: ColorValue;\n  secondaryBackground: ColorValue;\n  tertiaryBackground: ColorValue;\n  tabIconDefault: ColorValue;\n  tabIconSelected: ColorValue;\n\n  red: ColorValue;\n  orange: ColorValue;\n  yellow: ColorValue;\n  green: ColorValue;\n  teal: ColorValue;\n  blue: ColorValue;\n  indigo: ColorValue;\n  purple: ColorValue;\n}\n\nexport default {\n  light: Platform.OS === \"ios\" ? buildIOS() : buildAltLight(),\n  dark: Platform.OS === \"ios\" ? buildIOS() : buildAltDark(),\n};\n\nfunction buildIOS(): ColorsObject {\n  return {\n    tint: PlatformColor(\"systemOrange\"),\n    secondaryTint: PlatformColor(\"systemPurple\"),\n    text: PlatformColor(\"label\"),\n    secondaryText: PlatformColor(\"secondaryLabel\"),\n    placeholderText: PlatformColor(\"placeholderText\"),\n    background: PlatformColor(\"systemBackground\"),\n    secondaryBackground: PlatformColor(\"secondarySystemBackground\"),\n    tertiaryBackground: PlatformColor(\"tertiarySystemBackground\"),\n    tabIconDefault: PlatformColor(\"secondaryLabel\"),\n    tabIconSelected: PlatformColor(\"systemOrange\"),\n\n    red: PlatformColor(\"systemRed\"),\n    orange: PlatformColor(\"systemOrange\"),\n    yellow: PlatformColor(\"systemYellow\"),\n    green: PlatformColor(\"systemGreen\"),\n    teal: PlatformColor(\"systemTeal\"),\n    blue: PlatformColor(\"systemBlue\"),\n    indigo: PlatformColor(\"systemIndigo\"),\n    purple: PlatformColor(\"systemPurple\"),\n  };\n}\n\nfunction buildAltLight(): ColorsObject {\n  return {\n    tint: \"orange\",\n    secondaryTint: \"purple\",\n    text: \"#111\",\n    secondaryText: \"#333\",\n    placeholderText: \"#444\",\n    background: \"#fff\",\n    secondaryBackground: \"#eee\",\n    tertiaryBackground: \"#ccc\",\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: \"orange\",\n\n    red: \"red\",\n    orange: \"orange\",\n    yellow: \"yellow\",\n    green: \"green\",\n    teal: \"eeal\",\n    blue: \"blue\",\n    indigo: \"indigo\",\n    purple: \"purple\",\n  };\n}\n\nfunction buildAltDark(): ColorsObject {\n  return {\n    tint: \"orange\",\n    secondaryTint: \"purple\",\n    text: \"#fff\",\n    secondaryText: \"#666\",\n    placeholderText: \"#aaa\",\n    background: \"#111\",\n    secondaryBackground: \"#222\",\n    tertiaryBackground: \"#222\",\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: \"orange\",\n\n    red: \"red\",\n    orange: \"orange\",\n    yellow: \"yellow\",\n    green: \"green\",\n    teal: \"eeal\",\n    blue: \"#68f\",\n    indigo: \"indigo\",\n    purple: \"purple\",\n  };\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","import Colors from \"../constants/Colors\";\nimport useColorScheme from \"./useColorScheme\";\n\nexport default function useTheme() {\n  const colorScheme = useColorScheme();\n  return Colors[colorScheme];\n}\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport React, { forwardRef } from \"react\";\nimport {\n  ColorValue,\n  Text as DefaultText,\n  View as DefaultView,\n  TextInput as DefaultTextInput,\n} from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport function useThemeColor(\n  props: { light?: ColorValue; dark?: ColorValue },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark,\n): ColorValue {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  secondary?: boolean;\n  tint?: boolean;\n};\n\nexport type TextProps = ThemeProps & DefaultText[\"props\"];\nexport type ViewProps = ThemeProps & DefaultView[\"props\"];\n\nexport function Text(props: TextProps) {\n  const { style, secondary, tint, ...otherProps } = props;\n  const theme = useTheme();\n  const color =\n    !secondary && !tint\n      ? theme.text\n      : secondary && !tint\n      ? theme.secondaryText\n      : tint && !secondary\n      ? theme.tint\n      : theme.secondaryTint;\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, ...otherProps } = props;\n  const backgroundColor = useTheme().background;\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n\nexport const TextInput = forwardRef<\n  DefaultTextInput,\n  DefaultTextInput[\"props\"]\n>((props: DefaultTextInput[\"props\"], ref) => {\n  const { style, placeholderTextColor, ...otherProps } = props;\n  const theme = useTheme();\n\n  const themeStyle = {\n    backgroundColor: theme.secondaryBackground,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 8,\n    color: theme.text,\n  };\n  return (\n    <DefaultTextInput\n      ref={ref}\n      style={[themeStyle, style]}\n      placeholderTextColor={placeholderTextColor || theme.placeholderText}\n      {...otherProps}\n    />\n  );\n});\n","import { useMemo } from \"react\";\n\nexport default function useElapsedTime(time: string): string {\n  return useMemo(() => calculateElapsedTime(time), [time]);\n}\n\nexport function calculateElapsedTime(time: string): string {\n  const seconds = Math.round((Date.now() - Date.parse(time)) / 1000);\n  const minutes = Math.round(seconds / 60);\n  const hours = Math.round(minutes / 60);\n  const days = Math.round(hours / 24);\n  const weeks = Math.round(days / 7);\n  const displayTime =\n    (minutes < 60 && `${minutes}m`) ||\n    (hours < 24 && `${hours}h`) ||\n    (days < 7 && `${days}d`) ||\n    `${weeks}w`;\n  return displayTime;\n}\n","import { Ionicons as Icon } from \"@expo/vector-icons\";\nimport React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Text } from \"./Themed\";\nimport useElapsedTime from \"../hooks/useElapsedTime\";\n\nexport interface ElapsedTimeProps {\n  time: string;\n}\n\nexport default function ElapsedTime(props: ElapsedTimeProps) {\n  const elapsedTime = useElapsedTime(props.time);\n  return (\n    <Text style={styles.root}>\n      <Icon name=\"time-outline\" size={14} /> {elapsedTime}\n    </Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {},\n});\n","import { Platform } from \"react-native\";\nimport * as Haptics from \"expo-haptics\";\n\nexport { ImpactFeedbackStyle } from \"expo-haptics\";\n\nexport async function impactAsync(style: Haptics.ImpactFeedbackStyle) {\n  if (Platform.OS === \"web\") return;\n  await Haptics.impactAsync(style);\n}\n","import { createContext } from \"react\";\n\nexport const defaultLotideContext: LotideContext = {\n  apiUrl: \"https://hoot.goldandblack.xyz/api/unstable\",\n  login: undefined,\n};\n\nexport default createContext({\n  ctx: defaultLotideContext,\n  setContext: (ctx: LotideContext) => {},\n});\n","export type RequestMethod = \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n\nexport function hasLogin(ctx: LotideContext): boolean {\n  return !!ctx.apiUrl && !!ctx.login;\n}\n\nexport async function lotideRequest(\n  ctx: LotideContext,\n  method: RequestMethod,\n  path: string,\n  body?: any,\n  noLogin: boolean = false,\n): Promise<any | undefined> {\n  if (!ctx.apiUrl) throw \"No API url\";\n  if (!noLogin && ctx.login == undefined) throw \"Not logged in\";\n  return fetch(`${ctx.apiUrl}/${path}`, {\n    method,\n    headers: buildHeaders(ctx),\n    body: body !== undefined ? JSON.stringify(body) : undefined,\n  })\n    .then(async res => {\n      if (res.ok) {\n        return res;\n      } else {\n        throw await res.text();\n      }\n    })\n    .catch(e => {\n      console.error(\n        `Lotide Service Error: ${method} ${ctx.apiUrl}/${path}\\n${e}`,\n        ctx,\n      );\n      throw e;\n    });\n}\n\nexport function buildHeaders(ctx: LotideContext): HeadersInit | undefined {\n  return ctx.login !== undefined\n    ? {\n        Authorization: `Bearer ${ctx.login.token}`,\n        \"Content-Type\": \"application/json\",\n      }\n    : undefined;\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getCommunities(\n  ctx: LotideContext,\n  onlyFollowing: boolean = false,\n  page?: string,\n): Promise<Paged<Community>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `communities?include_your=true&limit=100${\n      onlyFollowing ? \"&your_follow.accepted=true\" : \"\"\n    }${page ? `&page=${page}` : \"\"}`,\n  )\n    .then(data => data.json())\n    .then(data => {\n      return data;\n    });\n}\n\nexport async function getCommunity(\n  ctx: LotideContext,\n  communityId: CommunityId,\n): Promise<Community> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `communities/${communityId}?include_your=true`,\n  ).then(data => data.json());\n}\n\nexport async function getUserData(ctx: LotideContext, userId: number) {\n  return lotideRequest(ctx, \"GET\", `users/${userId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function followCommunity(\n  ctx: LotideContext,\n  communityId: number,\n): Promise<{ accepted: boolean }> {\n  return lotideRequest(ctx, \"POST\", `communities/${communityId}/follow`, {\n    try_wait_for_accept: true,\n  }).then(data => data.json());\n}\n\nexport async function unfollowCommunity(\n  ctx: LotideContext,\n  communityId: number,\n) {\n  return lotideRequest(ctx, \"POST\", `communities/${communityId}/unfollow`);\n}\n\nexport async function newCommunity(\n  ctx: LotideContext,\n  name: string,\n): Promise<{ community: { id: CommunityId } }> {\n  return lotideRequest(ctx, \"POST\", \"communities\", { name }).then(data =>\n    data.json(),\n  );\n}\n\nexport async function editCommunity(\n  ctx: LotideContext,\n  id: CommunityId,\n  description: string,\n) {\n  return lotideRequest(ctx, \"PATCH\", `communities/${id}`, { description });\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getInstanceInfo(\n  ctx: LotideContext,\n): Promise<InstanceInfo> {\n  return lotideRequest(ctx, \"GET\", \"instance\", undefined, true).then(data =>\n    data.json(),\n  );\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getPost(\n  ctx: LotideContext,\n  postId: PostId,\n): Promise<Post> {\n  return lotideRequest(ctx, \"GET\", `posts/${postId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function getPosts(\n  ctx: LotideContext,\n  page: string | null,\n  sort: SortOption = \"hot\",\n  inYourFollows?: boolean,\n  communityId?: CommunityId,\n): Promise<Paged<Post>> {\n  const url = [\n    page === null ? `posts?sort=${sort}` : `posts?page=${page}&sort=${sort}`,\n    `include_your=true`,\n    inYourFollows !== undefined && `in_your_follows=${inYourFollows}`,\n    communityId && `community=${communityId}`,\n  ]\n    .filter(x => x)\n    .join(\"&\");\n  return lotideRequest(ctx, \"GET\", url).then(data => data.json());\n}\n\nexport async function submitPost(\n  ctx: LotideContext,\n  post: NewPost,\n): Promise<{ id: PostId }> {\n  return lotideRequest(ctx, \"POST\", \"posts\", post).then(data => data.json());\n}\n\nexport async function applyVote(ctx: LotideContext, postId: PostId) {\n  return lotideRequest(ctx, \"PUT\", `posts/${postId}/your_vote`);\n}\n\nexport async function removeVote(ctx: LotideContext, postId: PostId) {\n  return lotideRequest(ctx, \"DELETE\", `posts/${postId}/your_vote`);\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getReply(\n  ctx: LotideContext,\n  replyId: ReplyId,\n): Promise<Reply> {\n  return lotideRequest(ctx, \"GET\", `comments/${replyId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function getPostReplies(\n  ctx: LotideContext,\n  postId: PostId,\n  page?: string,\n): Promise<Paged<Reply>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `posts/${postId}/replies?limit=10&include_your=true` +\n      (page ? `&page=${page}` : \"\"),\n  ).then(data => data.json());\n}\n\nexport async function getReplyReplies(\n  ctx: LotideContext,\n  replyId: ReplyId,\n  page?: string,\n): Promise<Paged<Reply>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `comments/${replyId}/replies?limit=10&include_your=true` +\n      (page ? `&page=${page}` : \"\"),\n  ).then(data => data.json());\n}\n\nexport async function replyToPost(\n  ctx: LotideContext,\n  postId: PostId,\n  content: string,\n): Promise<{ id: number }> {\n  return lotideRequest(ctx, \"POST\", `posts/${postId}/replies`, {\n    content_markdown: content,\n  }).then(data => data.json());\n}\n\nexport async function replyToReply(\n  ctx: LotideContext,\n  replyId: ReplyId,\n  content: string,\n): Promise<{ id: ReplyId }> {\n  return lotideRequest(ctx, \"POST\", `comments/${replyId}/replies`, {\n    content_markdown: content,\n  }).then(data => data.json());\n}\n\nexport async function applyReplyVote(ctx: LotideContext, replyId: ReplyId) {\n  return lotideRequest(ctx, \"PUT\", `comments/${replyId}/your_vote`);\n}\n\nexport async function removeReplyVote(ctx: LotideContext, replyId: ReplyId) {\n  return lotideRequest(ctx, \"DELETE\", `comments/${replyId}/your_vote`);\n}\n","import { Ionicons as Icon } from \"@expo/vector-icons\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Alert, Pressable, StyleSheet, ViewStyle } from \"react-native\";\nimport { View, Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport LotideContext from \"../store/LotideContext\";\nimport * as LotideService from \"../services/LotideService\";\n\nexport interface VoteCounterProps {\n  post: Post | Reply;\n  isUpvoted: boolean;\n  type?: \"post\" | \"reply\";\n  hideCount?: boolean;\n  style?: ViewStyle;\n  onVote?: (isUpvote: boolean) => void;\n}\n\nexport default function VoteCounter(props: VoteCounterProps) {\n  const [isUpvoted, setIsUpvoted] = useState(false);\n  const theme = useTheme();\n  const { ctx } = useContext(LotideContext);\n  const type = props.type || \"post\";\n\n  const isUpvotedByAPI =\n    props.post.your_vote !== null && props.post.your_vote !== undefined;\n\n  useEffect(() => setIsUpvoted(isUpvotedByAPI), [props.post.your_vote]);\n\n  function toggleVote() {\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n\n    if (ctx.login === undefined) {\n      Alert.alert(\n        \"Login to like\",\n        \"Leave a like when you login to a community\",\n      );\n      return;\n    }\n\n    if (isUpvoted) {\n      if (type == \"post\") {\n        LotideService.removeVote(ctx, props.post.id).then(() =>\n          setIsUpvoted(false),\n        );\n      } else {\n        LotideService.removeReplyVote(ctx, props.post.id).then(() =>\n          setIsUpvoted(false),\n        );\n      }\n    } else {\n      if (type == \"post\") {\n        LotideService.applyVote(ctx, props.post.id).then(() =>\n          setIsUpvoted(true),\n        );\n      } else {\n        LotideService.applyReplyVote(ctx, props.post.id).then(() =>\n          setIsUpvoted(true),\n        );\n      }\n    }\n  }\n\n  let scoreColor = theme.text;\n\n  if (isUpvoted) {\n    scoreColor = theme.red;\n  }\n\n  const shouldAddOne = isUpvoted && !isUpvotedByAPI;\n  const shouldSubtractOne = !isUpvoted && isUpvotedByAPI;\n\n  return (\n    <Pressable onPress={() => toggleVote()} hitSlop={7} style={props.style}>\n      <View style={styles.root}>\n        <Icon\n          name={isUpvoted ? \"heart\" : \"heart-outline\"}\n          color={scoreColor}\n          size={25}\n        />\n        {!props.hideCount && (\n          <Text style={{ ...styles.score, color: scoreColor }}>{`  ${\n            props.post.score + +shouldAddOne - +shouldSubtractOne\n          }  `}</Text>\n        )}\n      </View>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  score: {\n    fontSize: 18,\n    minWidth: 28,\n  },\n});\n","import React, { ReactNode, useMemo, useState } from \"react\";\nimport { Text, View } from \"react-native\";\nimport { Platform, Pressable, StyleSheet } from \"react-native\";\nimport HTMLView, { HTMLViewNode } from \"react-native-htmlview\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport useTheme from \"../hooks/useTheme\";\nimport { Alert } from \"react-native\";\nimport { ColorsObject } from \"../constants/Colors\";\n\nexport interface ContentDisplayProps {\n  contentHtml?: string;\n  contentText?: string;\n  contentMarkdown?: string;\n}\n\nexport default function ContentDisplay(props: ContentDisplayProps) {\n  const theme = useTheme();\n  const html = useMemo(\n    () =>\n      props.contentHtml ||\n      parseMarkdown(props.contentMarkdown) ||\n      `<p>${props.contentText}</p>`,\n    [props.contentHtml, props.contentMarkdown, props.contentText],\n  );\n  return (\n    <HTMLView\n      RootComponent={Text}\n      value={html.replace(/\\n/g, \"\")}\n      renderNode={renderNode(theme)}\n      stylesheet={{\n        a: { color: theme.secondaryTint },\n        cite: { fontStyle: \"italic\" },\n        del: {\n          textDecorationLine: \"line-through\",\n          textDecorationStyle: \"solid\",\n        },\n        dfn: { fontStyle: \"italic\" },\n        ins: { textDecorationLine: \"underline\" },\n        samp: { fontFamily: Platform.OS === \"ios\" ? \"Menlo\" : \"monospace\" },\n        small: { fontSize: 10 },\n      }}\n      textComponentProps={{ style: { color: theme.text } }}\n      onLinkLongPress={url => Alert.alert(\"Link\", url)}\n    />\n  );\n}\n\nconst renderNode =\n  (theme: ColorsObject) =>\n  (\n    node: HTMLViewNode,\n    index: number,\n    siblings: HTMLViewNode,\n    parent: HTMLViewNode,\n    defaultRenderer: (node: HTMLViewNode, parent: HTMLViewNode) => ReactNode,\n  ) => {\n    if ([\"iframe\", \"script\"].includes(node.name || \"\")) {\n      return null;\n    }\n\n    function children() {\n      return defaultRenderer((node as any).children, parent);\n    }\n\n    switch (node.name) {\n      case \"abbr\":\n        return (\n          <Pressable\n            key={index}\n            onPress={() => Alert.alert(\"Abbr.\", node.attribs.title)}\n          >\n            <Text\n              style={{\n                textDecorationLine: \"underline\",\n                textDecorationStyle: \"dotted\",\n              }}\n            >\n              {children()}\n            </Text>\n          </Pressable>\n        );\n      case \"blockquote\":\n        return (\n          <Text key={index}>\n            <View style={{ padding: 10 }}>\n              <View\n                style={{\n                  borderLeftWidth: 2,\n                  borderColor: theme.secondaryText,\n                  paddingLeft: 10,\n                  paddingVertical: 5,\n                }}\n              >\n                {children()}\n              </View>\n            </View>\n            {\"\\n\"}\n          </Text>\n        );\n      case \"details\":\n        return (\n          <Details key={index}>{children() as React.ReactChild[]}</Details>\n        );\n      case \"dl\":\n      case \"dt\":\n      case \"dd\":\n        return (\n          <Text key={index}>\n            {children()}\n            {\"\\n\"}\n          </Text>\n        );\n      case \"figure\":\n        return <View key={index}>{children()}</View>;\n      case \"hr\":\n        return (\n          <View\n            key={index}\n            style={{\n              width: 200,\n              alignSelf: \"stretch\",\n              borderBottomWidth: StyleSheet.hairlineWidth || 1,\n              borderColor: theme.secondaryText,\n            }}\n          />\n        );\n      case \"kbd\":\n        return (\n          <Text\n            key={index}\n            style={{ backgroundColor: theme.tertiaryBackground }}\n          >\n            {\" \"}\n            {children()}{\" \"}\n          </Text>\n        );\n      case \"img\":\n        return <Text key={index}>[Image not displayed]</Text>;\n      case \"li\":\n        return (\n          <Text key={index}>\n            {\"\\u2022 \"}\n            {children()}\n            {\"\\n\"}\n          </Text>\n        );\n      case \"sub\":\n        return (\n          <Text key={index} style={{ fontSize: 10 }}>\n            {children()}\n          </Text>\n        );\n      case \"summary\":\n        return <Text key={index}>{children()}</Text>;\n      case \"sup\":\n        return (\n          <View key={index}>\n            <Text style={{ fontSize: 10 }}>{children()}</Text>\n          </View>\n        );\n      default:\n        return undefined;\n    }\n  };\n\nfunction parseMarkdown(markdown?: string): string | undefined {\n  if (markdown === \"\" || markdown === undefined) return undefined;\n  return markdown\n    .replace(/^### (.*$)/gim, \"<h3>$1</h3>\")\n    .replace(/^## (.*$)/gim, \"<h2>$1</h2>\")\n    .replace(/^# (.*$)/gim, \"<h1>$1</h1>\")\n    .replace(/^\\> (.*$)/gim, \"<blockquote>$1</blockquote>\")\n    .replace(/\\*\\*(.*)\\*\\*/gim, \"<b>$1</b>\")\n    .replace(/\\*(.*)\\*/gim, \"<i>$1</i>\")\n    .replace(/!\\[(.*?)\\]\\((.*?)\\)/gim, \"<img alt='$1' src='$2' />\")\n    .replace(/\\[(.*?)\\]\\((.*?)\\)/gim, \"<a href='$2'>$1</a>\")\n    .replace(/\\n$/gim, \"<br />\")\n    .trim();\n}\n\nfunction Details({ children }: { children: React.ReactChild[] }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const theme = useTheme();\n\n  const [summary, ...realChildren] = children.filter(\n    (x: any) => x.props.children.toString().trim() !== \"\",\n  );\n\n  return (\n    <View>\n      <Pressable hitSlop={5} onPress={() => setIsOpen(x => !x)}>\n        <Text style={{ color: theme.secondaryTint }}>\n          {isOpen ? (\n            <Icon name=\"chevron-down-outline\" />\n          ) : (\n            <Icon name=\"chevron-forward-outline\" />\n          )}\n          {summary}\n        </Text>\n      </Pressable>\n      {isOpen && realChildren}\n    </View>\n  );\n}\n","import React from \"react\";\nimport { StyleSheet, TextStyle } from \"react-native\";\nimport { Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport interface ActorDisplayProps {\n  name: string;\n  host: string;\n  local: boolean;\n  colorize?: \"always\" | \"never\" | \"only_foreign\";\n  showHost?: \"always\" | \"never\" | \"only_foreign\";\n  newLine?: boolean;\n  style?: TextStyle;\n  styleName?: TextStyle;\n  styleHost?: TextStyle;\n}\n\nexport default function ActorDisplay(props: ActorDisplayProps) {\n  const theme = useTheme();\n  const colorize = props.colorize || \"never\";\n  const showHost = props.showHost || \"only_foreign\";\n\n  const shouldDoIfLocal = (\n    when: \"always\" | \"never\" | \"only_foreign\",\n    local: boolean,\n  ) => {\n    if (when === \"always\") return true;\n    if (when === \"never\") return false;\n    return !local;\n  };\n\n  const shouldColorize = shouldDoIfLocal(colorize, props.local);\n  const shouldShowHost = shouldDoIfLocal(showHost, props.local);\n\n  const nameStyle = shouldColorize\n    ? { color: props.local ? theme.blue : theme.green }\n    : {};\n\n  return (\n    <Text style={[styles.root, props.style]}>\n      <Text style={[styles.name, nameStyle, props.styleName]}>\n        {props.name}\n      </Text>\n      {shouldShowHost && (\n        <Text\n          style={[styles.host, { color: theme.secondaryText }, props.styleHost]}\n        >\n          {props.newLine && \"\\n\"}\n          {!props.newLine && \"@\"}\n          {props.host}\n        </Text>\n      )}\n    </Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {},\n  name: {\n    fontWeight: \"500\",\n  },\n  host: {\n    fontWeight: \"200\",\n  },\n});\n","import Icon from \"@expo/vector-icons/Ionicons\";\nimport { openURL } from \"expo-linking\";\nimport React, { useMemo, useState } from \"react\";\nimport { StyleSheet, Image, Pressable } from \"react-native\";\nimport ElapsedTime from \"./ElapsedTime\";\nimport VoteCounter from \"./VoteCounter\";\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport ContentDisplay from \"./ContentDisplay\";\nimport ActorDisplay from \"./ActorDisplay\";\n\nexport interface PostDisplayProps {\n  post: Post;\n  navigation: any;\n  showHtmlContent?: boolean;\n  showCommunityHost?: boolean;\n}\n\nexport default function PostDisplay(props: PostDisplayProps) {\n  const [imgAspect, setImgAspect] = useState(1);\n  const isImage = useMemo(() => isImageUrl(props.post.href), [props.post.href]);\n  const theme = useTheme();\n\n  const post = props.post;\n\n  return (\n    <View>\n      <Text style={styles.title}>\n        {props.post.sticky && (\n          <>\n            <Icon name=\"pin\" size={25} color={theme.secondaryTint} />{\" \"}\n          </>\n        )}\n        {props.post.title}\n      </Text>\n      {props.post.href &&\n        (isImage ? (\n          <Image\n            style={{\n              ...styles.image,\n              aspectRatio: imgAspect,\n              backgroundColor: theme.secondaryBackground,\n            }}\n            source={{\n              uri: props.post.href,\n            }}\n            onLoad={event =>\n              setImgAspect(\n                Math.max(\n                  event.nativeEvent.source.width /\n                    event.nativeEvent.source.height,\n                  0.5,\n                ),\n              )\n            }\n          />\n        ) : (\n          <Pressable\n            style={[\n              styles.link,\n              { backgroundColor: theme.secondaryBackground },\n            ]}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              if (props.post.href) {\n                openURL(props.post.href);\n              }\n            }}\n          >\n            <Text>{props.post.href}</Text>\n          </Pressable>\n        ))}\n      {props.showHtmlContent && !!props.post.content_html && (\n        <View style={{ paddingHorizontal: 15 }}>\n          <ContentDisplay\n            contentHtml={props.post.content_html}\n            contentText={props.post.content_text}\n          />\n        </View>\n      )}\n      <View style={styles.foot}>\n        <View>\n          <Pressable\n            hitSlop={8}\n            onPress={() =>\n              props.navigation.navigate(\"Community\", {\n                community: props.post.community,\n              })\n            }\n          >\n            <ActorDisplay\n              name={post.community.name}\n              host={post.community.host}\n              local={post.community.local}\n              showHost={\"only_foreign\"}\n              colorize={\"never\"}\n              newLine={true}\n            />\n          </Pressable>\n          <Text style={styles.by}>by {props.post.author.username}</Text>\n          {props.showCommunityHost && (\n            <Text style={styles.by}>on {props.post.community.host}</Text>\n          )}\n        </View>\n        <View>\n          <ElapsedTime time={props.post.created} />\n        </View>\n        <View>\n          <Text style={styles.footText}>\n            <Icon name=\"chatbubble-outline\" size={12} />{\" \"}\n            {props.post.replies_count_total}\n          </Text>\n        </View>\n        <View>\n          <VoteCounter post={props.post} isUpvoted={false} />\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n  },\n  footText: {},\n  by: {\n    fontSize: 11,\n  },\n  score: {\n    fontSize: 18,\n  },\n  actions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    padding: 10,\n  },\n});\n\nfunction isImageUrl(url?: string): boolean {\n  if (!url) return false;\n  return [\".png\", \".jpg\", \".jpeg\", \".bmp\", \".gif\", \".webp\"].some(ext =>\n    url.endsWith(ext),\n  );\n}\n","import { useState, useEffect, useContext } from \"react\";\nimport LotideContext from \"../store/LotideContext\";\nimport * as LotideService from \"../services/LotideService\";\nimport { useRefreshableData } from \"./useRefreshableData\";\n\nexport function usePosts(\n  sort?: SortOption,\n  inYourFollows?: boolean,\n  community?: CommunityId,\n): [Post[], boolean, () => void, () => void] {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [page, setPage] = useState<string | null>(null);\n  const [nextPage, setNextPage] = useState<string | null>(null);\n  const [loadingPage, setLoadingPage] =\n    useState<string | null | undefined>(undefined);\n  const [reloadId, setReloadId] = useState(0);\n  const ctx = useContext(LotideContext).ctx;\n\n  const [isLoading, refresh] = useRefreshableData(\n    stopLoading => {\n      if (!ctx.login) return;\n      if (loadingPage !== undefined) return;\n      setLoadingPage(page);\n      LotideService.getPosts(ctx, page, sort, inYourFollows, community)\n        .then(data => {\n          setPosts(p => [...p, ...data.items]);\n          setNextPage(data.next_page);\n          setLoadingPage(undefined);\n        })\n        .then(() => stopLoading())\n        .catch(e => {\n          stopLoading();\n          setPosts(p => [\n            ...p,\n            {\n              id: -1,\n              title: \"Lotide error\",\n              content_html: `<p>Error: ${e}</p>`,\n              created: \"\",\n              replies_count_total: 0,\n              score: 0,\n              sticky: true,\n              author: {\n                id: -1,\n                username: \"Failure\",\n                local: false,\n                host: \"hoot-mobile\",\n              },\n              community: {\n                id: -1,\n                name: \"something-went-wrong\",\n                local: false,\n                host: \"hoot-mobile\",\n              },\n            },\n          ]);\n        });\n    },\n    [reloadId, page],\n  );\n\n  useEffect(() => {\n    setPosts([]);\n    setPage(null);\n    setNextPage(null);\n    refresh();\n  }, [ctx, sort]);\n\n  function loadNextPage() {\n    if (nextPage !== null) {\n      setPage(nextPage);\n    }\n  }\n\n  function refreshData() {\n    setPosts([]);\n    setPage(null);\n    setNextPage(null);\n    setReloadId(id => id + 1);\n    refresh();\n  }\n\n  return [posts, isLoading, refreshData, loadNextPage];\n}\n\nexport function useReplies(\n  ctx: LotideContext,\n  postId: PostId,\n  deps: any[],\n  replyId?: ReplyId,\n): Paged<Reply> {\n  const [replies, setReplies] = useState({\n    items: [] as Reply[],\n  } as Paged<Reply>);\n  useEffect(() => {\n    if (replyId) {\n      LotideService.getReply(ctx, replyId).then(async reply => {\n        reply.replies = await LotideService.getReplyReplies(ctx, reply.id);\n        setReplies({ items: [reply], next_page: null });\n      });\n    } else {\n      LotideService.getPostReplies(ctx, postId).then(data => {\n        setReplies(data);\n      });\n    }\n  }, deps);\n  return replies;\n}\n","import { useState, useEffect } from \"react\";\n\nexport function useRefreshableData<T>(\n  effect: (stopLoading: () => void) => void | (() => void | undefined),\n  deps: any[],\n): [boolean, () => void] {\n  const [refreshCount, setRefreshCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    effect(() => setIsLoading(false));\n  }, [refreshCount, ...deps]);\n\n  function refresh() {\n    setRefreshCount(c => c + 1);\n    setIsLoading(true);\n  }\n\n  return [isLoading, refresh];\n}\n","export interface KnownHost {\n  name: string;\n  domain: string;\n}\n\nexport const KnownHosts: KnownHost[] = [\n  {\n    name: \"Gold&Black\",\n    domain: \"hoot.goldandblack.xyz\",\n  },\n  {\n    name: \"Narwhal.City\",\n    domain: \"narwhal.city\",\n  },\n  {\n    name: \"Tide C\",\n    domain: \"c.tide.tk\",\n  },\n  {\n    name: \"Exopla\",\n    domain: \"lotide.exopla.net.eu.org\",\n  },\n  {\n    name: \"Narwhal.City (Dev)\",\n    domain: \"dev.narwhal.city\",\n  },\n  {\n    name: \"Tide B\",\n    domain: \"b.tide.tk\",\n  },\n  {\n    name: \"Tide A\",\n    domain: \"a.tide.tk\",\n  },\n];\n\nexport default KnownHosts;\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport const lotideContext = {\n  async store(ctx: LotideContext) {\n    return AsyncStorage.setItem(\"@lotide_ctx\", JSON.stringify(ctx));\n  },\n  async remove() {\n    return AsyncStorage.removeItem(\"@lotide_ctx\");\n  },\n  async query(): Promise<LotideContext | undefined> {\n    return AsyncStorage.getItem(\"@lotide_ctx\").then(ctxStr => {\n      if (ctxStr !== null) {\n        return JSON.parse(ctxStr) as LotideContext;\n      } else {\n        return undefined;\n      }\n    });\n  },\n};\n\nexport const lotideContextKV = {\n  async store(ctx: LotideContext) {\n    if (!ctx.login) return;\n    const name = `${ctx.login.user.username}@${ctx.apiUrl}`;\n    serviceKV.store(\"@lotide_ctx_arr\", name, ctx);\n  },\n  async query(k: string): Promise<LotideContext | undefined> {\n    return serviceKV.query<LotideContext>(\"@lotide_ctx_arr\", k);\n  },\n  async listKeys(): Promise<string[]> {\n    return serviceKV.listKeys(\"@lotide_ctx_arr\");\n  },\n  async remove(k: string): Promise<LotideContext | undefined> {\n    return serviceKV.remove(\"@lotide_ctx_arr\", k);\n  },\n  async logout(ctx: LotideContext) {\n    if (!ctx.login) return;\n    const name = `${ctx.login.user.username}@${ctx.apiUrl}`;\n    serviceKV.store(\"@lotide_ctx_arr\", name, { apiUrl: ctx.apiUrl });\n  },\n  async getStore(): Promise<{ [key: string]: LotideContext }> {\n    const storeStr = await AsyncStorage.getItem(\"@lotide_ctx_arr\");\n    return storeStr ? JSON.parse(storeStr) : {};\n  },\n};\n\nconst serviceKV = {\n  async store<T>(path: string, k: string, v: T) {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    store[k] = v;\n    await AsyncStorage.setItem(path, JSON.stringify(store));\n  },\n\n  async query<T>(path: string, k: string): Promise<T | undefined> {\n    const storeStr = await AsyncStorage.getItem(path);\n    return storeStr ? JSON.parse(storeStr)[k] : undefined;\n  },\n\n  async listKeys(path: string): Promise<string[]> {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    return Object.keys(store);\n  },\n\n  async remove<T>(path: string, k: string): Promise<T | undefined> {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    const v = store[k];\n    delete store[k];\n    await AsyncStorage.setItem(path, JSON.stringify(store));\n    return v;\n  },\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Platform, Pressable, ScrollView, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport KnownHosts from \"../constants/KnownHosts\";\nimport ActorDisplay from \"./ActorDisplay\";\nimport { Text, TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport useTheme from \"../hooks/useTheme\";\nimport { lotideContextKV } from \"../services/StorageService\";\nimport LotideContext from \"../store/LotideContext\";\n\nexport interface HostListProps {\n  onSelect: (domain: string, name?: string, username?: string) => void;\n}\n\ninterface HostData {\n  name: string;\n  domain: string;\n  instanceInfo?: InstanceInfo | null;\n}\n\nexport default function HostList(props: HostListProps) {\n  const [hostText, setHostText] = useState(\"\");\n  const [knownHosts, setKnowHosts] = useState<HostData[]>(KnownHosts);\n  const [existingProfiles, setExistingProfiles] = useState<\n    [string, LotideContext][]\n  >([]);\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n\n  useEffect(() => {\n    KnownHosts.map((h, i) => {\n      return LotideService.getInstanceInfo({\n        apiUrl: `https://${h.domain}/api/unstable`,\n      })\n        .then(d => {\n          setKnowHosts(hosts =>\n            hosts.map((h2, j) =>\n              i !== j\n                ? h2\n                : { name: h2.name, domain: h2.domain, instanceInfo: d },\n            ),\n          );\n        })\n        .catch(() => {\n          setKnowHosts(hosts =>\n            hosts.map((h2, j) =>\n              i !== j\n                ? h2\n                : { name: h2.name, domain: h2.domain, instanceInfo: null },\n            ),\n          );\n        });\n    });\n  }, []);\n\n  useEffect(() => {\n    lotideContextKV\n      .getStore()\n      .then(object => Object.entries(object))\n      .then(setExistingProfiles);\n  }, []);\n\n  const renderItem = ({ item }: { item: HostData }) => {\n    const enabled = item.instanceInfo?.software.version.startsWith(\"0.9.\");\n    const color = enabled ? theme.text : theme.secondaryText;\n    return (\n      <View\n        style={{\n          borderBottomWidth: StyleSheet.hairlineWidth || 1,\n          borderColor: theme.secondaryText,\n          paddingVertical: 25,\n        }}\n      >\n        <Pressable\n          onPress={() => enabled && props.onSelect(item.domain, item.name)}\n        >\n          <ActorDisplay\n            name={item.name}\n            host={item.domain}\n            local={false}\n            newLine={true}\n            styleName={{\n              fontSize: 24,\n              fontWeight: \"300\",\n              fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n              color,\n            }}\n          />\n          {item.instanceInfo ? (\n            <>\n              <Text style={{ color: theme.secondaryText }}>\n                {item.instanceInfo.software.version}\n                {!enabled && \" - Out of date\"}\n              </Text>\n              {!!item.instanceInfo.description && (\n                <Text style={{ color }}>{item.instanceInfo.description}</Text>\n              )}\n            </>\n          ) : item.instanceInfo === null ? (\n            <Text style={{ color }}>Failed to load info</Text>\n          ) : (\n            <Text style={{ color }}>Loading...</Text>\n          )}\n        </Pressable>\n      </View>\n    );\n  };\n  return (\n    <ScrollView contentContainerStyle={styles.root}>\n      <Text style={styles.title}>Login to continue</Text>\n      {existingProfiles.length > 0 && (\n        <Text style={styles.subtitle}>Select an existing profile</Text>\n      )}\n      {existingProfiles.map(p => {\n        const [username, url] = p[0].split(\"@\");\n        const isUnlocked = !!p[1].login;\n        const color = isUnlocked ? theme.text : theme.secondaryText;\n        const host = url\n          .replace(\"http://\", \"\")\n          .replace(\"https://\", \"\")\n          .split(/[/?#]/)[0];\n        return (\n          <Pressable\n            key={p[0]}\n            onPress={() => {\n              if (isUnlocked) {\n                lotideContext.setContext(p[1]);\n              } else {\n                props.onSelect(host.toLowerCase(), undefined, username);\n              }\n            }}\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <Icon\n              name={isUnlocked ? \"lock-open-outline\" : \"lock-closed-outline\"}\n              color={color}\n              style={{ marginRight: 10 }}\n              size={20}\n            />\n            <ActorDisplay\n              name={username}\n              host={host}\n              local={true}\n              showHost={\"always\"}\n              newLine={true}\n              style={{ paddingVertical: 15, paddingBottom: 10 }}\n              styleName={{ color }}\n            />\n          </Pressable>\n        );\n      })}\n      <Text style={styles.subtitle}>\n        {existingProfiles.length > 0\n          ? \"Or sign into a new acount\"\n          : \"Enter a host or select one below\"}\n      </Text>\n      <TextInput\n        placeholder=\"Host domain\"\n        style={{ paddingVertical: 10, paddingHorizontal: 10 }}\n        value={hostText}\n        onChangeText={setHostText}\n        onSubmitEditing={() => props.onSelect(hostText.toLowerCase())}\n        keyboardType=\"url\"\n        returnKeyType=\"next\"\n      />\n      {knownHosts\n        .filter(\n          x =>\n            hostText === \"\" ||\n            x.domain.includes(hostText.toLowerCase()) ||\n            x.name.toLowerCase().includes(hostText.toLowerCase()),\n        )\n        .map(item => (\n          <View key={item.domain}>{renderItem({ item })}</View>\n        ))}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 10,\n    textAlign: \"center\",\n  },\n  subtitle: {\n    fontWeight: \"300\",\n    marginBottom: 10,\n    marginTop: 15,\n    textAlign: \"center\",\n  },\n});\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n  TextInput as DefaultTextInput,\n} from \"react-native\";\nimport { Text, TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport useTheme from \"../hooks/useTheme\";\nimport { useNavigation } from \"@react-navigation/core\";\n\nexport interface LoginProps {\n  hostName?: string;\n  domain: string;\n  username?: string;\n  onGoBack: () => void;\n}\n\nexport default function Login(props: LoginProps) {\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [username, setUsername] = useState(props.username || \"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const usernameRef = useRef<DefaultTextInput>(null);\n  const passwordRef = useRef<DefaultTextInput>(null);\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n  const navigation = useNavigation();\n\n  function fail(message: string) {\n    Alert.alert(\"Failed to submit\", message);\n  }\n\n  function register() {\n    if (!username) return fail(\"Please enter a username\");\n    if (!password) return fail(\"Enter a password\");\n    if (!email) return fail(\"Please enter an email address\");\n\n    LotideService.register(\n      `https://${props.domain}/api/unstable`,\n      username,\n      password,\n      email,\n    )\n      .then(data => {\n        lotideContext.setContext({\n          apiUrl: `https://${props.domain}/api/unstable`,\n          login: data,\n        });\n      })\n      .catch(e => {\n        Alert.alert(\"Failed to register\", e);\n        console.error(e);\n      });\n  }\n\n  function login() {\n    if (!username) return fail(\"Please enter a username\");\n    if (!password) return fail(\"Enter a password\");\n\n    LotideService.login(\n      `https://${props.domain}/api/unstable`,\n      username,\n      password,\n    )\n      .then(data => {\n        lotideContext.setContext({\n          apiUrl: `https://${props.domain}/api/unstable`,\n          login: data,\n        });\n      })\n      .catch(e => {\n        Alert.alert(\"Failed to login\", e);\n        console.error(e);\n      });\n  }\n\n  function submit() {\n    if (isRegistering) {\n      register();\n    } else {\n      login();\n    }\n  }\n\n  return (\n    <Pressable\n      style={{ flex: 1 }}\n      onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n    >\n      <KeyboardAvoidingView style={styles.root} behavior=\"padding\">\n        {props.hostName ? (\n          <Pressable style={{ alignItems: \"center\" }}>\n            <Text style={styles.name}>{props.hostName}</Text>\n            <Text style={[styles.domain, { color: theme.secondaryText }]}>\n              {props.domain}\n            </Text>\n          </Pressable>\n        ) : (\n          <Pressable>\n            <Text style={{ fontSize: 24 }}>{props.domain}</Text>\n          </Pressable>\n        )}\n        <Pressable hitSlop={5} onPress={() => setIsRegistering(x => !x)}>\n          <Text style={[styles.loginRegister, { color: theme.secondaryText }]}>\n            <Text\n              style={{\n                color: isRegistering\n                  ? theme.secondaryText\n                  : theme.secondaryTint,\n              }}\n            >\n              Login\n            </Text>\n            {\" | \"}\n            <Text\n              style={{\n                color: isRegistering\n                  ? theme.secondaryTint\n                  : theme.secondaryText,\n              }}\n            >\n              Register\n            </Text>\n          </Text>\n        </Pressable>\n        {isRegistering && (\n          <TextInput\n            style={styles.input}\n            placeholder=\"Email Address\"\n            value={email}\n            onChangeText={setEmail}\n            keyboardType=\"email-address\"\n            textContentType=\"emailAddress\"\n            autoCompleteType=\"email\"\n            returnKeyType=\"next\"\n            onSubmitEditing={() => usernameRef.current?.focus()}\n          />\n        )}\n        <TextInput\n          ref={usernameRef}\n          style={styles.input}\n          placeholder=\"Username\"\n          value={username}\n          onChangeText={setUsername}\n          keyboardType=\"ascii-capable\"\n          textContentType=\"username\"\n          autoCompleteType=\"username\"\n          returnKeyType=\"next\"\n          onSubmitEditing={() => passwordRef.current?.focus()}\n        />\n        <TextInput\n          ref={passwordRef}\n          style={styles.input}\n          placeholder=\"Password\"\n          value={password}\n          onChangeText={setPassword}\n          secureTextEntry={true}\n          textContentType={isRegistering ? \"newPassword\" : \"password\"}\n          autoCompleteType=\"password\"\n          returnKeyType=\"done\"\n          onSubmitEditing={submit}\n        />\n        {!isRegistering && (\n          <Pressable\n            style={{ padding: 15 }}\n            onPress={() =>\n              navigation.navigate(\"ForgotPassword\", { node: props.domain })\n            }\n          >\n            <Text secondary>Forgot Password</Text>\n          </Pressable>\n        )}\n        <View style={styles.actionButtons}>\n          <Button\n            title=\"Change Host\"\n            onPress={props.onGoBack}\n            color={theme.secondaryTint}\n          />\n          <Button\n            title={isRegistering ? \"Register\" : \"Login\"}\n            onPress={submit}\n            color={theme.tint}\n          />\n        </View>\n      </KeyboardAvoidingView>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 35,\n  },\n  name: {\n    fontSize: 50,\n    fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n  },\n  domain: {\n    fontWeight: \"300\",\n  },\n  loginRegister: {\n    padding: 15,\n  },\n  input: {\n    width: \"100%\",\n    marginVertical: 5,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  actionButtons: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n});\n","import { lotideRequest } from \"./util\";\n\nexport async function login(\n  apiUrl: string,\n  username: string,\n  password: string,\n): Promise<Login> {\n  return lotideRequest(\n    { apiUrl },\n    \"POST\",\n    \"logins\",\n    { username, password },\n    true,\n  ).then(data => data.json());\n}\n\nexport async function register(\n  apiUrl: string,\n  username: string,\n  password: string,\n  email?: string,\n): Promise<Login> {\n  return lotideRequest(\n    { apiUrl },\n    \"POST\",\n    \"users\",\n    {\n      username,\n      password,\n      email_address: email,\n      login: true,\n    },\n    true,\n  ).then(data => data.json());\n}\n\nexport async function logout(ctx: LotideContext) {\n  return lotideRequest(ctx, \"DELETE\", \"logins/~current\");\n}\n\nexport async function forgotPasswordRequestKey(\n  ctx: LotideContext,\n  email: string,\n) {\n  return lotideRequest(\n    ctx,\n    \"POST\",\n    \"forgot_password/keys\",\n    {\n      email_address: email,\n    },\n    true,\n  );\n}\n\nexport async function forgotPasswordTestKey(ctx: LotideContext, key: string) {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `forgot_password/keys/${key}`,\n    undefined,\n    true,\n  );\n}\n\nexport async function forgotPasswordReset(\n  ctx: LotideContext,\n  key: string,\n  newPassword: string,\n) {\n  return lotideRequest(\n    ctx,\n    \"POST\",\n    `forgot_password/keys/${key}/reset`,\n    { new_password: newPassword },\n    true,\n  );\n}\n","import React, { useState } from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { View } from \"./Themed\";\nimport HostList from \"./HostList\";\nimport Login from \"./Login\";\n\nexport default function SuggestLogin() {\n  const [hostName, setHostName] = useState<string>();\n  const [domain, setDomain] = useState<string>();\n  const [username, setUsername] = useState<string>();\n\n  return (\n    <View style={styles.root}>\n      {!domain ? (\n        <HostList\n          onSelect={(domain, name, username) => {\n            setHostName(name);\n            setDomain(domain);\n            setUsername(username);\n          }}\n        />\n      ) : (\n        <Login\n          hostName={hostName}\n          domain={domain}\n          username={username}\n          onGoBack={() => setDomain(undefined)}\n        />\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  input: {\n    width: \"100%\",\n    marginBottom: 20,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  actionButtons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    width: \"100%\",\n  },\n});\n","import React, { useContext } from \"react\";\nimport { StyleSheet, FlatList, Pressable } from \"react-native\";\n\nimport PostDisplay from \"../components/PostDisplay\";\nimport { View } from \"../components/Themed\";\nimport * as Haptics from \"../services/HapticService\";\nimport { usePosts } from \"../hooks/lotide\";\nimport { RootTabScreenProps } from \"../types\";\nimport useTheme from \"../hooks/useTheme\";\nimport LotideContext from \"../store/LotideContext\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport { hasLogin } from \"../services/LotideService\";\n\nexport default function FeedScreen({\n  navigation,\n  route,\n}: RootTabScreenProps<\"FeedScreen\">) {\n  const sort = route.params.sort;\n  const ctx = useContext(LotideContext).ctx;\n  const [posts, isLoadingPosts, refreshPosts, loadNextPage] = usePosts(\n    sort,\n    true,\n  );\n  if (!hasLogin(ctx)) return <SuggestLogin />;\n  const renderItem = ({ item }: { item: Post }) => (\n    <Item post={item} navigation={navigation} />\n  );\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={posts}\n        renderItem={renderItem}\n        keyExtractor={(post, index) => `${post.id}-${index}`}\n        refreshing={isLoadingPosts}\n        onRefresh={refreshPosts}\n        onEndReachedThreshold={2}\n        onEndReached={loadNextPage}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n    borderBottomWidth: 8,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n    color: \"#eee\",\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    backgroundColor: \"#8884\",\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n  },\n  footText: {\n    color: \"#ccc\",\n  },\n  by: {\n    fontSize: 11,\n  },\n  score: {\n    fontSize: 18,\n    color: \"#bbb\",\n  },\n});\n\nconst Item = ({ post, navigation }: { post: Post; navigation: any }) => {\n  const theme = useTheme();\n  return (\n    <Pressable\n      onPress={() => navigation.navigate(\"Post\", { post })}\n      onLongPress={() => {\n        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n        console.log(post);\n      }}\n    >\n      <View\n        style={[styles.item, { borderBottomColor: theme.secondaryBackground }]}\n      >\n        <PostDisplay post={post} navigation={navigation} />\n      </View>\n    </Pressable>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { FlatList, Pressable, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport LotideContext from \"../store/LotideContext\";\nimport { TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport ActorDisplay from \"./ActorDisplay\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport interface CommunityFinderProps {\n  placeholder?: string;\n  onlyWhenTyping?: boolean;\n  onSelect: (community: Community) => void;\n}\n\nexport default function CommunityFinder(props: CommunityFinderProps) {\n  const [communities, setCommunities] = useState<Paged<Community>>();\n  const [filterText, setFilterText] = useState(\"\");\n  const ctx = useContext(LotideContext).ctx;\n  const theme = useTheme();\n\n  const communitiesToDisplay = (() => {\n    if (props.onlyWhenTyping && filterText === \"\") return [];\n    if (!communities) return [];\n    if (filterText === \"\") return communities.items;\n    return communities.items.filter(\n      c =>\n        c.name.toLowerCase().includes(filterText.toLowerCase()) ||\n        c.host.includes(filterText.toLowerCase()),\n    );\n  })();\n\n  useEffect(() => {\n    LotideService.getCommunities(ctx, false).then(setCommunities);\n  }, [ctx.login?.token]);\n\n  const renderItem = ({ item }: { item: Community }) => {\n    return (\n      <Pressable\n        onPress={() => props.onSelect(item)}\n        style={[\n          styles.item,\n          {\n            borderColor: theme.secondaryBackground,\n          },\n        ]}\n      >\n        <ActorDisplay\n          name={item.name}\n          host={item.host}\n          local={item.local}\n          colorize={\"always\"}\n          newLine\n        />\n        <View style={{ display: \"flex\", flexDirection: \"row\" }}>\n          {item.you_are_moderator && (\n            <Icon name=\"shield-outline\" size={20} color={theme.secondaryTint} />\n          )}\n          {item.your_follow?.accepted && (\n            <Icon\n              name=\"checkmark\"\n              size={20}\n              color={theme.secondaryTint}\n              style={{ marginLeft: 5 }}\n            />\n          )}\n        </View>\n      </Pressable>\n    );\n  };\n\n  return (\n    <View>\n      <TextInput\n        placeholder={props.placeholder || \"Filter communities\"}\n        value={filterText}\n        onChangeText={setFilterText}\n        style={styles.input}\n      />\n      <FlatList\n        data={communitiesToDisplay}\n        renderItem={renderItem}\n        keyExtractor={(item, index) => `${item.id}-${index}`}\n        contentContainerStyle={styles.list}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  input: {\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginTop: 20,\n  },\n  list: {\n    padding: 20,\n    paddingBottom: 100,\n  },\n  item: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    height: 50,\n    borderBottomWidth: 1,\n    paddingHorizontal: 20,\n  },\n});\n","import React, { useContext } from \"react\";\nimport LotideContext from \"../store/LotideContext\";\nimport { RootTabScreenProps } from \"../types\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport CommunityFinder from \"../components/CommunityFinder\";\n\nexport default function SearchScreen({\n  navigation,\n}: RootTabScreenProps<\"SearchScreen\">) {\n  const ctx = useContext(LotideContext).ctx;\n\n  if (!ctx.login) return <SuggestLogin />;\n\n  return (\n    <CommunityFinder\n      onSelect={community => navigation.navigate(\"Community\", { community })}\n    />\n  );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Alert, Button, Pressable, ScrollView, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { View, Text, TextInput } from \"../components/Themed\";\nimport { getUserData } from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { RootTabScreenProps } from \"../types\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport * as LotideService from \"../services/LotideService\";\nimport * as StorageService from \"../services/StorageService\";\nimport useTheme from \"../hooks/useTheme\";\nimport ActorDisplay from \"../components/ActorDisplay\";\n\nexport default function ProfileScreen({\n  navigation,\n}: RootTabScreenProps<\"ProfileScreen\">) {\n  const [profile, setProfile] = useState<Profile>();\n  const [profileList, setProfileList] = useState<string[]>([]);\n  const [communities, setCommunities] = useState<Community[]>([]);\n  const [isEditing, setIsEditing] = useState(false);\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n  const ctx = lotideContext.ctx;\n\n  useEffect(() => {\n    if (!ctx.login) return;\n    // TODO: Use the pagination feature\n    LotideService.getCommunities(ctx, true).then(communities =>\n      setCommunities(communities.items),\n    );\n  }, [ctx.login?.user.id]);\n\n  useEffect(() => {\n    if (ctx.login !== undefined && ctx.login.user !== undefined) {\n      getUserData(ctx, ctx.login?.user.id || 0).then(setProfile);\n    }\n  }, [ctx.login?.token]);\n\n  useEffect(() => {\n    StorageService.lotideContextKV\n      .listKeys()\n      .then(keys => setProfileList(keys));\n  }, [ctx]);\n\n  if (ctx.login === undefined) {\n    return <SuggestLogin />;\n  }\n\n  function logout() {\n    Alert.alert(\n      \"Log out\",\n      \"Would you like to keep the login profile handy for later?\",\n      [\n        {\n          text: \"Cancel\",\n          style: \"cancel\",\n        },\n        {\n          text: \"Remove\",\n          onPress: () => {\n            StorageService.lotideContextKV\n              .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n              .then(() => LotideService.logout(ctx))\n              .then(() => lotideContext.setContext({}));\n          },\n        },\n        {\n          text: \"Keep\",\n          style: \"default\",\n          onPress: () => {\n            StorageService.lotideContextKV.logout(ctx);\n            lotideContext.setContext({});\n          },\n        },\n      ],\n      { cancelable: true },\n    );\n  }\n\n  return (\n    <ScrollView\n      style={[styles.container, { backgroundColor: theme.background }]}\n    >\n      <View style={styles.header}>\n        <View>\n          <Pressable hitSlop={10} onPress={() => setIsEditing(x => !x)}>\n            <Text style={styles.title}>\n              {profile?.username}\n              {\"  \"}\n              <Icon\n                name=\"pencil-outline\"\n                size={20}\n                color={theme.secondaryText}\n              />\n            </Text>\n          </Pressable>\n          <Text style={{ color: theme.secondaryText }}>{profile?.host}</Text>\n          {!!profile?.avatar && <Text>{profile?.avatar?.url}</Text>}\n          {!!profile?.description && <Text>{profile?.description}</Text>}\n        </View>\n        <Button\n          onPress={logout}\n          title=\"Log Out\"\n          color={theme.secondaryTint}\n          accessibilityLabel=\"Log out of the Hoot network\"\n        />\n      </View>\n      {isEditing && (\n        <View style={styles.editView}>\n          <TextInput style={styles.editViewText} placeholder=\"New email\" />\n          <TextInput\n            style={styles.editViewText}\n            placeholder=\"User bio\"\n            multiline={true}\n          />\n          <TextInput style={styles.editViewText} placeholder=\"New password\" />\n          <TextInput\n            style={styles.editViewText}\n            placeholder=\"Confirm new password\"\n          />\n          <View style={styles.editViewActionButtons}>\n            <Button\n              onPress={() => setIsEditing(false)}\n              title=\"Cancel\"\n              color={theme.secondaryTint}\n              accessibilityLabel=\"Add profile\"\n            />\n            <Button\n              onPress={() => Alert.alert(\"unimplemented\")}\n              title=\"Submit\"\n              color={theme.tint}\n              accessibilityLabel=\"Add profile\"\n            />\n          </View>\n        </View>\n      )}\n      <Button\n        onPress={() => lotideContext.setContext({})}\n        title=\"Add Profile\"\n        color={theme.tint}\n        accessibilityLabel=\"Add profile\"\n      />\n      {profileList\n        .map(p => [p, ...p.split(\"@\")] as string[])\n        .map(p => [\n          p[0],\n          p[1],\n          p[2].replace(\"http://\", \"\").replace(\"https://\", \"\").split(/[/?#]/)[0],\n        ])\n        .map(p => (\n          <Pressable\n            key={p[0]}\n            style={[\n              styles.altProfileButton,\n              { borderColor: theme.secondaryBackground },\n            ]}\n            onPress={() => {\n              StorageService.lotideContextKV.query(p[0]).then(ctx => {\n                if (ctx !== undefined) {\n                  lotideContext.setContext(ctx);\n                  setIsEditing(false);\n                }\n              });\n            }}\n          >\n            <ActorDisplay\n              name={p[1]}\n              host={p[2]}\n              local={true}\n              showHost={\"always\"}\n              colorize={\"never\"}\n              newLine={true}\n            />\n          </Pressable>\n        ))}\n      <View style={{ paddingTop: 10 }}>\n        <Button\n          onPress={() => navigation.navigate(\"NewCommunity\")}\n          title=\"Create Community\"\n          color={theme.tint}\n          accessibilityLabel=\"Create a new community\"\n        />\n      </View>\n      <Text style={styles.followingTitle}>Communities You Follow:</Text>\n      {communities.map(community => (\n        <View\n          key={community.id}\n          style={[\n            styles.altProfileButton,\n            { borderColor: theme.secondaryBackground },\n          ]}\n        >\n          <ActorDisplay\n            name={community.name}\n            host={community.host}\n            local={community.local}\n            showHost={\"always\"}\n            colorize={\"always\"}\n            newLine={true}\n          />\n        </View>\n      ))}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\",\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  followingTitle: {\n    fontSize: 18,\n    fontWeight: \"500\",\n    padding: 20,\n  },\n  editView: {\n    margin: 20,\n  },\n  editViewText: {\n    marginBottom: 15,\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n  },\n  editViewActionButtons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    height: 40,\n    borderWidth: 1,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  altProfileButton: {\n    marginHorizontal: 20,\n    paddingVertical: 15,\n    borderBottomWidth: 1,\n  },\n});\n","import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n  TextInput,\n  TouchableWithoutFeedback,\n} from \"react-native\";\nimport { View, Text } from \"../components/Themed\";\nimport LotideContext from \"../store/LotideContext\";\nimport { RootTabScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport useTheme from \"../hooks/useTheme\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport CommunityFinder from \"../components/CommunityFinder\";\nimport ActorDisplay from \"../components/ActorDisplay\";\n\nexport default function NewPostScreen({\n  navigation,\n}: RootTabScreenProps<\"NewPostScreen\">) {\n  const [community, setCommunity] = useState<Community | null>();\n  const [title, setTitle] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n  const ctx = lotideContext.ctx;\n\n  useEffect(() => {\n    return navigation.addListener(\"focus\", () => {\n      console.log(community);\n      if (community === null) {\n        setCommunity(undefined);\n      }\n    });\n  }, [community, community?.id]);\n\n  if (ctx.login === undefined) {\n    return <SuggestLogin />;\n  }\n\n  if (community === null)\n    return <CommunityFinder onSelect={setCommunity} onlyWhenTyping />;\n\n  function submit() {\n    if (!community) return;\n    LotideService.submitPost(ctx, {\n      community: community.id,\n      title,\n      href: link || undefined,\n      content_markdown: content || undefined,\n    })\n      .then(data => {\n        LotideService.getPost(ctx, data.id).then(post => {\n          reset();\n          navigation.navigate(\"Post\", { post });\n        });\n      })\n      .catch(e => Alert.alert(\"Could not submit post\", e));\n  }\n\n  function reset() {\n    setCommunity(undefined);\n    setTitle(\"\");\n    setLink(\"\");\n    setContent(\"\");\n  }\n\n  return (\n    <KeyboardAvoidingView style={{ width: \"100%\", height: \"100%\" }}>\n      <TouchableWithoutFeedback\n        onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n      >\n        <View style={styles.container}>\n          <Pressable onPress={() => setCommunity(null)}>\n            {community ? (\n              <ActorDisplay\n                name={community.name}\n                host={community.host}\n                local={community.local}\n                colorize={\"always\"}\n                showHost={\"always\"}\n                newLine\n                style={styles.input}\n              />\n            ) : (\n              <Text style={[styles.input, { color: theme.secondaryText }]}>\n                Select a Community\n              </Text>\n            )}\n          </Pressable>\n          <TextInput\n            style={[styles.input, styles.title, { color: theme.text }]}\n            placeholder=\"Add a Title\"\n            placeholderTextColor={theme.placeholderText}\n            value={title}\n            onChangeText={setTitle}\n          />\n          {title.length >= 4 ? (\n            <>\n              <TextInput\n                style={[styles.input, { color: theme.text }]}\n                placeholder=\"Link\"\n                placeholderTextColor={theme.placeholderText}\n                value={link}\n                onChangeText={setLink}\n                keyboardType=\"url\"\n                textContentType=\"URL\"\n              />\n              <TextInput\n                style={[styles.input, { color: theme.text }]}\n                placeholder=\"Add post content\"\n                placeholderTextColor={theme.placeholderText}\n                value={content}\n                onChangeText={setContent}\n              />\n            </>\n          ) : (\n            <Text style={{ color: theme.secondaryText }}>\n              {title.length > 0 && 4 - title.length}\n            </Text>\n          )}\n          {!!community && (!!link || content.length > 10) && (\n            <Button\n              onPress={submit}\n              title=\"Submit\"\n              color={theme.tint}\n              accessibilityLabel=\"Submit new post\"\n            />\n          )}\n          {content.length < 11 && content.length > 0 && (\n            <Text style={{ color: theme.secondaryText }}>\n              {11 - content.length}\n            </Text>\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"flex-start\",\n    padding: 15,\n    height: \"100%\",\n    width: \"100%\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    paddingVertical: 10,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  item: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginBottom: 1,\n  },\n});\n","import React from \"react\";\nimport { View, Text } from \"../components/Themed\";\n\nexport default function SettingsScreen() {\n  return (\n    <View>\n      <Text>Settings screen. It'll be implemented eventually.</Text>\n    </View>\n  );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Alert, Button, FlatList, Pressable, StyleSheet } from \"react-native\";\nimport { View, Text } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as Haptics from \"../services/HapticService\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { usePosts } from \"../hooks/lotide\";\nimport PostDisplay from \"../components/PostDisplay\";\n\nexport default function CommunityScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Community\">) {\n  const [community, setCommunity] = useState(route.params.community);\n  const [posts, isLoadingPosts, refreshPosts, loadNextPage] = usePosts(\n    \"hot\",\n    undefined,\n    community.id,\n  );\n  const [reloadId, setReloadId] = useState(0);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  useEffect(() => {\n    LotideService.getCommunity(ctx, community.id).then(setCommunity);\n  }, [route.params.community.id, reloadId]);\n\n  const renderItem = ({ item }: { item: Post }) => (\n    <Item post={item} navigation={navigation} />\n  );\n\n  const isFollowing = community.your_follow?.accepted || false;\n\n  function follow() {\n    LotideService.followCommunity(ctx, community.id).then(data => {\n      if (data.accepted === false) {\n        Alert.alert(\n          \"Follow request rejected.\",\n          \"This could be an issue with the node you are connected to.\",\n        );\n      }\n      setReloadId(x => x + 1);\n    });\n  }\n\n  function unfollow() {\n    LotideService.unfollowCommunity(ctx, community.id).then(() => {\n      setReloadId(x => x + 1);\n    });\n  }\n\n  return (\n    <View style={[styles.root, { backgroundColor: theme.background }]}>\n      <View\n        style={[\n          styles.header,\n          { borderBottomColor: theme.secondaryBackground },\n        ]}\n      >\n        <View>\n          <Text style={[styles.title]}>{community.name}</Text>\n          <Text\n            style={{\n              color: community.local ? theme.blue : theme.green,\n              fontWeight: \"500\",\n            }}\n          >\n            {community.host}\n          </Text>\n          {community.description !== \"\" && (\n            <Text>\n              {\"\\n\"}\n              {community.description}\n            </Text>\n          )}\n        </View>\n        {isFollowing ? (\n          <Button\n            onPress={unfollow}\n            title=\"Unfollow\"\n            color={theme.tint}\n            accessibilityLabel=\"Stop seeing posts from this community\"\n          />\n        ) : (\n          <Button\n            onPress={follow}\n            title=\"Follow\"\n            color={theme.tint}\n            accessibilityLabel=\"See posts from this community in your feed\"\n          />\n        )}\n      </View>\n      <FlatList\n        data={posts}\n        renderItem={renderItem}\n        keyExtractor={(post, index) => `${post.id}-${index}`}\n        refreshing={isLoadingPosts}\n        onRefresh={refreshPosts}\n        onEndReachedThreshold={2}\n        onEndReached={loadNextPage}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    height: \"100%\",\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    padding: 20,\n    borderBottomWidth: 1,\n  },\n  title: {\n    fontSize: 20,\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n    borderBottomWidth: 8,\n  },\n});\n\nconst Item = ({ post, navigation }: { post: Post; navigation: any }) => {\n  const theme = useTheme();\n  return (\n    <Pressable\n      onPress={() => navigation.navigate(\"Post\", { post })}\n      onLongPress={() => {\n        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n      }}\n    >\n      <View\n        style={[styles.item, { borderBottomColor: theme.secondaryBackground }]}\n      >\n        <PostDisplay post={post} navigation={navigation} />\n      </View>\n    </Pressable>\n  );\n};\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport { Text, TextInput } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport ContentDisplay from \"../components/ContentDisplay\";\nimport { ScrollView } from \"react-native-gesture-handler\";\n\nexport default function ReplyScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Reply\">) {\n  const [text, setText] = useState(\"\");\n  const scrollRef = useRef<ScrollView>(null);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n  const id = route.params.id;\n  const title = route.params.title;\n  const html = route.params.html;\n  const type = route.params.type;\n\n  function submit() {\n    if (type === \"post\") {\n      LotideService.replyToPost(ctx, id, text).then(() => navigation.pop());\n    } else {\n      LotideService.replyToReply(ctx, id, text).then(() => navigation.pop());\n    }\n  }\n\n  function scrollToBottom() {\n    if (scrollRef.current) {\n      scrollRef.current.scrollToEnd({ animated: true });\n    }\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n    >\n      <ScrollView ref={scrollRef}>\n        <Pressable\n          style={styles.root}\n          onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n        >\n          <Text>Reply to {type}</Text>\n          {!!title && <Text style={styles.title}>{title}</Text>}\n          {html && <ContentDisplay contentHtml={html} />}\n          <TextInput\n            style={styles.input}\n            multiline\n            placeholder=\"Type your reply\"\n            value={text}\n            onChangeText={setText}\n            onFocus={scrollToBottom}\n          />\n          <Button title=\"Submit\" color={theme.tint} onPress={submit} />\n        </Pressable>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: { padding: 20, paddingBottom: 100 },\n  title: {\n    fontSize: 20,\n    marginVertical: 10,\n  },\n  input: {\n    marginVertical: 20,\n    minHeight: 100,\n  },\n});\n","import React from \"react\";\n\nexport const defaultSelectedReplyContext: SelectedReplyContext = [\n  undefined,\n  () => {},\n];\n\nexport const SelectedReplyContext = React.createContext<SelectedReplyContext>(\n  defaultSelectedReplyContext,\n);\n","import React, { useContext, useState } from \"react\";\nimport { ColorValue, Pressable, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { View, Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport ElapsedTime from \"./ElapsedTime\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport ContentDisplay from \"./ContentDisplay\";\nimport { SelectedReplyContext } from \"../store/SelectedReplyContext\";\nimport VoteCounter from \"./VoteCounter\";\n\nexport interface RepliesDisplayProps {\n  replies: Paged<Reply>;\n  navigation: any;\n  layer?: number;\n  postId?: PostId;\n  replyId?: ReplyId;\n  highlightedReplies?: ReplyId[];\n}\n\nexport default function RepliesDisplay({\n  replies,\n  navigation,\n  layer = 0,\n  postId,\n  replyId,\n  highlightedReplies = [],\n}: RepliesDisplayProps) {\n  const [nextPageData, setNextPageData] = useState<Paged<Reply>>();\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n  const layerColors = [\n    theme.text,\n    theme.red,\n    theme.orange,\n    theme.yellow,\n    theme.green,\n    theme.teal,\n    theme.blue,\n    theme.indigo,\n    theme.purple,\n  ];\n\n  return (\n    <View>\n      {replies.items.map(reply => (\n        <ReplyDisplay\n          reply={reply}\n          layer={layer}\n          key={reply.id}\n          navigation={navigation}\n          layerColors={layerColors}\n          postId={postId}\n          highlightedReplies={highlightedReplies}\n        />\n      ))}\n      {replies.next_page !== null &&\n        nextPageData === undefined &&\n        (postId || replyId) && (\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              if (replyId) {\n                LotideService.getReplyReplies(\n                  ctx,\n                  replyId,\n                  replies.next_page || undefined,\n                ).then(setNextPageData);\n              } else if (postId) {\n                LotideService.getPostReplies(\n                  ctx,\n                  postId,\n                  replies.next_page || undefined,\n                ).then(setNextPageData);\n              }\n            }}\n          >\n            <Text\n              style={{ color: theme.tint, paddingTop: 5, paddingBottom: 10 }}\n            >\n              More replies <Icon name=\"chevron-down-outline\" />\n            </Text>\n          </Pressable>\n        )}\n      {nextPageData !== undefined && (\n        <RepliesDisplay\n          replies={nextPageData}\n          navigation={navigation}\n          layer={layer}\n          postId={postId}\n          replyId={replyId}\n          highlightedReplies={highlightedReplies}\n        />\n      )}\n      {replies.next_page === null && layer === 0 && (\n        <Text style={{ margin: 17, color: theme.secondaryText }}>\n          {replies.items.length > 0 ? \"No more replies\" : \"No replies yet\"}\n        </Text>\n      )}\n    </View>\n  );\n}\n\nfunction ReplyDisplay({\n  reply,\n  layer = 0,\n  navigation,\n  layerColors,\n  postId,\n  highlightedReplies = [],\n}: {\n  reply: Reply;\n  layer: number;\n  navigation: any;\n  layerColors: ColorValue[];\n  postId?: PostId;\n  highlightedReplies?: ReplyId[];\n}) {\n  const [nextPageData, setNextPageData] = useState<Paged<Reply>>();\n  const [showChildren, setShowChildren] = React.useState(true);\n  const theme = useTheme();\n  const { ctx } = useContext(LotideContext);\n  const [selectedReply, setSelectedReply] = useContext(SelectedReplyContext);\n\n  return (\n    <View style={{ paddingLeft: 0 }}>\n      <View\n        style={{\n          paddingVertical: 8,\n          borderTopWidth: 0.5,\n          borderTopColor: theme.secondaryBackground,\n        }}\n      >\n        <Pressable\n          onPress={() =>\n            setSelectedReply(selectedReply != reply.id ? reply.id : undefined)\n          }\n        >\n          <View\n            style={{\n              borderLeftWidth: 2,\n              borderColor: layerColors[layer % layerColors.length],\n              paddingLeft: 15,\n              paddingVertical: 3,\n              backgroundColor: highlightedReplies.includes(reply.id)\n                ? theme.secondaryBackground\n                : theme.background,\n            }}\n          >\n            <Text\n              style={{\n                color: theme.text,\n                fontSize: 16,\n                marginBottom: 5,\n                fontWeight: \"500\",\n              }}\n            >\n              {reply.author.username}\n              {\"  \"}\n              <Text style={{ color: theme.text, fontSize: 14 }}>\n                <Icon name=\"heart-outline\" size={14} color={theme.text} light />{\" \"}\n                {reply.score}\n                {\"   \"}\n                <ElapsedTime time={reply.created} />\n                {!showChildren && \"    ...\"}\n              </Text>\n            </Text>\n            {showChildren && !!reply.content_html && (\n              <ContentDisplay\n                contentHtml={reply.content_html}\n                contentText={reply.content_text}\n              />\n            )}\n          </View>\n          {selectedReply == reply.id && (\n            <View style={styles.buttons}>\n              <VoteCounter\n                type=\"reply\"\n                post={reply}\n                isUpvoted={false}\n                hideCount\n                style={styles.button}\n              />\n              {/* <Pressable style={styles.button}>\n                <Icon color={theme.text} size={20} name=\"bookmark-outline\" />\n              </Pressable> */}\n              <Pressable\n                style={styles.button}\n                onPress={() => {\n                  Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n                  navigation.navigate(\"Reply\", {\n                    id: reply.id,\n                    title: reply.author.username,\n                    html: reply.content_html,\n                    type: \"reply\",\n                  });\n                }}\n              >\n                <Icon color={theme.text} size={20} name=\"arrow-undo-outline\" />\n              </Pressable>\n              <Pressable\n                style={styles.button}\n                onPress={() => {\n                  setShowChildren(s => !s);\n                }}\n              >\n                <Icon\n                  color={\n                    (reply.replies?.items.length || 0) > 0\n                      ? theme.text\n                      : theme.secondaryText\n                  }\n                  size={20}\n                  name={\n                    showChildren ? \"chevron-up-outline\" : \"chevron-down-outline\"\n                  }\n                />\n              </Pressable>\n              {/* <Pressable style={styles.button}>\n                <Icon\n                  color={theme.text}\n                  size={20}\n                  name=\"ellipsis-vertical-outline\"\n                />\n              </Pressable> */}\n            </View>\n          )}\n        </Pressable>\n      </View>\n      {reply.replies !== null\n        ? reply.replies.items.length > 0 &&\n          (showChildren ? (\n            <View style={{ paddingLeft: 15 }}>\n              <RepliesDisplay\n                replies={reply.replies}\n                layer={layer + 1}\n                navigation={navigation}\n                postId={postId}\n                replyId={reply.id}\n                highlightedReplies={highlightedReplies}\n              />\n            </View>\n          ) : (\n            <Text>...</Text>\n          ))\n        : nextPageData === undefined && (\n            <Pressable\n              hitSlop={5}\n              onPress={() => {\n                LotideService.getReplyReplies(ctx, reply.id).then(\n                  setNextPageData,\n                );\n              }}\n            >\n              <View style={{ paddingHorizontal: 15, paddingBottom: 10 }}>\n                <Text style={{ color: theme.tint }}>\n                  More replies <Icon name=\"chevron-forward-outline\" />\n                </Text>\n              </View>\n            </Pressable>\n          )}\n      {nextPageData !== undefined && (\n        <View style={{ paddingLeft: 15 }}>\n          <RepliesDisplay\n            replies={nextPageData}\n            navigation={navigation}\n            layer={layer + 1}\n            postId={postId}\n            replyId={reply.id}\n          />\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    paddingHorizontal: 15,\n  },\n  button: {\n    padding: 10,\n    paddingHorizontal: 15,\n  },\n});\n","import Icon from \"@expo/vector-icons/Ionicons\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  StatusBar,\n  ScrollView,\n  Pressable,\n  Share,\n} from \"react-native\";\nimport * as Haptics from \"../services/HapticService\";\nimport PostDisplay from \"../components/PostDisplay\";\nimport { View, Text } from \"../components/Themed\";\nimport { useReplies } from \"../hooks/lotide\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport LotideContext from \"../store/LotideContext\";\nimport RepliesDisplay from \"../components/RepliesDisplay\";\nimport { SelectedReplyContext } from \"../store/SelectedReplyContext\";\n\nexport default function ModalScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Post\">) {\n  const post = route.params.post;\n  const [highlightedReplies, setHighlightedReplies] = useState(\n    route.params.highlightedReplies,\n  );\n  const [focusId, setFocusId] = useState(0);\n  const [selectedReply, setSelectedReply] = useState<ReplyId>();\n  const ctx = useContext(LotideContext).ctx;\n  const replies = useReplies(\n    ctx,\n    post.id,\n    [focusId, highlightedReplies?.join(\",\")],\n    highlightedReplies?.[0],\n  );\n  const theme = useTheme();\n\n  useEffect(() => {\n    navigation.addListener(\"focus\", () => {\n      setFocusId(x => x + 1);\n    });\n  });\n\n  return (\n    <ScrollView>\n      <View\n        style={{\n          ...styles.item,\n          backgroundColor: theme.background,\n        }}\n      >\n        <PostDisplay\n          post={post}\n          navigation={navigation}\n          showHtmlContent\n          showCommunityHost\n        />\n        <View style={styles.actions}>\n          <Icon name=\"bookmark-outline\" size={25} color={theme.text} />\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              navigation.navigate(\"Reply\", {\n                id: post.id,\n                title: post.title,\n                html: post.content_html,\n                type: \"post\",\n              });\n            }}\n          >\n            <Icon name=\"arrow-undo-outline\" size={25} color={theme.text} />\n          </Pressable>\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              Share.share({\n                message: post.title,\n                url: `https://dev.goldandblack.xyz/p/posts/${post.id}`,\n                title: \"Hoot\",\n              });\n            }}\n          >\n            <Icon name=\"share-outline\" size={25} color={theme.text} />\n          </Pressable>\n        </View>\n        {highlightedReplies && (\n          <Pressable onPress={() => setHighlightedReplies(undefined)}>\n            <Text style={{ color: theme.tint, paddingVertical: 10 }}>\n              Show all replies\n            </Text>\n          </Pressable>\n        )}\n        <SelectedReplyContext.Provider\n          value={[selectedReply, setSelectedReply]}\n        >\n          <RepliesDisplay\n            replies={replies}\n            navigation={navigation}\n            postId={post.id}\n            highlightedReplies={highlightedReplies}\n          />\n        </SelectedReplyContext.Provider>\n        <View style={{ height: 300 }} />\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    backgroundColor: \"#8884\",\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n    borderBottomColor: \"#8884\",\n    borderBottomWidth: 2,\n  },\n  by: {\n    fontSize: 11,\n  },\n  actions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    padding: 10,\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import * as LotideService from \"../services/LotideService\";\n\nexport interface Origin {\n  type: \"post\" | \"comment\";\n  id: number;\n  content_text?: string;\n  content_html?: string;\n  author: Profile;\n}\n\nexport async function transformToFullNotification(\n  ctx: LotideContext,\n  notification: UserNotification,\n): Promise<FullNotification> {\n  const post = LotideService.getPost(ctx, notification.post.id);\n  const origin = notification.comment\n    ? originFromComment(ctx, notification.comment!)\n    : originFromPost(await post);\n  const reply = await LotideService.getReply(ctx, notification.reply.id);\n\n  return {\n    unseen: notification.unseen,\n    reply: {\n      id: reply.id,\n      content_text: reply.content_text,\n      content_html: reply.content_html,\n      author: reply.author,\n    },\n    origin: await origin,\n    post: await post,\n  };\n}\n\nexport async function originFromComment(\n  ctx: LotideContext,\n  commentId: ReplyId,\n): Promise<Origin> {\n  const comment = await LotideService.getReply(ctx, commentId);\n  return {\n    type: \"comment\",\n    id: commentId,\n    content_text: comment.content_text,\n    content_html: comment.content_html,\n    author: comment.author,\n  };\n}\n\nexport async function originFromPost(post: Post): Promise<Origin> {\n  return {\n    type: \"post\",\n    id: post.id,\n    content_text: post.title,\n    author: post.author,\n  };\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { FlatList, Pressable, StyleSheet } from \"react-native\";\nimport ActorDisplay from \"../components/ActorDisplay\";\nimport ContentDisplay from \"../components/ContentDisplay\";\nimport SuggestLogin from \"../components/SuggestLogin\";\n\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { transformToFullNotification } from \"../transformers/NotificationTransformer\";\nimport { RootTabScreenProps } from \"../types\";\n\nexport default function NotificationScreen({\n  navigation,\n}: RootTabScreenProps<\"NotificationScreen\">) {\n  const [notifications, setNotifications] = useState<FullNotification[]>([]);\n  const [isRefreshing, setIsRefreshing] = useState(true);\n  const [focusId, setFocusId] = useState(0);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  useEffect(() => {\n    if (!ctx.login) return;\n    LotideService.getNotifications(ctx).then(notifications => {\n      const promises = notifications.map(n =>\n        transformToFullNotification(ctx, n),\n      );\n      Promise.all(promises)\n        .then(setNotifications)\n        .then(() => setIsRefreshing(false));\n    });\n  }, [focusId]);\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(i => i + 1)),\n    [],\n  );\n\n  if (!ctx.login) return <SuggestLogin />;\n\n  const renderItem = ({ item }: { item: FullNotification }) => {\n    return (\n      <Pressable\n        style={[styles.item, { borderColor: theme.secondaryBackground }]}\n        onPress={() => {\n          const highlightedReplies =\n            item.origin.type === \"comment\"\n              ? [item.origin.id, item.reply.id]\n              : [item.reply.id];\n          navigation.navigate(\"Post\", {\n            post: item.post,\n            highlightedReplies,\n          });\n        }}\n      >\n        <Text style={styles.name}>{item.post.author.username}</Text>\n        <Text style={styles.title}>{item.post.title}</Text>\n        <Text>\n          In{\" \"}\n          <ActorDisplay\n            name={item.post.community.name}\n            host={item.post.community.host}\n            local={item.post.community.local}\n            showHost={\"always\"}\n            colorize={\"never\"}\n          />\n        </Text>\n        {item.origin.type === \"comment\" ? (\n          <>\n            <View style={[styles.level1, { borderColor: theme.secondaryText }]}>\n              <Text style={styles.name}>{item.origin.author.username}</Text>\n              <ContentDisplay\n                contentHtml={item.origin.content_html}\n                contentText={item.origin.content_text}\n              />\n            </View>\n            <View style={[styles.level2, { borderColor: theme.tint }]}>\n              <Text style={styles.name}>{item.reply.author.username}</Text>\n              <ContentDisplay\n                contentHtml={item.reply.content_html}\n                contentText={item.reply.content_text}\n              />\n            </View>\n          </>\n        ) : (\n          <>\n            <View style={[styles.level1, { borderColor: theme.tint }]}>\n              <Text style={styles.name}>{item.reply.author.username}</Text>\n              <ContentDisplay\n                contentHtml={item.reply.content_html}\n                contentText={item.reply.content_text}\n              />\n            </View>\n          </>\n        )}\n      </Pressable>\n    );\n  };\n\n  return (\n    <FlatList\n      style={styles.container}\n      data={notifications}\n      renderItem={renderItem}\n      keyExtractor={(item, index) => `${item.reply.id}-${index}`}\n      refreshing={isRefreshing}\n      onRefresh={() => {\n        setIsRefreshing(true);\n        setFocusId(i => i + 1);\n      }}\n    ></FlatList>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  item: { borderBottomWidth: 5, padding: 15 },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  level1: {\n    marginTop: 5,\n    borderLeftWidth: 2,\n    paddingLeft: 15,\n    padding: 5,\n  },\n  level2: {\n    marginTop: 5,\n    marginLeft: 15,\n    borderLeftWidth: 2,\n    paddingLeft: 15,\n    padding: 5,\n  },\n  name: {\n    fontWeight: \"600\",\n    marginBottom: 3,\n  },\n  thin: {\n    fontWeight: \"200\",\n  },\n});\n","import { lotideRequest } from \"./util\";\n\nexport async function getNotifications(\n  ctx: LotideContext,\n): Promise<UserNotification[]> {\n  return lotideRequest(ctx, \"GET\", \"users/~me/notifications\").then(data =>\n    data.json(),\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { Alert, Button, StyleSheet, TextInput } from \"react-native\";\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\n\nexport default function NewCommunityScreen({\n  navigation,\n}: RootStackScreenProps<\"NewCommunity\">) {\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  function submit() {\n    LotideService.newCommunity(ctx, name)\n      .then(async data => {\n        const id = data.community.id;\n        if (description) {\n          await LotideService.editCommunity(ctx, id, description);\n        }\n        await LotideService.followCommunity(ctx, id);\n        const community = await LotideService.getCommunity(ctx, id);\n        navigation.replace(\"Community\", { community });\n      })\n      .catch(e => Alert.alert(\"Failed to create community\", e));\n  }\n\n  return (\n    <View style={styles.root}>\n      <TextInput\n        style={[styles.input, { fontSize: 20, color: theme.text }]}\n        placeholder=\"Community Name\"\n        value={name}\n        onChangeText={setName}\n      />\n      {name.length >= 4 ? (\n        <>\n          <TextInput\n            style={[styles.input, { color: theme.text }]}\n            placeholder=\"Description (Optional)\"\n            value={description}\n            onChangeText={setDescription}\n          />\n          <Button\n            title=\"Submit\"\n            color={theme.tint}\n            onPress={submit}\n            accessibilityLabel=\"Create new community\"\n          />\n        </>\n      ) : (\n        <Text>{name.length > 0 && 4 - name.length}</Text>\n      )}\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"flex-start\",\n    padding: 15,\n    height: \"100%\",\n    width: \"100%\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    paddingVertical: 10,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  item: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginBottom: 1,\n  },\n});\n","import React, { useState } from \"react\";\nimport { RootStackScreenProps } from \"../types\";\nimport { Text, TextInput, View } from \"../components/Themed\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as LotideService from \"../services/LotideService\";\n\nexport default function ForgotPasswordScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"ForgotPassword\">) {\n  const [isAwaitingKey, setIsAwaitingKey] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [validKey, setValidKey] = useState<string>();\n  const [password, setPassword] = useState(\"\");\n  const theme = useTheme();\n\n  function submitEmail() {\n    if (!email)\n      return Alert.alert(\n        \"Email address required\",\n        \"An email with a password reset key will be emailed to you\",\n      );\n    LotideService.forgotPasswordRequestKey(\n      { apiUrl: `https://${route.params.node}/api/unstable` },\n      email,\n    )\n      .then(() => {\n        setIsAwaitingKey(true);\n      })\n      .catch(e => Alert.alert(\"Failed to send reset key\", e));\n  }\n\n  function submitPassword() {\n    if (!password) return Alert.alert(\"Password required\");\n    if (!validKey) return Alert.alert(\"No key\", \"Fail. This shouldn't happen\");\n    LotideService.forgotPasswordReset(\n      { apiUrl: `https://${route.params.node}/api/unstable` },\n      validKey,\n      password,\n    ).then(() => navigation.popToTop());\n  }\n\n  function keyChange(key: string) {\n    if (key.length < 6) return;\n    LotideService.forgotPasswordTestKey(\n      { apiUrl: `https://${route.params.node}/api/unstable` },\n      key,\n    ).then(() => setValidKey(key));\n  }\n\n  return (\n    <Pressable\n      style={{ flex: 1 }}\n      onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n    >\n      <KeyboardAvoidingView style={styles.root} behavior=\"padding\">\n        <Pressable>\n          <Text>{route.params.node}</Text>\n        </Pressable>\n        {!isAwaitingKey ? (\n          <>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Email Address\"\n              value={email}\n              onChangeText={setEmail}\n              keyboardType=\"email-address\"\n              textContentType=\"emailAddress\"\n              autoCompleteType=\"email\"\n              returnKeyType=\"go\"\n              autoCapitalize=\"none\"\n            />\n            <Button title=\"Submit\" onPress={submitEmail} color={theme.tint} />\n          </>\n        ) : (\n          <>\n            {validKey ? (\n              <>\n                <TextInput\n                  placeholder=\"New Password\"\n                  style={styles.input}\n                  value={password}\n                  onChangeText={setPassword}\n                  autoCapitalize=\"none\"\n                  secureTextEntry={true}\n                  textContentType=\"password\"\n                  autoCompleteType=\"password\"\n                />\n                <View style={styles.actionButtons}>\n                  <Button\n                    title=\"Go Back\"\n                    onPress={() => setIsAwaitingKey(false)}\n                    color={theme.secondaryTint}\n                  />\n                  <Button\n                    title=\"Submit\"\n                    onPress={submitPassword}\n                    color={theme.tint}\n                  />\n                </View>\n              </>\n            ) : (\n              <TextInput\n                placeholder=\"Key\"\n                style={styles.input}\n                onChangeText={keyChange}\n                autoCapitalize=\"none\"\n              />\n            )}\n          </>\n        )}\n      </KeyboardAvoidingView>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 30,\n  },\n  input: {\n    width: \"100%\",\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    marginTop: 15,\n  },\n  actionButtons: {\n    display: \"flex\",\n    width: \"100%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n});\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport React, { useState } from \"react\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { ActionSheetIOS, ColorSchemeName, Pressable } from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport {\n  RootStackParamList,\n  RootTabParamList,\n  RootTabScreenProps,\n} from \"../types\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\n\nimport FeedScreen from \"../screens/FeedScreen\";\nimport SearchScreen from \"../screens/SearchScreen\";\nimport ProfileScreen from \"../screens/ProfileScreen\";\nimport NewPostScreen from \"../screens/NewPostScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport CommunityScreen from \"../screens/CommunityScreen\";\nimport ReplyScreen from \"../screens/ReplyScreen\";\nimport ModalScreen from \"../screens/ModalScreen\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport NotificationScreen from \"../screens/NotificationScreen\";\nimport NewCommunityScreen from \"../screens/NewCommunity\";\nimport ForgotPasswordScreen from \"../screens/ForgotPasswordScreen\";\n\nexport default function Navigation({\n  colorScheme,\n}: {\n  colorScheme: ColorSchemeName;\n}) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n    >\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Root\"\n        component={BottomTabNavigator}\n        options={{ headerShown: false }}\n      />\n      <Stack.Screen name=\"Web\" component={ModalScreen} />\n      <Stack.Screen name=\"Post\" component={ModalScreen} />\n      <Stack.Screen name=\"Reply\" component={ReplyScreen} />\n      <Stack.Screen name=\"Community\" component={CommunityScreen} />\n      <Stack.Screen name=\"NewCommunity\" component={NewCommunityScreen} />\n      <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n      <Stack.Screen\n        name=\"ForgotPassword\"\n        component={ForgotPasswordScreen}\n        options={{ title: \"Forgot Password\" }}\n      />\n      <Stack.Screen\n        name=\"NotFound\"\n        component={NotFoundScreen}\n        options={{ title: \"Oops!\" }}\n      />\n      <Stack.Group screenOptions={{ presentation: \"modal\" }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator({ navigation }: any) {\n  const [sort, setSort] = useState<SortOption>(\"hot\");\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"FeedScreen\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint as unknown as string,\n        tabBarShowLabel: false,\n      }}\n    >\n      <BottomTab.Screen\n        name=\"FeedScreen\"\n        component={FeedScreen}\n        initialParams={{ sort }}\n        options={({ navigation }: RootTabScreenProps<\"FeedScreen\">) => ({\n          title: \"Hoot\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"newspaper-outline\" color={color} />\n          ),\n          headerRight: () => (\n            <Pressable\n              onPress={() => {\n                ActionSheetIOS.showActionSheetWithOptions(\n                  {\n                    options: [\"Cancel\", \"Hot\", \"New\"],\n                    title: \"Sort by:\",\n                    cancelButtonIndex: 0,\n                  },\n                  buttonIndex => {\n                    const newSort = [sort, \"hot\", \"new\"][\n                      buttonIndex\n                    ] as SortOption;\n                    setSort(newSort);\n                    navigation.navigate(\"FeedScreen\", { sort: newSort });\n                  },\n                );\n              }}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}\n            >\n              <Icon\n                name={\n                  { hot: \"flame-outline\", new: \"time-outline\" }[sort] as any\n                }\n                size={25}\n                color={Colors[colorScheme].tint}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"SearchScreen\"\n        component={SearchScreen}\n        options={{\n          title: \"Communities\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"search-outline\" color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"NewPostScreen\"\n        component={NewPostScreen}\n        options={{\n          title: \"New Post\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"add-outline\" color={color} size={40} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"NotificationScreen\"\n        component={NotificationScreen}\n        options={{\n          title: \"Notifications\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"notifications-outline\" color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{\n          title: \"Profile\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"person-circle-outline\" color={color} />\n          ),\n          headerLeft: () => (\n            <Pressable\n              onPress={() => {\n                navigation.navigate(\"Settings\");\n              }}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}\n            >\n              <Icon\n                name=\"cog-outline\"\n                size={25}\n                color={Colors[colorScheme].secondaryText}\n                style={{ marginLeft: 15 }}\n              />\n            </Pressable>\n          ),\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof Icon>[\"name\"];\n  color: string;\n  size?: number;\n}) {\n  return <Icon size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\nimport LotideContext, { defaultLotideContext } from \"./store/LotideContext\";\nimport * as StorageService from \"./services/StorageService\";\nimport * as LotideService from \"./services/LotideService\";\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n  const [ctx, setContext] = useState<LotideContext>(defaultLotideContext);\n\n  useEffect(() => {\n    StorageService.lotideContext.query().then(ctx => {\n      if (ctx !== undefined) {\n        setContext(ctx);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!ctx.apiUrl) return;\n    LotideService.getInstanceInfo(ctx)\n      .then(data => {\n        console.log(data);\n        if (!data.software.version.startsWith(\"0.9.\")) {\n          throw \"Bad version\";\n        }\n      })\n      .catch(() => {\n        StorageService.lotideContextKV\n          .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n          .then(() => applyNewContext({}));\n      });\n    if (!ctx.login) return;\n    LotideService.getUserData(ctx, ctx.login.user.id).catch(() => {\n      StorageService.lotideContextKV\n        .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n        .then(() => applyNewContext({}));\n    });\n  }, [ctx]);\n\n  function applyNewContext(ctx: LotideContext) {\n    StorageService.lotideContextKV\n      .store(ctx)\n      .then(() => AsyncStorage.setItem(\"@lotide_ctx\", JSON.stringify(ctx)))\n      .then(() => setContext(ctx));\n  }\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <LotideContext.Provider\n        value={{\n          ctx,\n          setContext: (ctx: LotideContext) => applyNewContext(ctx),\n        }}\n      >\n        <SafeAreaProvider>\n          <Navigation colorScheme={colorScheme} />\n          <StatusBar />\n        </SafeAreaProvider>\n      </LotideContext.Provider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}
{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","navigation/LinkingConfiguration.ts","hooks/useTheme.ts","components/Themed.tsx","hooks/useElapsedTime.ts","components/ElapsedTime.tsx","services/HapticService.ts","slices/postSlice.ts","services/LotideService/util.ts","services/LotideService/Community.ts","services/LotideService/Instance.ts","services/LotideService/Post.ts","services/LotideService/Reply.ts","services/LotideService/User.ts","hooks/useLotideCtx.ts","slices/replySlice.ts","hooks/useVote.ts","components/VoteCounter.tsx","components/ContentDisplay.tsx","components/ActorDisplay.tsx","hooks/usePost.ts","hooks/useHrefData.ts","components/HrefDisplay.tsx","components/PostDisplay.tsx","hooks/useFeed.ts","constants/KnownHosts.ts","services/StorageService.ts","slices/lotideSlice.ts","components/HostList.tsx","components/Login.tsx","components/SuggestLogin.tsx","components/SwipeAction.tsx","screens/FeedScreen.tsx","components/CommunityFinder.tsx","screens/SearchScreen.tsx","components/TappableList.tsx","screens/ProfileScreen.tsx","screens/NewPostScreen.tsx","screens/SettingsScreen/SettingsScreen.tsx","screens/CommunityScreen.tsx","screens/ReplyScreen.tsx","hooks/useReplies.ts","hooks/useReply.ts","components/RepliesDisplay.tsx","hooks/useSelectedReply.ts","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","screens/NotificationScreen.tsx","services/LotideService/Notification.ts","screens/NewCommunity.tsx","screens/ForgotPasswordScreen.tsx","screens/EditCommunityScreen.tsx","navigation/index.tsx","store/reduxStore.ts","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","PlatformColor","Platform","OS","require","light","buildIOS","tint","secondaryTint","text","secondaryText","placeholderText","background","secondaryBackground","tertiaryBackground","tabIconDefault","tabIconSelected","red","orange","yellow","green","teal","blue","indigo","purple","dark","linking","prefixes","Linking","config","screens","Root","TabOne","TabOneScreen","TabTwo","TabTwoScreen","Modal","NotFound","useTheme","colorScheme","Colors","Text","props","style","secondary","otherProps","theme","color","View","backgroundColor","TextInput","forwardRef","ref","placeholderTextColor","themeStyle","paddingHorizontal","paddingVertical","borderRadius","useElapsedTime","time","useMemo","seconds","Math","round","Date","now","parse","minutes","hours","days","weeks","months","years","calculateElapsedTime","ElapsedTime","elapsedTime","Pressable","hitSlop","onPress","Alert","alert","styles","root","name","size","StyleSheet","create","impactAsync","a","async","Haptics","postSlice","createSlice","initialState","posts","reducers","setPost","state","action","p","payload","post","id","setPostMulti","forEach","editPost","clearPosts","setPostVote","your_vote","vote","score","actions","lotideRequest","ctx","method","path","body","noLogin","apiUrl","login","token","fetch","headers","buildHeaders","undefined","JSON","stringify","then","res","ok","catch","e","console","error","Authorization","getCommunities","onlyFollowing","page","data","json","getCommunity","communityId","getUserData","userId","followCommunity","try_wait_for_accept","editCommunity","description","getInstanceInfo","apiVersion","parseInt","software","version","split","getPost","postId","transformVote","transformReply","reply","transformReplyMulti","replies","childIds","childData","items","map","next_page","flatMap","logout","useLotideCtx","useSelector","lotide","replySlice","setReply","setReplyMulti","editReply","clearReplies","setReplyVote","setSelectedReply","selectedReply","useVote","type","content","isUpvoted","dispatch","useDispatch","dispatchVote","addVote","LotideService","replyId","removeVote","VoteCounter","scoreColor","Light","hideCount","display","flexDirection","alignItems","cursor","fontSize","minWidth","ContentDisplay","useState","isTruncated","setIsTruncated","html","contentHtml","markdown","contentMarkdown","replace","trim","contentText","maxChars","RootComponent","value","renderNode","charCount","isSkip","node","index","siblings","parent","defaultRenderer","newCharCount","length","delta","x","substring","countedRenderNode","stylesheet","cite","fontStyle","del","textDecorationLine","textDecorationStyle","dfn","ins","samp","fontFamily","small","textComponentProps","onLinkLongPress","url","cancelable","includes","children","key","attribs","title","padding","borderLeftWidth","borderColor","paddingLeft","Details","width","alignSelf","borderBottomWidth","hairlineWidth","isOpen","setIsOpen","filter","toString","summary","realChildren","ActorDisplay","colorize","showHost","isUser","user","shouldDoIfLocal","when","local","shouldColorize","shouldShowHost","nameStyle","styleName","host","styleHost","newLine","fontWeight","React","memo","usePost","useEffect","useHrefData","href","substr","lastIndexOf","ext","match","imageUrl","ytMatch","linkUrl","isVideo","HrefDisplay","imgAspect","setImgAspect","hrefData","openLink","Medium","openURL","ImageBackground","image","aspectRatio","imageStyle","resizeMode","source","uri","onLoad","event","max","nativeEvent","height","playIcon","link","wideLink","marginHorizontal","justifyContent","shadowColor","shadowOpacity","shadowRadius","shadowOffset","PostDisplay","sticky","author","username","content_html","marginTop","content_text","truncateContent","foot","navigation","navigate","community","footItem","pointer","showAuthor","flex","created","footText","replies_count_total","item","marginVertical","paddingBottom","by","useFeed","params","postIds","setPostIds","setPage","nextPage","setNextPage","resetId","setResetId","sort","inYourFollows","join","ids","KnownHosts","domain","lotideContext","AsyncStorage","getItem","ctxStr","lotideContextKV","serviceKV","store","k","remove","storeStr","v","setItem","query","listKeys","Object","keys","voteSlice","setCtx","HostList","hostText","setHostText","knownHosts","setKnowHosts","existingProfiles","setExistingProfiles","h","i","d","hosts","h2","j","instanceInfo","object","entries","ScrollView","contentContainerStyle","subtitle","isUnlocked","hostName","find","onSelect","toLowerCase","marginRight","placeholder","onChangeText","onSubmitEditing","keyboardType","returnKeyType","enabled","content_markdown","renderItem","marginBottom","textAlign","Login","isRegistering","setIsRegistering","setUsername","password","setPassword","email","setEmail","usernameRef","useRef","passwordRef","useNavigation","fail","message","register","email_address","submit","Keyboard","dismiss","KeyboardAvoidingView","behavior","loginRegister","input","textContentType","autoCompleteType","current","focus","secureTextEntry","actionButtons","Button","onGoBack","SuggestLogin","setHostName","setDomain","container","SwipeAction","distanceToActivate","isScrolling","setIsScrolling","scroll","setScroll","isLeft","setIsLeft","isRight","setIsRight","isCommitted","setIsCommitted","dimensions","useWindowDimensions","setWidth","scrollRef","onLeftSide","onRightSide","onReturnToCenter","onLayout","layout","horizontal","snapToOffsets","snapToStart","snapToEnd","onScrollBeginDrag","onScrollEndDrag","scrollTo","contentOffset","y","onScroll","scrollEventThrottle","showsHorizontalScrollIndicator","overScrollMode","iconLeftSide","colorLeftSide","iconRightSide","colorRightSide","FeedScreen","route","loadNextPage","resetPosts","FlatList","keyExtractor","refreshing","onRefresh","onEndReachedThreshold","onEndReached","Item","isCommitting","setIsCommitting","onLongPress","Heavy","log","CommunityFinder","communities","setCommunities","filterText","setFilterText","communitiesToDisplay","onlyWhenTyping","c","focusId","you_are_moderator","your_follow","accepted","marginLeft","list","stickyHeaderIndices","ListHeaderComponent","borderTopWidth","SearchScreen","setFocusId","addListener","TappableList","icon","disabled","itemInner","borderTopColor","paddingRight","ProfileScreen","profile","setProfile","comingSoon","header","avatar","StorageService","followingTitle","altProfileButton","editView","margin","editViewText","editViewActionButtons","buttonView","separator","inputContainer","borderWidth","NewPostScreen","setCommunity","setTitle","setLink","setContent","TouchableWithoutFeedback","minHeight","multiline","accessibilityLabel","DATA","rows","CommunityScreen","refreshPosts","reloadId","setReloadId","ListHeader","buttons","borderBottomColor","isFollowing","ReplyScreen","setText","onFocus","scrollToEnd","animated","pop","useReplies","newReplies","useReply","RepliesDisplay","parentType","parentId","layer","highlightedReplies","layerColors","ReplyDisplay","paddingTop","showChildren","setShowChildren","useSelectedReply","flexWrap","button","s","ModalScreen","setHighlightedReplies","Share","share","StatusBar","currentHeight","NotFoundScreen","TouchableOpacity","linkText","NotificationScreen","notifications","setNotifications","isRefreshing","setIsRefreshing","unseen","notification","origin","comment","originReply","level1","level2","thin","NewCommunityScreen","setName","setDescription","ForgotPasswordScreen","isAwaitingKey","setIsAwaitingKey","validKey","setValidKey","autoCapitalize","newPassword","new_password","popToTop","Navigation","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","component","BottomTabNavigator","DrawerNavigator","options","headerShown","EditCommunityScreen","SettingsScreen","Group","screenOptions","presentation","BottomTab","createBottomTabNavigator","setSort","initialRouteName","tabBarActiveTintColor","tabBarShowLabel","initialParams","tabBarIcon","TabBarIcon","headerRight","ActionSheetIOS","showActionSheetWithOptions","cancelButtonIndex","buttonIndex","newSort","top","hot","new","opacity","pressed","headerLeft","Drawer","createDrawerNavigator","drawerActiveTintColor","drawerType","drawerIcon","configureStore","reducer","lotideReducer","postReducer","replyReducer","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","FontAwesome","font","warn","useCachedResources","applyNewContext","reduxStore","module","exports"],"mappings":"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","file":"static/js/app.639385ce.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import { ColorValue, Platform } from \"react-native\";\nconst PlatformColor =\n  Platform.OS === \"web\" ? () => {} : require(\"react-native\").PlatformColor;\n\nexport interface ColorsObject {\n  tint: ColorValue;\n  secondaryTint: ColorValue;\n  text: ColorValue;\n  secondaryText: ColorValue;\n  placeholderText: ColorValue;\n  background: ColorValue;\n  secondaryBackground: ColorValue;\n  tertiaryBackground: ColorValue;\n  tabIconDefault: ColorValue;\n  tabIconSelected: ColorValue;\n\n  red: ColorValue;\n  orange: ColorValue;\n  yellow: ColorValue;\n  green: ColorValue;\n  teal: ColorValue;\n  blue: ColorValue;\n  indigo: ColorValue;\n  purple: ColorValue;\n}\n\nexport default {\n  light: Platform.OS === \"ios\" ? buildIOS() : buildAltLight(),\n  dark: Platform.OS === \"ios\" ? buildIOS() : buildAltDark(),\n};\n\nfunction buildIOS(): ColorsObject {\n  return {\n    tint: PlatformColor(\"systemOrange\"),\n    secondaryTint: PlatformColor(\"systemPurple\"),\n    text: PlatformColor(\"label\"),\n    secondaryText: PlatformColor(\"secondaryLabel\"),\n    placeholderText: PlatformColor(\"placeholderText\"),\n    background: PlatformColor(\"systemBackground\"),\n    secondaryBackground: PlatformColor(\"secondarySystemBackground\"),\n    tertiaryBackground: PlatformColor(\"tertiarySystemBackground\"),\n    tabIconDefault: PlatformColor(\"secondaryLabel\"),\n    tabIconSelected: PlatformColor(\"systemOrange\"),\n\n    red: PlatformColor(\"systemRed\"),\n    orange: PlatformColor(\"systemOrange\"),\n    yellow: PlatformColor(\"systemYellow\"),\n    green: PlatformColor(\"systemGreen\"),\n    teal: PlatformColor(\"systemTeal\"),\n    blue: PlatformColor(\"systemBlue\"),\n    indigo: PlatformColor(\"systemIndigo\"),\n    purple: PlatformColor(\"systemPurple\"),\n  };\n}\n\nfunction buildAltLight(): ColorsObject {\n  return {\n    tint: \"orange\",\n    secondaryTint: \"purple\",\n    text: \"#111\",\n    secondaryText: \"#333\",\n    placeholderText: \"#444\",\n    background: \"#fff\",\n    secondaryBackground: \"#eee\",\n    tertiaryBackground: \"#ccc\",\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: \"orange\",\n\n    red: \"red\",\n    orange: \"orange\",\n    yellow: \"yellow\",\n    green: \"green\",\n    teal: \"eeal\",\n    blue: \"blue\",\n    indigo: \"indigo\",\n    purple: \"purple\",\n  };\n}\n\nfunction buildAltDark(): ColorsObject {\n  return {\n    tint: \"orange\",\n    secondaryTint: \"purple\",\n    text: \"#fff\",\n    secondaryText: \"#666\",\n    placeholderText: \"#aaa\",\n    background: \"#111\",\n    secondaryBackground: \"#222\",\n    tertiaryBackground: \"#222\",\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: \"orange\",\n\n    red: \"red\",\n    orange: \"orange\",\n    yellow: \"yellow\",\n    green: \"green\",\n    teal: \"eeal\",\n    blue: \"#68f\",\n    indigo: \"indigo\",\n    purple: \"purple\",\n  };\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","import Colors from \"../constants/Colors\";\nimport useColorScheme from \"./useColorScheme\";\n\nexport default function useTheme() {\n  const colorScheme = useColorScheme();\n  return Colors[colorScheme];\n}\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport React, { forwardRef } from \"react\";\nimport {\n  ColorValue,\n  Text as DefaultText,\n  View as DefaultView,\n  TextInput as DefaultTextInput,\n} from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport function useThemeColor(\n  props: { light?: ColorValue; dark?: ColorValue },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark,\n): ColorValue {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  secondary?: boolean;\n  tint?: boolean;\n};\n\nexport type TextProps = ThemeProps & DefaultText[\"props\"];\nexport type ViewProps = ThemeProps & DefaultView[\"props\"];\n\nexport function Text(props: TextProps) {\n  const { style, secondary, tint, ...otherProps } = props;\n  const theme = useTheme();\n  const color =\n    !secondary && !tint\n      ? theme.text\n      : secondary && !tint\n      ? theme.secondaryText\n      : tint && !secondary\n      ? theme.tint\n      : theme.secondaryTint;\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, ...otherProps } = props;\n  const backgroundColor = useTheme().background;\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n\nexport const TextInput = forwardRef<\n  DefaultTextInput,\n  DefaultTextInput[\"props\"]\n>((props: DefaultTextInput[\"props\"], ref) => {\n  const { style, placeholderTextColor, ...otherProps } = props;\n  const theme = useTheme();\n\n  const themeStyle = {\n    backgroundColor: theme.secondaryBackground,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 8,\n    color: theme.text,\n  };\n  return (\n    <DefaultTextInput\n      ref={ref}\n      style={[themeStyle, style]}\n      placeholderTextColor={placeholderTextColor || theme.placeholderText}\n      {...otherProps}\n    />\n  );\n});\n","import { useMemo } from \"react\";\n\nexport default function useElapsedTime(time: string): string {\n  return useMemo(() => calculateElapsedTime(time), [time]);\n}\n\nexport function calculateElapsedTime(time: string): string {\n  const seconds = Math.round((Date.now() - Date.parse(time)) / 1000);\n  const minutes = Math.round(seconds / 60);\n  const hours = Math.round(minutes / 60);\n  const days = Math.round(hours / 24);\n  const weeks = Math.round(days / 7);\n  const months = Math.round(days / 30.4);\n  const years = Math.round(days / 365);\n  const displayTime =\n    (minutes < 60 && `${minutes}min`) ||\n    (hours < 24 && `${hours}h`) ||\n    (days < 7 && `${days}d`) ||\n    (weeks < 5 && `${weeks}w`) ||\n    (months < 12 && `${months}mo`) ||\n    `${years}y`;\n  return displayTime;\n}\n","import { Ionicons as Icon } from \"@expo/vector-icons\";\nimport React from \"react\";\nimport { Alert, Pressable, StyleSheet } from \"react-native\";\nimport { Text } from \"./Themed\";\nimport useElapsedTime from \"../hooks/useElapsedTime\";\n\nexport interface ElapsedTimeProps {\n  time: string;\n}\n\nexport default function ElapsedTime(props: ElapsedTimeProps) {\n  const elapsedTime = useElapsedTime(props.time);\n  return (\n    <Pressable\n      hitSlop={8}\n      onPress={() => Alert.alert(\"Date posted\", props.time)}\n    >\n      <Text style={styles.root}>\n        <Icon name=\"time-outline\" size={14} /> {elapsedTime}\n      </Text>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {},\n});\n","import { Platform } from \"react-native\";\nimport * as Haptics from \"expo-haptics\";\n\nexport { ImpactFeedbackStyle } from \"expo-haptics\";\n\nexport async function impactAsync(style: Haptics.ImpactFeedbackStyle) {\n  if (Platform.OS === \"web\") return;\n  await Haptics.impactAsync(style);\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface PostState {\n  posts: { [key: PostId]: Post };\n}\n\nconst initialState: PostState = { posts: {} };\n\nexport const postSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    setPost: (state, action: PayloadAction<{ post: Post }>) => {\n      const p = action.payload;\n      state.posts[p.post.id] = p.post;\n    },\n    setPostMulti: (state, action: PayloadAction<{ posts: Post[] }>) => {\n      action.payload.posts.forEach(post => {\n        state.posts[post.id] = post;\n      });\n    },\n    editPost: (\n      state,\n      action: PayloadAction<{\n        id: PostId;\n        post: Partial<Post>;\n      }>,\n    ) => {\n      const p = action.payload;\n      const post = state.posts[p.id];\n      state.posts[p.id] = {\n        ...post,\n        ...p.post,\n      };\n    },\n    clearPosts: state => {\n      state.posts = {};\n    },\n    setPostVote: (\n      state,\n      action: PayloadAction<{ id: PostId; vote: boolean }>,\n    ) => {\n      const p = action.payload;\n      const post = state.posts[p.id];\n      if (post.your_vote !== p.vote) {\n        post.your_vote = p.vote;\n        if (p.vote) {\n          post.score += 1;\n        } else {\n          post.score -= 1;\n        }\n      }\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setPost, setPostMulti, editPost, clearPosts, setPostVote } =\n  postSlice.actions;\n\nexport default postSlice.reducer;\n","export type RequestMethod = \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n\nexport function hasLogin(ctx: LotideContext): boolean {\n  return !!ctx.apiUrl && !!ctx.login;\n}\n\nexport async function lotideRequest(\n  ctx: LotideContext,\n  method: RequestMethod,\n  path: string,\n  body?: any,\n  noLogin: boolean = false,\n): Promise<any | undefined> {\n  if (!ctx.apiUrl) throw \"No API url\";\n  if (!noLogin && !ctx.login?.token) throw \"Not logged in\";\n  return fetch(`${ctx.apiUrl}/${path}`, {\n    method,\n    headers: buildHeaders(ctx),\n    body: body !== undefined ? JSON.stringify(body) : undefined,\n  })\n    .then(async res => {\n      if (res.ok) {\n        return res;\n      } else {\n        throw await res.text();\n      }\n    })\n    .catch(e => {\n      console.error(\n        `Lotide Service Error: ${method} ${ctx.apiUrl}/${path}\\n${e}`,\n        ctx,\n      );\n      throw e;\n    });\n}\n\nexport function buildHeaders(ctx: LotideContext): HeadersInit | undefined {\n  return ctx.login !== undefined\n    ? {\n        Authorization: `Bearer ${ctx.login.token}`,\n        \"Content-Type\": \"application/json\",\n      }\n    : undefined;\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getCommunities(\n  ctx: LotideContext,\n  onlyFollowing: boolean = false,\n  page?: string,\n): Promise<Paged<Community>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `communities?include_your=true&limit=100${\n      onlyFollowing ? \"&your_follow.accepted=true\" : \"\"\n    }${page ? `&page=${page}` : \"\"}`,\n  )\n    .then(data => data.json())\n    .then(data => {\n      return data;\n    });\n}\n\nexport async function getCommunity(\n  ctx: LotideContext,\n  communityId: CommunityId,\n): Promise<Community> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `communities/${communityId}?include_your=true`,\n  ).then(data => data.json());\n}\n\nexport async function getUserData(ctx: LotideContext, userId: number) {\n  return lotideRequest(ctx, \"GET\", `users/${userId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function followCommunity(\n  ctx: LotideContext,\n  communityId: number,\n): Promise<{ accepted: boolean }> {\n  return lotideRequest(ctx, \"POST\", `communities/${communityId}/follow`, {\n    try_wait_for_accept: true,\n  }).then(data => data.json());\n}\n\nexport async function unfollowCommunity(\n  ctx: LotideContext,\n  communityId: number,\n) {\n  return lotideRequest(ctx, \"POST\", `communities/${communityId}/unfollow`);\n}\n\nexport async function newCommunity(\n  ctx: LotideContext,\n  name: string,\n): Promise<{ community: { id: CommunityId } }> {\n  return lotideRequest(ctx, \"POST\", \"communities\", { name }).then(data =>\n    data.json(),\n  );\n}\n\nexport async function editCommunity(\n  ctx: LotideContext,\n  id: CommunityId,\n  description: string,\n) {\n  return lotideRequest(ctx, \"PATCH\", `communities/${id}`, { description });\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getInstanceInfo(\n  ctx: LotideContext,\n): Promise<InstanceInfo> {\n  return lotideRequest(ctx, \"GET\", \"instance\", undefined, true)\n    .then(data => data.json())\n    .then(data => {\n      const apiVersion = parseInt(data.software.version.split(\".\")[1]);\n      return {\n        ...data,\n        apiVersion,\n      };\n    });\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getPost(\n  ctx: LotideContext,\n  postId: PostId,\n): Promise<Post> {\n  return lotideRequest(ctx, \"GET\", `posts/${postId}`, undefined, true)\n    .then(data => data.json())\n    .then(transformVote);\n}\n\nexport async function getPosts(\n  ctx: LotideContext,\n  page: string | null,\n  sort: SortOption = \"hot\",\n  inYourFollows?: boolean,\n  communityId?: CommunityId,\n): Promise<Paged<Post>> {\n  const url = [\n    page === null ? `posts?sort=${sort}` : `posts?page=${page}&sort=${sort}`,\n    `include_your=true`,\n    inYourFollows !== undefined && `in_your_follows=${inYourFollows}`,\n    communityId && `community=${communityId}`,\n  ]\n    .filter(x => x)\n    .join(\"&\");\n  return lotideRequest(ctx, \"GET\", url)\n    .then(data => data.json())\n    .then(data => ({ ...data, items: data.items.map(transformVote) }));\n}\n\nexport async function submitPost(\n  ctx: LotideContext,\n  post: NewPost,\n): Promise<{ id: PostId }> {\n  return lotideRequest(ctx, \"POST\", \"posts\", post).then(data => data.json());\n}\n\nexport async function applyVote(ctx: LotideContext, postId: PostId) {\n  return lotideRequest(ctx, \"PUT\", `posts/${postId}/your_vote`);\n}\n\nexport async function removeVote(ctx: LotideContext, postId: PostId) {\n  return lotideRequest(ctx, \"DELETE\", `posts/${postId}/your_vote`);\n}\n\nexport function transformVote(post: Readonly<Post>): Post {\n  if (post.your_vote !== undefined) {\n    return {\n      ...post,\n      your_vote: post.your_vote !== null,\n    };\n  } else {\n    return post;\n  }\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function getReply(\n  ctx: LotideContext,\n  replyId: ReplyId,\n): Promise<Reply[]> {\n  return lotideRequest(ctx, \"GET\", `comments/${replyId}`, undefined, true)\n    .then(data => data.json())\n    .then(transformReply);\n}\n\nexport async function getRawReply(\n  ctx: LotideContext,\n  replyId: ReplyId,\n): Promise<RawReply> {\n  return lotideRequest(ctx, \"GET\", `comments/${replyId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function getPostReplies(\n  ctx: LotideContext,\n  postId: PostId,\n  page?: string,\n): Promise<[Paged<ReplyId> | undefined, Reply[]]> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `posts/${postId}/replies?limit=10&include_your=true` +\n      (page ? `&page=${page}` : \"\"),\n  )\n    .then(data => data.json())\n    .then(transformReplyMulti);\n}\n\nexport async function getReplyReplies(\n  ctx: LotideContext,\n  replyId: ReplyId,\n  page?: string,\n): Promise<[Paged<ReplyId> | undefined, Reply[]]> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `comments/${replyId}/replies?limit=10&include_your=true&sort=hot` +\n      (page ? `&page=${page}` : \"\"),\n  )\n    .then(data => data.json())\n    .then(transformReplyMulti);\n}\n\nexport async function replyToPost(\n  ctx: LotideContext,\n  postId: PostId,\n  content: string,\n): Promise<{ id: ReplyId }> {\n  return lotideRequest(ctx, \"POST\", `posts/${postId}/replies`, {\n    content_markdown: content,\n  }).then(data => data.json());\n}\n\nexport async function replyToReply(\n  ctx: LotideContext,\n  replyId: ReplyId,\n  content: string,\n): Promise<{ id: ReplyId }> {\n  return lotideRequest(ctx, \"POST\", `comments/${replyId}/replies`, {\n    content_markdown: content,\n  }).then(data => data.json());\n}\n\nexport async function applyReplyVote(ctx: LotideContext, replyId: ReplyId) {\n  return lotideRequest(ctx, \"PUT\", `comments/${replyId}/your_vote`);\n}\n\nexport async function removeReplyVote(ctx: LotideContext, replyId: ReplyId) {\n  return lotideRequest(ctx, \"DELETE\", `comments/${replyId}/your_vote`);\n}\n\ntype RawReply = Omit<Omit<Reply, \"replies\">, \"your_vote\"> & {\n  replies: Paged<RawReply> | null;\n  your_vote?: {} | null;\n};\n\nexport function transformReply(reply: Readonly<RawReply>): Reply[] {\n  const replies = reply.replies;\n\n  const [childIds, childData] = transformReplyMulti(replies || undefined);\n\n  const newReply: Reply = {\n    ...reply,\n    replies: childIds,\n    your_vote: reply.your_vote !== null && reply.your_vote !== undefined,\n  };\n\n  return [newReply, ...childData];\n}\n\nexport function transformReplyMulti(\n  replies?: Readonly<Paged<RawReply>>,\n): [Paged<ReplyId> | undefined, Reply[]] {\n  if (!replies) return [undefined, []];\n  return [\n    {\n      items: replies.items.map(reply => reply.id),\n      next_page: replies.next_page,\n    },\n    replies.items.flatMap(transformReply),\n  ];\n}\n","import { lotideRequest } from \"./util\";\n\nexport async function login(\n  apiUrl: string,\n  username: string,\n  password: string,\n): Promise<Login> {\n  return lotideRequest(\n    { apiUrl },\n    \"POST\",\n    \"logins\",\n    { username, password },\n    true,\n  ).then(data => data.json());\n}\n\nexport async function register(\n  apiUrl: string,\n  username: string,\n  password: string,\n  email?: string,\n): Promise<Login> {\n  return lotideRequest(\n    { apiUrl },\n    \"POST\",\n    \"users\",\n    {\n      username,\n      password,\n      email_address: email,\n      login: true,\n    },\n    true,\n  ).then(data => data.json());\n}\n\nexport async function logout(ctx: LotideContext) {\n  return lotideRequest(ctx, \"DELETE\", \"logins/~current\");\n}\n\nexport async function forgotPasswordRequestKey(\n  ctx: LotideContext,\n  email: string,\n) {\n  return lotideRequest(\n    ctx,\n    \"POST\",\n    \"forgot_password/keys\",\n    {\n      email_address: email,\n    },\n    true,\n  );\n}\n\nexport async function forgotPasswordTestKey(ctx: LotideContext, key: string) {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `forgot_password/keys/${key}`,\n    undefined,\n    true,\n  );\n}\n\nexport async function forgotPasswordReset(\n  ctx: LotideContext,\n  key: string,\n  newPassword: string,\n) {\n  return lotideRequest(\n    ctx,\n    \"POST\",\n    `forgot_password/keys/${key}/reset`,\n    { new_password: newPassword },\n    true,\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport { RootState } from \"../store/reduxStore\";\n\nexport function useLotideCtx() {\n  const ctx = useSelector((state: RootState) => state.lotide.ctx);\n  return ctx;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface ReplyState {\n  replies: { [key: ReplyId]: Reply };\n  selectedReply?: ReplyId;\n}\n\nconst initialState: ReplyState = { replies: {} };\n\nexport const replySlice = createSlice({\n  name: \"replies\",\n  initialState,\n  reducers: {\n    setReply: (state, action: PayloadAction<{ reply: Reply }>) => {\n      const p = action.payload;\n      state.replies[p.reply.id] = p.reply;\n    },\n    setReplyMulti: (state, action: PayloadAction<{ replies: Reply[] }>) => {\n      action.payload.replies.forEach(reply => {\n        state.replies[reply.id] = reply;\n      });\n    },\n    editReply: (\n      state,\n      action: PayloadAction<{\n        id: ReplyId;\n        reply: Partial<Reply>;\n      }>,\n    ) => {\n      const p = action.payload;\n      const reply = state.replies[p.id];\n      state.replies[p.id] = {\n        ...reply,\n        ...p.reply,\n      };\n    },\n    clearReplies: state => {\n      state.replies = {};\n    },\n    setReplyVote: (\n      state,\n      action: PayloadAction<{ id: PostId; vote: boolean }>,\n    ) => {\n      const p = action.payload;\n      const post = state.replies[p.id];\n      if (post.your_vote !== p.vote) {\n        post.your_vote = p.vote;\n        if (p.vote) {\n          post.score += 1;\n        } else {\n          post.score -= 1;\n        }\n      }\n    },\n    setSelectedReply: (state, action: PayloadAction<ReplyId | undefined>) => {\n      state.selectedReply = action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  setReply,\n  setReplyMulti,\n  editReply,\n  clearReplies,\n  setReplyVote,\n  setSelectedReply,\n} = replySlice.actions;\n\nexport default replySlice.reducer;\n","import { useDispatch } from \"react-redux\";\nimport { setPostVote } from \"../slices/postSlice\";\nimport { AppDispatch } from \"../store/reduxStore\";\nimport * as LotideService from \"../services/LotideService\";\nimport { useLotideCtx } from \"./useLotideCtx\";\nimport { setReplyVote } from \"../slices/replySlice\";\n\nexport default function useVote(type: ContentType, content: Post | Reply) {\n  const isUpvoted = !!content.your_vote;\n  const dispatch = useDispatch<AppDispatch>();\n  const ctx = useLotideCtx();\n\n  function dispatchVote(vote: boolean) {\n    if (type == \"post\") {\n      dispatch(setPostVote({ id: content.id, vote }));\n    } else {\n      dispatch(setReplyVote({ id: content.id, vote }));\n    }\n  }\n\n  function addVote() {\n    if (!ctx?.login) return;\n    if (type == \"post\") {\n      LotideService.applyVote(ctx, content.id).then(() => dispatchVote(true));\n    } else {\n      LotideService.applyReplyVote(ctx, content.id).then(() =>\n        dispatchVote(true),\n      );\n    }\n  }\n\n  function removeVote() {\n    if (!ctx?.login) return;\n    if (type == \"post\") {\n      LotideService.removeVote(ctx, content.id).then(() => dispatchVote(false));\n    } else {\n      LotideService.removeReplyVote(ctx, content.id).then(() =>\n        dispatchVote(false),\n      );\n    }\n  }\n\n  return {\n    isUpvoted,\n    addVote,\n    removeVote,\n  };\n}\n","import { Ionicons as Icon } from \"@expo/vector-icons\";\nimport React from \"react\";\nimport {\n  Alert,\n  Platform,\n  Pressable,\n  StyleSheet,\n  ViewStyle,\n} from \"react-native\";\nimport { View, Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport useVote from \"../hooks/useVote\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\n\nexport interface VoteCounterProps {\n  content: Post | Reply;\n  type: ContentType;\n  hideCount?: boolean;\n  style?: ViewStyle;\n  onVote?: (isUpvote: boolean) => void;\n}\n\nexport default function VoteCounter(props: VoteCounterProps) {\n  const theme = useTheme();\n  const ctx = useLotideCtx();\n  const { isUpvoted, addVote, removeVote } = useVote(props.type, props.content);\n\n  function toggleVote() {\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n\n    if (!ctx?.login) {\n      Alert.alert(\n        \"Login to like\",\n        \"Leave a like when you login to a community\",\n      );\n      return;\n    }\n\n    if (isUpvoted) {\n      removeVote();\n    } else {\n      addVote();\n    }\n  }\n\n  const scoreColor = isUpvoted ? theme.red : theme.text;\n\n  return (\n    <Pressable\n      onPress={() => toggleVote()}\n      hitSlop={7}\n      style={[styles.root, props.style]}\n    >\n      <View style={styles.root}>\n        <Icon\n          name={isUpvoted ? \"heart\" : \"heart-outline\"}\n          color={scoreColor}\n          size={25}\n        />\n        {!props.hideCount && (\n          <Text\n            style={{ ...styles.score, color: scoreColor }}\n          >{`  ${props.content.score}  `}</Text>\n        )}\n      </View>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    ...(Platform.OS == \"web\" ? { cursor: \"pointer\" } : {}),\n  },\n  score: {\n    fontSize: 18,\n    minWidth: 28,\n  },\n});\n","import React, { ReactNode, useMemo, useState } from \"react\";\nimport { Text, View } from \"react-native\";\nimport { Platform, Pressable, StyleSheet } from \"react-native\";\nimport HTMLView, { HTMLViewNode } from \"react-native-htmlview\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport useTheme from \"../hooks/useTheme\";\nimport { Alert } from \"react-native\";\nimport { ColorsObject } from \"../constants/Colors\";\n\nexport interface ContentDisplayProps {\n  contentHtml?: string;\n  contentText?: string;\n  contentMarkdown?: string;\n  maxChars?: number;\n  postId?: PostId;\n}\n\nexport default function ContentDisplay(props: ContentDisplayProps) {\n  const [isTruncated, setIsTruncated] = useState(false);\n  const theme = useTheme();\n  const html = useMemo(\n    () =>\n      props.contentHtml ||\n      parseMarkdown(props.contentMarkdown) ||\n      `<p>${props.contentText}</p>`,\n    [props.contentHtml, props.contentMarkdown, props.contentText],\n  );\n\n  const maxChars = props.maxChars;\n\n  const countedRenderNode = () => {\n    let charCount = 0;\n    let isSkip = false;\n    return (\n      node: HTMLViewNode,\n      index: number,\n      siblings: HTMLViewNode,\n      parent: HTMLViewNode,\n      defaultRenderer: (node: HTMLViewNode, parent: HTMLViewNode) => ReactNode,\n    ) => {\n      if (!maxChars)\n        return renderNode(theme)(\n          node,\n          index,\n          siblings,\n          parent,\n          defaultRenderer,\n        );\n      if (isSkip) return undefined;\n      if (charCount >= maxChars) return null;\n      if (node.name === undefined && node.data && charCount < maxChars) {\n        let newCharCount = charCount + node.data.length;\n        if (newCharCount >= maxChars && charCount < maxChars) {\n          const delta = maxChars - charCount;\n          charCount = newCharCount;\n          isSkip = true;\n          const x = defaultRenderer(\n            [\n              { ...node, data: node.data.substring(0, delta) + \"...\" },\n            ] as any as HTMLViewNode,\n            parent,\n          );\n          isSkip = false;\n          setIsTruncated(true);\n          return x;\n        }\n        charCount = newCharCount;\n      }\n      return renderNode(theme)(node, index, siblings, parent, defaultRenderer);\n    };\n  };\n\n  return (\n    <View>\n      <HTMLView\n        RootComponent={props => <Text {...props} />}\n        value={html.replace(/\\n/g, \"\")}\n        renderNode={countedRenderNode()}\n        stylesheet={{\n          a: { color: theme.secondaryTint },\n          cite: { fontStyle: \"italic\" },\n          del: {\n            textDecorationLine: \"line-through\",\n            textDecorationStyle: \"solid\",\n          },\n          dfn: { fontStyle: \"italic\" },\n          ins: { textDecorationLine: \"underline\" },\n          samp: { fontFamily: Platform.OS === \"ios\" ? \"Menlo\" : \"monospace\" },\n          small: { fontSize: 10 },\n        }}\n        textComponentProps={{\n          style: {\n            color: theme.text,\n          },\n        }}\n        onLinkLongPress={url =>\n          Alert.alert(\"Link\", url, undefined, { cancelable: true })\n        }\n      />\n      {isTruncated && (\n        <Text style={{ color: theme.secondaryText, paddingVertical: 15 }}>\n          Read More\n        </Text>\n      )}\n    </View>\n  );\n}\n\nconst renderNode =\n  (theme: ColorsObject) =>\n  (\n    node: HTMLViewNode,\n    index: number,\n    siblings: HTMLViewNode,\n    parent: HTMLViewNode,\n    defaultRenderer: (node: HTMLViewNode, parent: HTMLViewNode) => ReactNode,\n  ) => {\n    if ([\"iframe\", \"script\"].includes(node.name || \"\")) {\n      return null;\n    }\n\n    function children() {\n      return defaultRenderer((node as any).children, parent);\n    }\n\n    switch (node.name) {\n      case \"abbr\":\n        return (\n          <Pressable\n            key={index}\n            onPress={() => Alert.alert(\"Abbr.\", node.attribs.title)}\n          >\n            <Text\n              style={{\n                textDecorationLine: \"underline\",\n                textDecorationStyle: \"dotted\",\n              }}\n            >\n              {children()}\n            </Text>\n          </Pressable>\n        );\n      case \"blockquote\":\n        return (\n          <Text key={index}>\n            <View style={{ padding: 10 }}>\n              <View\n                style={{\n                  borderLeftWidth: 2,\n                  borderColor: theme.secondaryText,\n                  paddingLeft: 10,\n                  paddingVertical: 5,\n                }}\n              >\n                {children()}\n              </View>\n            </View>\n            {\"\\n\"}\n          </Text>\n        );\n      case \"details\":\n        return (\n          <Details key={index}>{children() as React.ReactChild[]}</Details>\n        );\n      case \"dl\":\n      case \"dt\":\n      case \"dd\":\n        return (\n          <Text key={index}>\n            {children()}\n            {\"\\n\"}\n          </Text>\n        );\n      case \"figure\":\n        return <View key={index}>{children()}</View>;\n      case \"hr\":\n        return (\n          <View\n            key={index}\n            style={{\n              width: 200,\n              alignSelf: \"stretch\",\n              borderBottomWidth: StyleSheet.hairlineWidth || 1,\n              borderColor: theme.secondaryText,\n            }}\n          />\n        );\n      case \"kbd\":\n        return (\n          <Text\n            key={index}\n            style={{ backgroundColor: theme.tertiaryBackground }}\n          >\n            {\" \"}\n            {children()}{\" \"}\n          </Text>\n        );\n      case \"img\":\n        return <Text key={index}>[Image not displayed]</Text>;\n      case \"li\":\n        return (\n          <Text key={index}>\n            {\"\\u2022 \"}\n            {children()}\n            {\"\\n\"}\n          </Text>\n        );\n      case \"sub\":\n        return (\n          <Text key={index} style={{ fontSize: 10 }}>\n            {children()}\n          </Text>\n        );\n      case \"summary\":\n        return <Text key={index}>{children()}</Text>;\n      case \"sup\":\n        return (\n          <View key={index}>\n            <Text style={{ fontSize: 10 }}>{children()}</Text>\n          </View>\n        );\n      default:\n        return undefined;\n    }\n  };\n\nfunction parseMarkdown(markdown?: string): string | undefined {\n  if (!markdown) return undefined;\n  return markdown\n    .replace(/^### (.*$)/gim, \"<h3>$1</h3>\")\n    .replace(/^## (.*$)/gim, \"<h2>$1</h2>\")\n    .replace(/^# (.*$)/gim, \"<h1>$1</h1>\")\n    .replace(/^\\> (.*$)/gim, \"<blockquote>$1</blockquote>\")\n    .replace(/\\*\\*(.*)\\*\\*/gim, \"<b>$1</b>\")\n    .replace(/\\*(.*)\\*/gim, \"<i>$1</i>\")\n    .replace(/!\\[(.*?)\\]\\((.*?)\\)/gim, \"<img alt='$1' src='$2' />\")\n    .replace(/\\[(.*?)\\]\\((.*?)\\)/gim, \"<a href='$2'>$1</a>\")\n    .replace(/\\n$/gim, \"<br />\")\n    .trim();\n}\n\nfunction Details({ children }: { children: React.ReactChild[] }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const theme = useTheme();\n\n  const [summary, ...realChildren] = children.filter(\n    (x: any) => x?.props?.children?.toString().trim() !== \"\",\n  );\n\n  return (\n    <View>\n      <Pressable hitSlop={5} onPress={() => setIsOpen(x => !x)}>\n        <Text style={{ color: theme.secondaryTint }}>\n          {isOpen ? (\n            <Icon name=\"chevron-down-outline\" />\n          ) : (\n            <Icon name=\"chevron-forward-outline\" />\n          )}\n          {summary}\n        </Text>\n      </Pressable>\n      {isOpen && realChildren}\n    </View>\n  );\n}\n","import React from \"react\";\nimport { StyleProp, StyleSheet, TextStyle } from \"react-native\";\nimport { Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\n\nexport interface ActorDisplayProps {\n  name: string;\n  host: string;\n  local: boolean;\n  colorize?: \"always\" | \"never\" | \"only_foreign\";\n  showHost?: \"always\" | \"never\" | \"only_foreign\";\n  newLine?: boolean;\n  style?: StyleProp<TextStyle>;\n  styleName?: StyleProp<TextStyle>;\n  styleHost?: StyleProp<TextStyle>;\n  userId?: UserId;\n}\n\nexport function ActorDisplay(props: ActorDisplayProps) {\n  const theme = useTheme();\n  const ctx = useLotideCtx();\n  const colorize = props.colorize || \"never\";\n  const showHost = props.showHost || \"only_foreign\";\n\n  const isUser: boolean =\n    (props.userId && props.userId == ctx?.login?.user.id) || false;\n\n  const shouldDoIfLocal = (\n    when: \"always\" | \"never\" | \"only_foreign\",\n    local: boolean,\n  ) => {\n    if (when === \"always\") return true;\n    if (when === \"never\") return false;\n    return !local;\n  };\n\n  const shouldColorize = shouldDoIfLocal(colorize, props.local);\n  const shouldShowHost = shouldDoIfLocal(showHost, props.local);\n\n  const nameStyle = isUser\n    ? { color: theme.secondaryTint }\n    : shouldColorize\n    ? { color: props.local ? theme.blue : theme.green }\n    : {};\n\n  return (\n    <Text style={[styles.root, props.style]}>\n      <Text style={[styles.name, nameStyle, props.styleName]}>\n        {props.name}\n      </Text>\n      {shouldShowHost && (\n        <Text\n          style={[styles.host, { color: theme.secondaryText }, props.styleHost]}\n        >\n          {props.newLine && \"\\n\"}\n          {!props.newLine && \"@\"}\n          {props.host}\n        </Text>\n      )}\n      {isUser && (\n        <Text\n          style={[styles.host, { color: theme.secondaryText }, props.styleHost]}\n        >\n          {\" (you)\"}\n        </Text>\n      )}\n    </Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {},\n  name: {\n    fontWeight: \"500\",\n  },\n  host: {\n    fontWeight: \"200\",\n  },\n});\n\nexport default React.memo(ActorDisplay);\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../store/reduxStore\";\nimport * as LotideService from \"../services/LotideService\";\nimport { useLotideCtx } from \"./useLotideCtx\";\nimport { setPost } from \"../slices/postSlice\";\n\nexport default function usePost(postId: PostId): Post | undefined {\n  const dispatch = useDispatch();\n  const ctx = useLotideCtx();\n  const post: Post | undefined = useSelector(\n    (state: RootState) => state.posts.posts[postId],\n  );\n\n  useEffect(() => {\n    if (!ctx) return;\n    if (!post) {\n      LotideService.getPost(ctx, postId).then(post => {\n        dispatch(setPost({ post }));\n      });\n    }\n  }, [post?.id]);\n\n  return post;\n}\n","import { useMemo } from \"react\";\n\n/**\n * This hook will return multiple times as its answer becomes more accurate\n *\n * Much of the data needs to be fetched from third parties\n */\nexport default function useHrefData(href: string): HrefData {\n  const hrefData = useMemo<HrefData>(() => {\n    // Plain image\n    if (isImageUrl(href)) {\n      return { imageUrl: href };\n    }\n\n    // YouTube\n    const ytRegx =\n      /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\n    const ytMatch = href.match(ytRegx);\n    if (ytMatch) {\n      return {\n        imageUrl: `https://img.youtube.com/vi/${ytMatch[1]}/mqdefault.jpg`,\n        linkUrl: href,\n        isVideo: true,\n      };\n    }\n\n    // Just a link\n    return { linkUrl: href };\n  }, [href]);\n\n  return hrefData;\n}\n\nfunction isImageUrl(url?: string): boolean {\n  if (!url) return false;\n  return (\n    [\".png\", \".jpg\", \".jpeg\", \".bmp\", \".gif\", \".webp\"].includes(ext(url)) ||\n    !!url.match(/https:\\/\\/.*\\/api\\/stable\\/posts\\/.*\\/href/)\n  );\n}\n\nfunction ext(url: string): string {\n  return (url = url.substr(1 + url.lastIndexOf(\"/\")).split(\"?\")[0])\n    .split(\"#\")[0]\n    .substr(url.lastIndexOf(\".\"));\n}\n","import React, { useState } from \"react\";\nimport { Platform, Pressable, StyleSheet, ImageBackground } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { Text } from \"./Themed\";\nimport * as Haptics from \"../services/HapticService\";\nimport { openURL } from \"expo-linking\";\nimport useTheme from \"../hooks/useTheme\";\nimport useHrefData from \"../hooks/useHrefData\";\n\nexport default function HrefDisplay({ href }: { href: string }) {\n  const [imgAspect, setImgAspect] = useState(1);\n  const hrefData = useHrefData(href);\n  const theme = useTheme();\n\n  function openLink() {\n    if (hrefData.linkUrl) {\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n      openURL(hrefData.linkUrl);\n    }\n  }\n\n  return (\n    <>\n      {!!hrefData.imageUrl && (\n        <ImageBackground\n          style={[\n            styles.image,\n            {\n              aspectRatio: imgAspect,\n              backgroundColor: theme.secondaryBackground,\n            },\n          ]}\n          imageStyle={{\n            resizeMode: \"contain\",\n          }}\n          source={{\n            uri: hrefData.imageUrl,\n          }}\n          onLoad={event => {\n            Platform.OS !== \"web\" &&\n              setImgAspect(\n                Math.max(\n                  event.nativeEvent.source.width /\n                    event.nativeEvent.source.height,\n                  0.5,\n                ),\n              );\n          }}\n        >\n          {hrefData.isVideo && (\n            <Pressable onPress={openLink}>\n              <Icon\n                name=\"play-outline\"\n                size={70}\n                color={\"#fffa\"}\n                style={styles.playIcon}\n              />\n            </Pressable>\n          )}\n        </ImageBackground>\n      )}\n      {!!hrefData.linkUrl && (\n        <Pressable\n          style={[\n            styles.link,\n            !!hrefData.imageUrl && styles.wideLink,\n            { backgroundColor: theme.secondaryBackground },\n          ]}\n          onPress={openLink}\n        >\n          <Text>{href}</Text>\n        </Pressable>\n      )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderRadius: 5,\n    marginHorizontal: 15,\n    ...(Platform.OS == \"web\" ? { cursor: \"pointer\" } : {}),\n  },\n  wideLink: {\n    marginHorizontal: 0,\n    borderRadius: 0,\n  },\n  image: {\n    height: Platform.OS == \"web\" ? 400 : undefined,\n    resizeMode: \"contain\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  playIcon:\n    Platform.OS == \"web\"\n      ? {}\n      : {\n          shadowColor: \"black\",\n          shadowOpacity: 1,\n          shadowRadius: 5,\n          shadowOffset: {\n            width: 0, // These can't both be 0\n            height: 3, // i.e. the shadow has to be offset in some way\n          },\n        },\n});\n","import React from \"react\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { StyleSheet, Pressable, Platform, ViewStyle } from \"react-native\";\nimport ElapsedTime from \"./ElapsedTime\";\nimport VoteCounter from \"./VoteCounter\";\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport ContentDisplay from \"./ContentDisplay\";\nimport ActorDisplay from \"./ActorDisplay\";\nimport usePost from \"../hooks/usePost\";\nimport HrefDisplay from \"./HrefDisplay\";\n\nexport interface PostDisplayProps {\n  postId: PostId;\n  navigation: any;\n  truncateContent?: boolean;\n  showAuthor?: boolean;\n}\n\nexport default function PostDisplay(props: PostDisplayProps) {\n  const post = usePost(props.postId);\n  const theme = useTheme();\n\n  if (!post) return <Text>Failed to load post</Text>;\n\n  return (\n    <View>\n      <Text style={styles.title}>\n        {post.sticky && (\n          <>\n            <Icon name=\"pin\" size={25} color={theme.secondaryTint} />{\" \"}\n          </>\n        )}\n        {post.title.trim()}\n      </Text>\n      <ActorDisplay\n        name={post.author.username}\n        host={post.author.host}\n        local={post.author.local}\n        showHost={\"only_foreign\"}\n        colorize={\"never\"}\n        newLine={true}\n        userId={post.author.id}\n        style={styles.username}\n      />\n      {!!post.href && <HrefDisplay href={post.href} />}\n      {!!post.href && !!post.content_html && <View style={{ marginTop: 15 }} />}\n      {!!post.content_html && (\n        <View style={{ paddingHorizontal: 15 }}>\n          <ContentDisplay\n            contentHtml={post.content_html}\n            contentText={post.content_text}\n            maxChars={props.truncateContent ? 256 : undefined}\n            postId={post.id}\n          />\n        </View>\n      )}\n      <View style={styles.foot}>\n        <Pressable\n          hitSlop={8}\n          onPress={() =>\n            props.navigation.navigate(\"Community\", {\n              community: post.community,\n            })\n          }\n          style={[styles.footItem, styles.pointer]}\n        >\n          <ActorDisplay\n            name={post.community.name}\n            host={post.community.host}\n            local={post.community.local}\n            showHost={\"only_foreign\"}\n            colorize={props.showAuthor ? \"always\" : \"never\"}\n            newLine={true}\n          />\n        </Pressable>\n        <View style={{ flex: 1 }} />\n        <View style={styles.footItem}>\n          <ElapsedTime time={post.created} />\n        </View>\n        <View style={styles.footItem}>\n          <Text style={styles.footText}>\n            <Icon name=\"chatbubble-outline\" size={12} />{\" \"}\n            {post.replies_count_total}\n          </Text>\n        </View>\n        <View style={styles.footItem}>\n          <VoteCounter type=\"post\" content={post} />\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n  },\n  pointer: {\n    ...(Platform.OS == \"web\" ? { cursor: \"pointer\" } : {}),\n  } as ViewStyle,\n  title: {\n    fontSize: 20,\n    padding: 15,\n  },\n  username: {\n    paddingLeft: 15,\n    paddingBottom: 15,\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderRadius: 5,\n    marginHorizontal: 15,\n    ...(Platform.OS == \"web\" ? { cursor: \"pointer\" } : {}),\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n  },\n  footText: {},\n  footItem: {\n    padding: 15,\n  },\n  by: {\n    fontSize: 11,\n  },\n  score: {\n    fontSize: 18,\n  },\n  actions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    padding: 10,\n  },\n});\n","import { useEffect, useState } from \"react\";\nimport { useLotideCtx } from \"./useLotideCtx\";\nimport * as LotideService from \"../services/LotideService\";\nimport { useDispatch } from \"react-redux\";\nimport { setPostMulti } from \"../slices/postSlice\";\n\nexport type UseFeedParams = {\n  sort?: SortOption;\n  inYourFollows?: boolean;\n  communityId?: CommunityId;\n};\n\nexport default function useFeed(\n  params: UseFeedParams,\n): [PostId[], () => void, () => void] {\n  const dispatch = useDispatch();\n  const ctx = useLotideCtx();\n  const [postIds, setPostIds] = useState<PostId[]>([]);\n  const [page, setPage] = useState<string | null>(null);\n  const [nextPage, setNextPage] = useState<string | null>(null);\n  const [resetId, setResetId] = useState(0);\n\n  useEffect(() => {\n    if (!ctx) return;\n    LotideService.getPosts(\n      ctx,\n      page,\n      params.sort,\n      params.inYourFollows,\n      params.communityId,\n    ).then(posts => {\n      dispatch(setPostMulti({ posts: posts.items }));\n      setPostIds(ids => [...ids, ...posts.items.map(p => p.id)]);\n      setNextPage(posts.next_page);\n    });\n  }, [page, resetId]);\n\n  function loadNextPage() {\n    setPage(nextPage);\n    setNextPage(null);\n  }\n\n  function reset() {\n    setPostIds([]);\n    setPage(null);\n    setNextPage(null);\n    setResetId(x => x + 1);\n  }\n\n  return [postIds, loadNextPage, reset];\n}\n","export interface KnownHost {\n  name: string;\n  domain: string;\n}\n\nexport const KnownHosts: KnownHost[] = [\n  {\n    name: \"Gold&Black\",\n    domain: \"hoot.goldandblack.xyz\",\n  },\n  {\n    name: \"Narwhal.City\",\n    domain: \"narwhal.city\",\n  },\n  {\n    name: \"FBXL\",\n    domain: \"lotide.fbxl.net\",\n  },\n  {\n    name: \"Tide C\",\n    domain: \"c.tide.tk\",\n  },\n  {\n    name: \"Exopla\",\n    domain: \"lotide.exopla.net.eu.org\",\n  },\n  {\n    name: \"Narwhal.City (Dev)\",\n    domain: \"dev.narwhal.city\",\n  },\n  {\n    name: \"Tide B\",\n    domain: \"b.tide.tk\",\n  },\n  {\n    name: \"Tide A\",\n    domain: \"a.tide.tk\",\n  },\n];\n\nexport default KnownHosts;\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport const lotideContext = {\n  async store(ctx: LotideContext) {\n    return AsyncStorage.setItem(\"@lotide_ctx\", JSON.stringify(ctx));\n  },\n  async remove() {\n    return AsyncStorage.removeItem(\"@lotide_ctx\");\n  },\n  async query(): Promise<LotideContext | undefined> {\n    return AsyncStorage.getItem(\"@lotide_ctx\").then(ctxStr => {\n      if (ctxStr !== null) {\n        return JSON.parse(ctxStr) as LotideContext;\n      } else {\n        return undefined;\n      }\n    });\n  },\n};\n\nexport const lotideContextKV = {\n  async store(ctx: LotideContext) {\n    if (!ctx.login) return;\n    const name = `${ctx.login.user.username}@${ctx.apiUrl}`;\n    serviceKV.store(\"@lotide_ctx_arr\", name, ctx);\n  },\n  async query(k: string): Promise<LotideContext | undefined> {\n    return serviceKV.query<LotideContext>(\"@lotide_ctx_arr\", k);\n  },\n  async listKeys(): Promise<string[]> {\n    return serviceKV.listKeys(\"@lotide_ctx_arr\");\n  },\n  async remove(k: string): Promise<LotideContext | undefined> {\n    return serviceKV.remove(\"@lotide_ctx_arr\", k);\n  },\n  async logout(ctx: LotideContext) {\n    if (!ctx.login) return;\n    const name = `${ctx.login.user.username}@${ctx.apiUrl}`;\n    serviceKV.store(\"@lotide_ctx_arr\", name, { apiUrl: ctx.apiUrl });\n  },\n  async getStore(): Promise<{ [key: string]: LotideContext }> {\n    const storeStr = await AsyncStorage.getItem(\"@lotide_ctx_arr\");\n    return storeStr ? JSON.parse(storeStr) : {};\n  },\n};\n\nconst serviceKV = {\n  async store<T>(path: string, k: string, v: T) {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    store[k] = v;\n    await AsyncStorage.setItem(path, JSON.stringify(store));\n  },\n\n  async query<T>(path: string, k: string): Promise<T | undefined> {\n    const storeStr = await AsyncStorage.getItem(path);\n    return storeStr ? JSON.parse(storeStr)[k] : undefined;\n  },\n\n  async listKeys(path: string): Promise<string[]> {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    return Object.keys(store);\n  },\n\n  async remove<T>(path: string, k: string): Promise<T | undefined> {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    const v = store[k];\n    delete store[k];\n    await AsyncStorage.setItem(path, JSON.stringify(store));\n    return v;\n  },\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ntype LotideState = {\n  ctx: LotideContext | null;\n};\n\nconst initialState: LotideState = {\n  ctx: null,\n};\n\nexport const voteSlice = createSlice({\n  name: \"lotide\",\n  initialState,\n  reducers: {\n    setCtx: (state, action: PayloadAction<LotideContext>) => {\n      state.ctx = action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setCtx } = voteSlice.actions;\n\nexport default voteSlice.reducer;\n","import React, { useEffect, useState } from \"react\";\nimport { Platform, Pressable, ScrollView, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport KnownHosts from \"../constants/KnownHosts\";\nimport ActorDisplay from \"./ActorDisplay\";\nimport { Text, TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport useTheme from \"../hooks/useTheme\";\nimport { lotideContextKV } from \"../services/StorageService\";\nimport { setCtx } from \"../slices/lotideSlice\";\nimport { useDispatch } from \"react-redux\";\nimport ContentDisplay from \"./ContentDisplay\";\n\nexport interface HostListProps {\n  onSelect: (domain: string, name?: string, username?: string) => void;\n}\n\ninterface HostData {\n  name: string;\n  domain: string;\n  instanceInfo?: InstanceInfo | null;\n}\n\nexport default function HostList(props: HostListProps) {\n  const [hostText, setHostText] = useState(\"\");\n  const [knownHosts, setKnowHosts] = useState<HostData[]>(KnownHosts);\n  const [existingProfiles, setExistingProfiles] = useState<\n    [string, LotideContext][]\n  >([]);\n  const theme = useTheme();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    KnownHosts.map((h, i) => {\n      return LotideService.getInstanceInfo({\n        apiUrl: `https://${h.domain}/api/unstable`,\n      })\n        .then(d => {\n          setKnowHosts(hosts =>\n            hosts.map((h2, j) =>\n              i !== j\n                ? h2\n                : { name: h2.name, domain: h2.domain, instanceInfo: d },\n            ),\n          );\n        })\n        .catch(() => {\n          setKnowHosts(hosts =>\n            hosts.map((h2, j) =>\n              i !== j\n                ? h2\n                : { name: h2.name, domain: h2.domain, instanceInfo: null },\n            ),\n          );\n        });\n    });\n  }, []);\n\n  useEffect(() => {\n    lotideContextKV\n      .getStore()\n      .then(object => Object.entries(object))\n      .then(setExistingProfiles);\n  }, []);\n\n  const renderItem = ({ item }: { item: HostData }) => {\n    const enabled = (item.instanceInfo?.apiVersion || 0) > 8;\n    const color = enabled ? theme.text : theme.secondaryText;\n    const description = item.instanceInfo?.description;\n    return (\n      <View\n        style={{\n          borderBottomWidth: StyleSheet.hairlineWidth || 1,\n          borderColor: theme.secondaryText,\n          paddingVertical: 25,\n        }}\n      >\n        <Pressable\n          onPress={() => enabled && props.onSelect(item.domain, item.name)}\n        >\n          <ActorDisplay\n            name={item.name}\n            host={item.domain}\n            local={false}\n            newLine={true}\n            styleName={{\n              fontSize: 24,\n              fontWeight: \"300\",\n              fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n              color,\n            }}\n          />\n          {item.instanceInfo ? (\n            <>\n              <Text style={{ color: theme.secondaryText }}>\n                {item.instanceInfo.software.name}{\" \"}\n                {item.instanceInfo.software.version}\n                {!enabled && \" - Out of date\"}\n              </Text>\n              {!!description &&\n                (typeof description === \"string\" ? (\n                  <Text style={{ color }}>{description}</Text>\n                ) : (\n                  <ContentDisplay\n                    contentHtml={description.content_html}\n                    contentMarkdown={description.content_markdown}\n                    contentText={description.content_text}\n                  />\n                ))}\n            </>\n          ) : item.instanceInfo === null ? (\n            <Text style={{ color }}>Failed to load info</Text>\n          ) : (\n            <Text style={{ color }}>Loading...</Text>\n          )}\n        </Pressable>\n      </View>\n    );\n  };\n  return (\n    <ScrollView contentContainerStyle={styles.root}>\n      <Text style={styles.title}>Login to continue</Text>\n      {existingProfiles.length > 0 && (\n        <Text style={styles.subtitle}>Select an existing profile</Text>\n      )}\n      {existingProfiles.map(p => {\n        const [username, url] = p[0].split(\"@\");\n        const isUnlocked = !!p[1].login;\n        const color = isUnlocked ? theme.text : theme.secondaryText;\n        const host = url\n          .replace(\"http://\", \"\")\n          .replace(\"https://\", \"\")\n          .split(/[/?#]/)[0];\n        const hostName = KnownHosts.find(x => x.domain == host)?.name;\n        return (\n          <Pressable\n            key={p[0]}\n            onPress={() => {\n              if (isUnlocked) {\n                dispatch(setCtx(p[1]));\n              } else {\n                props.onSelect(host.toLowerCase(), undefined, username);\n              }\n            }}\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <Icon\n              name={isUnlocked ? \"lock-open-outline\" : \"lock-closed-outline\"}\n              color={color}\n              style={{ marginRight: 10 }}\n              size={20}\n            />\n            <ActorDisplay\n              name={username}\n              host={host}\n              local={true}\n              showHost={\"always\"}\n              newLine={true}\n              style={{ paddingVertical: 15, paddingBottom: 10 }}\n              styleName={{ color }}\n            />\n            <View style={{ flex: 1 }} />\n            <Text\n              style={{\n                fontSize: 16,\n                color,\n                fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n              }}\n            >\n              {hostName}\n            </Text>\n          </Pressable>\n        );\n      })}\n      <Text style={styles.subtitle}>\n        {existingProfiles.length > 0\n          ? \"Or sign into a new acount\"\n          : \"Enter a host or select one below\"}\n      </Text>\n      <TextInput\n        placeholder=\"Host domain\"\n        style={{ paddingVertical: 10, paddingHorizontal: 10 }}\n        value={hostText}\n        onChangeText={setHostText}\n        onSubmitEditing={() => props.onSelect(hostText.toLowerCase())}\n        keyboardType=\"url\"\n        returnKeyType=\"next\"\n      />\n      {knownHosts\n        .filter(\n          x =>\n            hostText === \"\" ||\n            x.domain.includes(hostText.toLowerCase()) ||\n            x.name.toLowerCase().includes(hostText.toLowerCase()),\n        )\n        .map(item => (\n          <View key={item.domain}>{renderItem({ item })}</View>\n        ))}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 10,\n    textAlign: \"center\",\n  },\n  subtitle: {\n    fontWeight: \"300\",\n    marginBottom: 10,\n    marginTop: 15,\n    textAlign: \"center\",\n  },\n});\n","import React, { useRef, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n  TextInput as DefaultTextInput,\n} from \"react-native\";\nimport { Text, TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport useTheme from \"../hooks/useTheme\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport { useDispatch } from \"react-redux\";\nimport { setCtx } from \"../slices/lotideSlice\";\n\nexport interface LoginProps {\n  hostName?: string;\n  domain: string;\n  username?: string;\n  onGoBack: () => void;\n}\n\nexport default function Login(props: LoginProps) {\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [username, setUsername] = useState(props.username || \"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const usernameRef = useRef<DefaultTextInput>(null);\n  const passwordRef = useRef<DefaultTextInput>(null);\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const navigation = useNavigation();\n\n  function fail(message: string) {\n    Alert.alert(\"Failed to submit\", message);\n  }\n\n  function register() {\n    if (!username) return fail(\"Please enter a username\");\n    if (!password) return fail(\"Enter a password\");\n    if (!email) return fail(\"Please enter an email address\");\n\n    LotideService.register(\n      `https://${props.domain}/api/unstable`,\n      username,\n      password,\n      email,\n    )\n      .then(data => {\n        dispatch(\n          setCtx({\n            apiUrl: `https://${props.domain}/api/unstable`,\n            login: data,\n          }),\n        );\n      })\n      .catch(e => {\n        Alert.alert(\"Failed to register\", e);\n        console.error(e);\n      });\n  }\n\n  function login() {\n    if (!username) return fail(\"Please enter a username\");\n    if (!password) return fail(\"Enter a password\");\n\n    LotideService.login(\n      `https://${props.domain}/api/unstable`,\n      username,\n      password,\n    )\n      .then(data => {\n        dispatch(\n          setCtx({\n            apiUrl: `https://${props.domain}/api/unstable`,\n            login: data,\n          }),\n        );\n      })\n      .catch(e => {\n        Alert.alert(\"Failed to login\", e);\n        console.error(e);\n      });\n  }\n\n  function submit() {\n    if (isRegistering) {\n      register();\n    } else {\n      login();\n    }\n  }\n\n  return (\n    <Pressable\n      style={{ flex: 1 }}\n      onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n    >\n      <KeyboardAvoidingView style={styles.root} behavior=\"padding\">\n        {props.hostName ? (\n          <Pressable style={{ alignItems: \"center\" }}>\n            <Text style={styles.name}>{props.hostName}</Text>\n            <Text style={[styles.domain, { color: theme.secondaryText }]}>\n              {props.domain}\n            </Text>\n          </Pressable>\n        ) : (\n          <Pressable>\n            <Text style={{ fontSize: 24 }}>{props.domain}</Text>\n          </Pressable>\n        )}\n        <Pressable hitSlop={5} onPress={() => setIsRegistering(x => !x)}>\n          <Text style={[styles.loginRegister, { color: theme.secondaryText }]}>\n            <Text\n              style={{\n                color: isRegistering\n                  ? theme.secondaryText\n                  : theme.secondaryTint,\n              }}\n            >\n              Login\n            </Text>\n            {\" | \"}\n            <Text\n              style={{\n                color: isRegistering\n                  ? theme.secondaryTint\n                  : theme.secondaryText,\n              }}\n            >\n              Register\n            </Text>\n          </Text>\n        </Pressable>\n        {isRegistering && (\n          <TextInput\n            style={styles.input}\n            placeholder=\"Email Address\"\n            value={email}\n            onChangeText={setEmail}\n            keyboardType=\"email-address\"\n            textContentType=\"emailAddress\"\n            autoCompleteType=\"email\"\n            returnKeyType=\"next\"\n            onSubmitEditing={() => usernameRef.current?.focus()}\n          />\n        )}\n        <TextInput\n          ref={usernameRef}\n          style={styles.input}\n          placeholder=\"Username\"\n          value={username}\n          onChangeText={setUsername}\n          keyboardType=\"ascii-capable\"\n          textContentType=\"username\"\n          autoCompleteType=\"username\"\n          returnKeyType=\"next\"\n          onSubmitEditing={() => passwordRef.current?.focus()}\n        />\n        <TextInput\n          ref={passwordRef}\n          style={styles.input}\n          placeholder=\"Password\"\n          value={password}\n          onChangeText={setPassword}\n          secureTextEntry={true}\n          textContentType={isRegistering ? \"newPassword\" : \"password\"}\n          autoCompleteType=\"password\"\n          returnKeyType=\"done\"\n          onSubmitEditing={submit}\n        />\n        {!isRegistering && (\n          <Pressable\n            style={{ padding: 15 }}\n            onPress={() =>\n              navigation.navigate(\"ForgotPassword\", { node: props.domain })\n            }\n          >\n            <Text secondary>Forgot Password</Text>\n          </Pressable>\n        )}\n        <View style={styles.actionButtons}>\n          <Button\n            title=\"Change Host\"\n            onPress={props.onGoBack}\n            color={theme.secondaryTint}\n          />\n          <Button\n            title={isRegistering ? \"Register\" : \"Login\"}\n            onPress={submit}\n            color={theme.tint}\n          />\n        </View>\n      </KeyboardAvoidingView>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 35,\n  },\n  name: {\n    fontSize: 50,\n    fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n  },\n  domain: {\n    fontWeight: \"300\",\n  },\n  loginRegister: {\n    padding: 15,\n  },\n  input: {\n    width: \"100%\",\n    marginVertical: 5,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  actionButtons: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n});\n","import React, { useState } from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { View } from \"./Themed\";\nimport HostList from \"./HostList\";\nimport Login from \"./Login\";\n\nexport default function SuggestLogin() {\n  const [hostName, setHostName] = useState<string>();\n  const [domain, setDomain] = useState<string>();\n  const [username, setUsername] = useState<string>();\n\n  return (\n    <View style={styles.root}>\n      {!domain ? (\n        <HostList\n          onSelect={(domain, name, username) => {\n            setHostName(name);\n            setDomain(domain);\n            setUsername(username);\n          }}\n        />\n      ) : (\n        <Login\n          hostName={hostName}\n          domain={domain}\n          username={username}\n          onGoBack={() => setDomain(undefined)}\n        />\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  input: {\n    width: \"100%\",\n    marginBottom: 20,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  actionButtons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    width: \"100%\",\n  },\n});\n","import React, { ReactNode, useEffect, useRef, useState } from \"react\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport {\n  ColorValue,\n  NativeScrollEvent,\n  NativeSyntheticEvent,\n  Platform,\n  ScrollView,\n  useWindowDimensions,\n  View,\n  ViewStyle,\n} from \"react-native\";\nimport * as Haptics from \"../services/HapticService\";\n\nexport type Glyph = keyof typeof Icon.glyphMap;\n\nexport type SwipeActionProps = {\n  iconLeftSide: [Glyph, Glyph];\n  iconRightSide: [Glyph, Glyph];\n  colorLeftSide: ColorValue;\n  colorRightSide: ColorValue;\n  backgroundColor?: ColorValue;\n  onLeftSide: () => void;\n  onRightSide: () => void;\n  onReturnToCenter?: () => void;\n  children: ReactNode;\n  distanceToActivate?: number;\n  style?: ViewStyle;\n};\n\nexport default function SwipeAction(props: SwipeActionProps) {\n  if (Platform.OS !== \"ios\")\n    return <View style={props.style}>{props.children}</View>;\n  const distanceToActivate = props.distanceToActivate || 60;\n  const [isScrolling, setIsScrolling] = useState(false);\n  const [scroll, setScroll] = useState(0);\n  const [isLeft, setIsLeft] = useState(false);\n  const [isRight, setIsRight] = useState(false);\n  const [isCommitted, setIsCommitted] = useState(false);\n  const dimensions = useWindowDimensions();\n  const [width, setWidth] = useState<number>(dimensions.width);\n  const scrollRef = useRef<ScrollView>(null);\n\n  useEffect(() => {\n    if (scroll < 0 && !isLeft) {\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n      setIsLeft(true);\n    } else if (scroll >= 0 && isLeft) {\n      setIsLeft(false);\n      if (!isScrolling) {\n        setIsCommitted(true);\n        props.onLeftSide();\n      }\n    }\n    if (scroll >= distanceToActivate * 2 && !isRight) {\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n      setIsRight(true);\n    } else if (scroll < distanceToActivate * 2 && isRight) {\n      setIsRight(false);\n      if (!isScrolling) {\n        setIsCommitted(true);\n        props.onRightSide();\n      }\n    }\n    if (scroll == distanceToActivate) {\n      props.onReturnToCenter?.();\n      setIsRight(false);\n      setIsLeft(false);\n      setIsCommitted(false);\n    }\n  }, [scroll]);\n\n  function onScroll(event: NativeSyntheticEvent<NativeScrollEvent>) {\n    const scroll = event?.nativeEvent?.contentOffset?.x;\n    setScroll(scroll);\n  }\n\n  return (\n    <View\n      onLayout={e => setWidth(e.nativeEvent.layout.width)}\n      style={{ width: \"100%\" }}\n    >\n      <ScrollView\n        ref={scrollRef}\n        horizontal\n        snapToOffsets={[distanceToActivate, distanceToActivate + width]}\n        snapToStart={false}\n        snapToEnd={false}\n        onScrollBeginDrag={() => setIsScrolling(true)}\n        onScrollEndDrag={() => {\n          scrollRef.current?.scrollTo({ x: distanceToActivate });\n          setIsScrolling(false);\n        }}\n        contentOffset={{ x: distanceToActivate, y: 0 }}\n        onScroll={onScroll}\n        scrollEventThrottle={100}\n        showsHorizontalScrollIndicator={false}\n        style={{ backgroundColor: props.backgroundColor, ...props.style }}\n        overScrollMode=\"always\"\n      >\n        <View\n          style={{\n            width: distanceToActivate,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Icon\n            name={props.iconLeftSide[+isLeft || +isCommitted]}\n            color={props.colorLeftSide}\n            size={25}\n          />\n        </View>\n        <View style={{ width: width }}>{props.children}</View>\n        <View\n          style={{\n            width: distanceToActivate,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Icon\n            name={props.iconRightSide[+isRight || +isCommitted]}\n            color={props.colorRightSide}\n            size={25}\n          />\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { StyleSheet, FlatList, Pressable, Platform } from \"react-native\";\n\nimport PostDisplay from \"../components/PostDisplay\";\nimport { View } from \"../components/Themed\";\nimport * as Haptics from \"../services/HapticService\";\nimport useFeed from \"../hooks/useFeed\";\nimport { RootTabScreenProps } from \"../types\";\nimport useTheme from \"../hooks/useTheme\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport SwipeAction from \"../components/SwipeAction\";\nimport useVote from \"../hooks/useVote\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../store/reduxStore\";\nimport { useNavigation } from \"@react-navigation/core\";\n\nexport default function FeedScreen({\n  navigation,\n  route,\n}: RootTabScreenProps<\"FeedScreen\">) {\n  const sort = route.params.sort;\n  const ctx = useLotideCtx();\n  const [posts, loadNextPage, resetPosts] = useFeed({\n    sort,\n    inYourFollows: true,\n  });\n  if (!ctx?.login) return <SuggestLogin />;\n  const renderItem = ({ item }: { item: PostId }) => <Item postId={item} />;\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={posts}\n        renderItem={renderItem}\n        keyExtractor={(postId, index) => `${postId}-${index}`}\n        refreshing={posts.length == 0}\n        onRefresh={resetPosts}\n        onEndReachedThreshold={2}\n        onEndReached={loadNextPage}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n    borderBottomWidth: 8,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n    color: \"#eee\",\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    backgroundColor: \"#8884\",\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n  },\n  footText: {\n    color: \"#ccc\",\n  },\n  by: {\n    fontSize: 11,\n  },\n  score: {\n    fontSize: 18,\n    color: \"#bbb\",\n  },\n});\n\nconst Item = ({ postId }: { postId: PostId }) => {\n  const post = useSelector((state: RootState) => state.posts.posts[postId]);\n  const { isUpvoted, addVote, removeVote } = useVote(\"post\", post);\n  const [isCommitting, setIsCommitting] = useState(false);\n  const theme = useTheme();\n  const navigation = useNavigation();\n\n  return (\n    <SwipeAction\n      iconLeftSide={\n        isUpvoted !== isCommitting\n          ? [\"heart-dislike\", \"heart-dislike-outline\"]\n          : [\"heart-outline\", \"heart\"]\n      }\n      iconRightSide={[\"arrow-undo-outline\", \"arrow-undo\"]}\n      colorLeftSide={theme.red}\n      colorRightSide={theme.blue}\n      onLeftSide={() => {\n        isUpvoted ? removeVote() : addVote();\n        setIsCommitting(true);\n      }}\n      onRightSide={() => {\n        navigation.navigate(\"Reply\", {\n          id: post.id,\n          title: post.title,\n          html: post.content_html,\n          type: \"post\",\n        });\n      }}\n      onReturnToCenter={() => setIsCommitting(false)}\n      backgroundColor={theme.secondaryBackground}\n      style={{ borderBottomWidth: 8, borderColor: theme.secondaryBackground }}\n    >\n      <Pressable\n        style={{\n          width: \"100%\",\n          ...(Platform.OS == \"web\" ? { cursor: \"pointer\" } : {}),\n        }}\n        onPress={() => navigation.navigate(\"Post\", { postId })}\n        onLongPress={() => {\n          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n          console.log(post);\n        }}\n      >\n        <View style={[]}>\n          <PostDisplay\n            postId={postId}\n            navigation={navigation}\n            truncateContent={true}\n          />\n        </View>\n      </Pressable>\n    </SwipeAction>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  FlatList,\n  Pressable,\n  StyleSheet,\n  Text,\n  TextInput,\n  View,\n} from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport * as LotideService from \"../services/LotideService\";\nimport ActorDisplay from \"./ActorDisplay\";\nimport useTheme from \"../hooks/useTheme\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\n\nexport interface CommunityFinderProps {\n  placeholder?: string;\n  onlyWhenTyping?: boolean;\n  focusId?: number;\n  onSelect: (community: Community) => void;\n}\n\nexport default function CommunityFinder(props: CommunityFinderProps) {\n  const [communities, setCommunities] = useState<Paged<Community>>();\n  const [filterText, setFilterText] = useState(\"\");\n  const ctx = useLotideCtx();\n  const theme = useTheme();\n\n  const communitiesToDisplay = (() => {\n    if (props.onlyWhenTyping && filterText === \"\") return [];\n    if (!communities) return [];\n    if (filterText === \"\") return communities.items;\n    return communities.items.filter(c =>\n      c.name.toLowerCase().includes(filterText.toLowerCase()),\n    );\n  })();\n\n  useEffect(() => {\n    if (!ctx) return;\n    LotideService.getCommunities(ctx, false).then(setCommunities);\n  }, [ctx?.login?.token, props.focusId]);\n\n  const renderItem = ({ item }: { item: Community }) => {\n    return (\n      <Pressable\n        onPress={() => props.onSelect(item)}\n        style={[\n          styles.item,\n          {\n            borderColor: theme.tertiaryBackground,\n          },\n        ]}\n      >\n        <View\n          style={{\n            flex: 1,\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <ActorDisplay\n            name={item.name}\n            host={item.host}\n            local={item.local}\n            colorize={\"always\"}\n            newLine\n          />\n          <View style={{ display: \"flex\", flexDirection: \"row\" }}>\n            {item.you_are_moderator && (\n              <Icon\n                name=\"shield-outline\"\n                size={20}\n                color={theme.secondaryTint}\n              />\n            )}\n            {item.your_follow?.accepted && (\n              <Icon\n                name=\"checkmark\"\n                size={20}\n                color={theme.secondaryTint}\n                style={{ marginLeft: 5 }}\n              />\n            )}\n          </View>\n        </View>\n        {!!item.description && item.description.length > 0 && (\n          <Text style={{ color: theme.secondaryText, marginTop: 10 }}>\n            {item.description?.substring(0, 120)}\n            {(item.description?.length || 0) > 120 && \"...\"}\n          </Text>\n        )}\n      </Pressable>\n    );\n  };\n\n  return (\n    <FlatList\n      data={communitiesToDisplay}\n      renderItem={renderItem}\n      keyExtractor={(item, index) => `${item.id}-${index}`}\n      contentContainerStyle={styles.list}\n      stickyHeaderIndices={[0]}\n      style={{ backgroundColor: theme.background }}\n      ListHeaderComponent={\n        <View style={{ backgroundColor: theme.background, padding: 15 }}>\n          <TextInput\n            placeholder={props.placeholder || \"Filter communities\"}\n            placeholderTextColor={theme.placeholderText}\n            value={filterText}\n            onChangeText={setFilterText}\n            style={[styles.input, { color: theme.text }]}\n          />\n        </View>\n      }\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  input: {\n    marginHorizontal: 25,\n    paddingVertical: 10,\n  },\n  list: {\n    paddingBottom: 50,\n  },\n  item: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    alignItems: \"stretch\",\n    paddingVertical: 10,\n    borderTopWidth: StyleSheet.hairlineWidth || 1,\n    paddingHorizontal: 20,\n    marginHorizontal: 20,\n  },\n});\n","import React, { useEffect, useState } from \"react\";\nimport { RootTabScreenProps } from \"../types\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport CommunityFinder from \"../components/CommunityFinder\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\n\nexport default function SearchScreen({\n  navigation,\n}: RootTabScreenProps<\"SearchScreen\">) {\n  const [focusId, setFocusId] = useState(0);\n  const ctx = useLotideCtx();\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(x => x + 1)),\n    [],\n  );\n\n  if (!ctx?.login) return <SuggestLogin />;\n\n  return (\n    <CommunityFinder\n      onSelect={community => navigation.navigate(\"Community\", { community })}\n      focusId={focusId}\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  Pressable,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  Text,\n  View,\n} from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport type TappableListProps = {\n  items: TappableListItem[];\n  style?: StyleProp<ViewStyle>;\n};\n\nexport type Glyph = keyof typeof Icon.glyphMap;\n\nexport interface TappableListItem {\n  title: string;\n  icon?: Glyph;\n  disabled?: boolean;\n  onPress: () => void;\n}\n\nexport function TappableList(props: TappableListProps) {\n  const theme = useTheme();\n\n  return (\n    <View\n      style={[\n        styles.root,\n        { backgroundColor: theme.secondaryBackground },\n        props.style,\n      ]}\n    >\n      {props.items.map((item, i) => (\n        <Pressable key={i} style={[styles.item]} onPress={item.onPress}>\n          <Icon\n            name={item.icon || \"help-outline\"}\n            size={20}\n            color={item.disabled ? theme.secondaryText : theme.tint}\n          />\n          <View\n            style={[\n              styles.itemInner,\n              i !== 0 && {\n                borderTopColor: theme.secondaryText,\n                borderTopWidth: StyleSheet.hairlineWidth,\n              },\n            ]}\n          >\n            <Text\n              style={{\n                color: item.disabled ? theme.secondaryText : theme.text,\n              }}\n            >\n              {item.title}\n            </Text>\n            <Icon\n              name=\"chevron-forward-outline\"\n              color={\n                item.disabled ? theme.tertiaryBackground : theme.secondaryText\n              }\n              size={20}\n            />\n          </View>\n        </Pressable>\n      ))}\n    </View>\n  );\n}\n\nexport default TappableList;\n\nconst styles = StyleSheet.create({\n  root: {\n    borderRadius: 8,\n  },\n  item: {\n    paddingLeft: 15,\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  itemInner: {\n    paddingVertical: 12,\n    marginLeft: 15,\n    paddingRight: 15,\n    flex: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n});\n","import React, { useEffect, useState } from \"react\";\nimport { Alert, Platform, ScrollView, StyleSheet } from \"react-native\";\nimport { View, Text } from \"../components/Themed\";\nimport { getUserData } from \"../services/LotideService\";\nimport { RootTabScreenProps } from \"../types\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport * as LotideService from \"../services/LotideService\";\nimport * as StorageService from \"../services/StorageService\";\nimport useTheme from \"../hooks/useTheme\";\nimport ActorDisplay from \"../components/ActorDisplay\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\nimport { useDispatch } from \"react-redux\";\nimport { setCtx } from \"../slices/lotideSlice\";\nimport { TappableList } from \"../components/TappableList\";\n\nexport default function ProfileScreen({\n  navigation,\n}: RootTabScreenProps<\"ProfileScreen\">) {\n  const [profile, setProfile] = useState<Profile>();\n  const [communities, setCommunities] = useState<Community[]>([]);\n  const [focusId, setFocusId] = useState(0);\n  const theme = useTheme();\n  const ctx = useLotideCtx();\n  const dispatch = useDispatch();\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(x => x + 1)),\n    [],\n  );\n\n  useEffect(() => {\n    if (!ctx?.login) return;\n    // TODO: Use the pagination feature\n    LotideService.getCommunities(ctx, true).then(communities =>\n      setCommunities(communities.items),\n    );\n  }, [ctx?.login?.user.id, focusId]);\n\n  useEffect(() => {\n    if (ctx?.login !== undefined && ctx.login.user !== undefined) {\n      getUserData(ctx, ctx.login?.user.id || 0).then(setProfile);\n    }\n  }, [ctx?.login?.token, focusId]);\n\n  if (ctx?.login === undefined) {\n    return <SuggestLogin />;\n  }\n\n  if (!profile) return <Text>Cannot load profile</Text>;\n\n  function logout() {\n    if (!ctx?.login) return;\n    if (Platform.OS === \"web\") {\n      StorageService.lotideContextKV\n        .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n        .then(() => LotideService.logout(ctx))\n        .then(() => dispatch(setCtx({})));\n      return;\n    }\n    Alert.alert(\n      \"Log out\",\n      \"Would you like to keep the login profile handy for later?\",\n      [\n        {\n          text: \"Cancel\",\n          style: \"cancel\",\n        },\n        {\n          text: \"Remove\",\n          onPress: () => {\n            StorageService.lotideContextKV\n              .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n              .then(() => LotideService.logout(ctx))\n              .then(() => dispatch(setCtx({})));\n          },\n        },\n        {\n          text: \"Keep\",\n          style: \"default\",\n          onPress: () => {\n            StorageService.lotideContextKV.logout(ctx);\n            dispatch(setCtx({}));\n          },\n        },\n      ],\n      { cancelable: true },\n    );\n  }\n\n  function comingSoon() {\n    Alert.alert(\"Coming soon\", \"This feature isn't ready yet\");\n  }\n\n  return (\n    <ScrollView\n      style={[styles.container, { backgroundColor: theme.background }]}\n    >\n      <View style={styles.header}>\n        <View>\n          <ActorDisplay\n            name={profile.username}\n            host={profile.host}\n            local={true}\n            showHost=\"always\"\n            colorize=\"never\"\n            newLine\n            style={{ fontSize: 18 }}\n          />\n          {!!profile.avatar && <Text>{profile.avatar.url}</Text>}\n          {!!profile.description && <Text>{profile.description}</Text>}\n        </View>\n      </View>\n      <TappableList\n        items={[\n          {\n            title: \"Switch Account\",\n            icon: \"person-add-outline\",\n            onPress: () => dispatch(setCtx({})),\n          },\n          {\n            title: \"Log Out\",\n            icon: \"log-out-outline\",\n            onPress: () => logout(),\n          },\n          {\n            title: \"App Settings\",\n            icon: \"settings-outline\",\n            disabled: true,\n            onPress: comingSoon,\n          },\n          {\n            title: \"Edit Account\",\n            icon: \"pencil-outline\",\n            disabled: true,\n            onPress: comingSoon,\n          },\n          {\n            title: \"Your Posts / Comments\",\n            icon: \"newspaper-outline\",\n            disabled: true,\n            onPress: comingSoon,\n          },\n          {\n            title: \"Saved\",\n            icon: \"bookmark-outline\",\n            disabled: true,\n            onPress: comingSoon,\n          },\n          {\n            title: \"New Community\",\n            icon: \"people-outline\",\n            onPress: () => navigation.navigate(\"NewCommunity\"),\n          },\n        ]}\n        style={{ marginHorizontal: 20 }}\n      />\n\n      <TappableList\n        items={[\n          {\n            title: \"Moderation\",\n            icon: \"shield-outline\",\n            disabled: true,\n            onPress: comingSoon,\n          },\n        ]}\n        style={{ marginHorizontal: 20, marginTop: 20 }}\n      />\n      <Text style={styles.followingTitle}>Communities You Follow:</Text>\n      {communities.map(community => (\n        <View\n          key={community.id}\n          style={[\n            styles.altProfileButton,\n            { borderColor: theme.secondaryBackground },\n          ]}\n        >\n          <ActorDisplay\n            name={community.name}\n            host={community.host}\n            local={community.local}\n            showHost={\"always\"}\n            colorize={\"always\"}\n            newLine={true}\n          />\n        </View>\n      ))}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\",\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  followingTitle: {\n    fontSize: 18,\n    fontWeight: \"500\",\n    padding: 20,\n  },\n  editView: {\n    margin: 20,\n  },\n  editViewText: {\n    marginBottom: 15,\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n  },\n  editViewActionButtons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n  buttonView: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    height: 40,\n    borderWidth: 1,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  altProfileButton: {\n    marginHorizontal: 20,\n    paddingVertical: 15,\n    borderBottomWidth: 1,\n  },\n});\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n  TextInput,\n  TouchableWithoutFeedback,\n} from \"react-native\";\nimport { View, Text, TextInput as TextInputThemed } from \"../components/Themed\";\nimport { RootTabScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport useTheme from \"../hooks/useTheme\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport CommunityFinder from \"../components/CommunityFinder\";\nimport ActorDisplay from \"../components/ActorDisplay\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\nimport { useDispatch } from \"react-redux\";\nimport { setPost } from \"../slices/postSlice\";\n\nexport default function NewPostScreen({\n  navigation,\n  route,\n}: RootTabScreenProps<\"NewPostScreen\">) {\n  const dispatch = useDispatch();\n  const [community, setCommunity] = useState<Community | null | undefined>(\n    route.params.community,\n  );\n  const [title, setTitle] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const theme = useTheme();\n  const ctx = useLotideCtx();\n\n  useEffect(() => {\n    return navigation.addListener(\"focus\", () => {\n      if (route.params.community) {\n        return setCommunity(route.params.community);\n      }\n      if (community === null) {\n        return setCommunity(undefined);\n      }\n    });\n  }, [community, community?.id, route.params.community?.id]);\n\n  if (!ctx?.login) {\n    return <SuggestLogin />;\n  }\n\n  if (community === null)\n    return <CommunityFinder onSelect={setCommunity} onlyWhenTyping />;\n\n  function submit() {\n    if (!ctx || !community) return;\n    LotideService.submitPost(ctx, {\n      community: community.id,\n      title: title,\n      href: link || undefined,\n      content_markdown: content || \" \",\n    })\n      .then(data => {\n        LotideService.getPost(ctx, data.id).then(post => {\n          reset();\n          dispatch(setPost({ post }));\n          navigation.navigate(\"Post\", { postId: post.id });\n        });\n      })\n      .catch(e => Alert.alert(\"Could not submit post\", e));\n  }\n\n  function reset() {\n    setCommunity(undefined);\n    setTitle(\"\");\n    setLink(\"\");\n    setContent(\"\");\n  }\n\n  return (\n    <KeyboardAvoidingView style={{ width: \"100%\", height: \"100%\" }}>\n      <TouchableWithoutFeedback\n        onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n      >\n        <View style={styles.container}>\n          <Pressable onPress={() => setCommunity(null)}>\n            {community ? (\n              <ActorDisplay\n                name={community.name}\n                host={community.host}\n                local={community.local}\n                colorize={\"always\"}\n                showHost={\"always\"}\n                newLine\n                style={styles.input}\n              />\n            ) : (\n              <Text style={[styles.input, { color: theme.secondaryText }]}>\n                Select a Community\n              </Text>\n            )}\n          </Pressable>\n          <TextInput\n            style={[styles.input, styles.title, { color: theme.text }]}\n            placeholder=\"Add a Title\"\n            placeholderTextColor={theme.placeholderText}\n            value={title}\n            onChangeText={setTitle}\n          />\n          {title.length >= 4 ? (\n            <>\n              <TextInput\n                style={[styles.input, { color: theme.text }]}\n                placeholder=\"Link\"\n                placeholderTextColor={theme.placeholderText}\n                value={link}\n                onChangeText={setLink}\n                keyboardType=\"url\"\n                textContentType=\"URL\"\n              />\n              <TextInputThemed\n                style={{ marginVertical: 20, minHeight: 100 }}\n                multiline\n                placeholder=\"Add post content\"\n                value={content}\n                onChangeText={setContent}\n              />\n            </>\n          ) : (\n            <Text style={{ color: theme.secondaryText }}>\n              {title.length > 0 && 4 - title.length}\n            </Text>\n          )}\n          {!!community && title.length >= 4 && (\n            <Button\n              onPress={submit}\n              title=\"Submit\"\n              color={theme.tint}\n              accessibilityLabel=\"Submit new post\"\n            />\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"stretch\",\n    padding: 15,\n    height: \"100%\",\n    width: \"100%\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    paddingVertical: 10,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  item: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginBottom: 1,\n  },\n});\n","import React from \"react\";\nimport { View } from \"../../components/Themed\";\nimport { SettingsScreen, SettingsData } from \"react-native-settings-screen\";\n\nexport default () => {\n  return (\n    <View>\n      <SettingsScreen data={DATA} />\n    </View>\n  );\n};\n\nconst DATA: SettingsData = [\n  {\n    type: \"SECTION\",\n    header: \"FEED\",\n    rows: [{ title: \"Default Sort\", subtitle: \"Subtitle\" }],\n  },\n];\n","import React, { useEffect, useState } from \"react\";\nimport { Alert, Button, FlatList, Pressable, StyleSheet } from \"react-native\";\nimport { View, Text } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as Haptics from \"../services/HapticService\";\nimport * as LotideService from \"../services/LotideService\";\nimport PostDisplay from \"../components/PostDisplay\";\nimport { ActorDisplay } from \"../components/ActorDisplay\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\nimport useFeed from \"../hooks/useFeed\";\n\nexport default function CommunityScreen({\n  route,\n}: RootStackScreenProps<\"Community\">) {\n  const [community, setCommunity] = useState(route.params.community);\n  const [posts, loadNextPage, refreshPosts] = useFeed({\n    sort: \"hot\",\n    communityId: community.id,\n  });\n  const [reloadId, setReloadId] = useState(0);\n  const theme = useTheme();\n  const ctx = useLotideCtx();\n\n  useEffect(() => {\n    if (!ctx) return;\n    LotideService.getCommunity(ctx, community.id).then(setCommunity);\n  }, [\n    ctx?.apiUrl,\n    route.params.community.id,\n    route.params.community.description,\n    reloadId,\n  ]);\n\n  const renderItem = ({ item }: { item: PostId }) => <Item postId={item} />;\n\n  return (\n    <View style={[styles.root, { backgroundColor: theme.background }]}>\n      <FlatList\n        data={posts}\n        renderItem={renderItem}\n        ListHeaderComponent={\n          <ListHeader community={community} setReloadId={setReloadId} />\n        }\n        keyExtractor={(postId, index) => `${postId}-${index}`}\n        refreshing={posts.length == 0}\n        onRefresh={refreshPosts}\n        onEndReachedThreshold={2}\n        onEndReached={loadNextPage}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    height: \"100%\",\n  },\n  header: {\n    padding: 20,\n    paddingVertical: 15,\n    borderBottomWidth: StyleSheet.hairlineWidth || 1,\n  },\n  title: {\n    fontSize: 20,\n  },\n  description: {\n    marginTop: 10,\n  },\n  buttons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n    borderBottomWidth: 8,\n  },\n});\n\nconst Item = ({ postId }: { postId: PostId }) => {\n  const theme = useTheme();\n  const navigation = useNavigation();\n  return (\n    <Pressable\n      onPress={() => navigation.navigate(\"Post\", { postId })}\n      onLongPress={() => {\n        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n      }}\n    >\n      <View\n        style={[styles.item, { borderBottomColor: theme.secondaryBackground }]}\n      >\n        <PostDisplay postId={postId} navigation={navigation} truncateContent />\n      </View>\n    </Pressable>\n  );\n};\n\ntype ListHeaderProps = {\n  community: Community;\n  setReloadId: (a: (x: number) => number) => void;\n};\n\nconst ListHeader = React.memo((props: ListHeaderProps) => {\n  const theme = useTheme();\n  const navigation = useNavigation();\n  const community = props.community;\n  const setReloadId = props.setReloadId;\n  const ctx = useLotideCtx();\n\n  const isFollowing = community.your_follow?.accepted || false;\n\n  function follow() {\n    if (!ctx) return;\n    LotideService.followCommunity(ctx, community.id).then(data => {\n      if (data.accepted === false) {\n        Alert.alert(\n          \"Follow request rejected.\",\n          \"This could be an issue with the node you are connected to.\",\n        );\n      }\n      setReloadId(x => x + 1);\n    });\n  }\n\n  function unfollow() {\n    if (!ctx) return;\n    LotideService.unfollowCommunity(ctx, community.id).then(() => {\n      setReloadId(x => x + 1);\n    });\n  }\n\n  return (\n    <View\n      style={[\n        styles.header,\n        {\n          borderBottomColor: theme.tertiaryBackground,\n        },\n      ]}\n    >\n      <View>\n        <ActorDisplay\n          name={community.name}\n          host={community.host}\n          local={community.local}\n          newLine={true}\n          colorize=\"always\"\n          showHost=\"always\"\n          styleName={[styles.title]}\n        />\n        {community.description !== \"\" && (\n          <Text style={styles.description}>{community.description}</Text>\n        )}\n      </View>\n      {!!ctx && (\n        <View style={[styles.buttons]}>\n          <Button\n            onPress={() => navigation.navigate(\"NewPostScreen\", { community })}\n            title=\"Post\"\n            color={theme.tint}\n            accessibilityLabel=\"Post to this community\"\n          />\n          {community.you_are_moderator && (\n            <Button\n              onPress={() =>\n                navigation.navigate(\"EditCommunity\", { community })\n              }\n              title=\"Edit\"\n              color={theme.tint}\n              accessibilityLabel=\"Edit your community community\"\n            />\n          )}\n          {isFollowing ? (\n            <Button\n              onPress={unfollow}\n              title=\"Unfollow\"\n              color={theme.secondaryTint}\n              accessibilityLabel=\"Stop seeing posts from this community\"\n            />\n          ) : (\n            <Button\n              onPress={follow}\n              title=\"Follow\"\n              color={theme.tint}\n              accessibilityLabel=\"See posts from this community in your feed\"\n            />\n          )}\n        </View>\n      )}\n    </View>\n  );\n});\n","import React, { useRef, useState } from \"react\";\nimport {\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport { Text, TextInput } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport ContentDisplay from \"../components/ContentDisplay\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\n\nexport default function ReplyScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Reply\">) {\n  const [text, setText] = useState(\"\");\n  const scrollRef = useRef<ScrollView>(null);\n  const theme = useTheme();\n  const ctx = useLotideCtx();\n  const id = route.params.id;\n  const title = route.params.title;\n  const html = route.params.html;\n  const type = route.params.type;\n\n  function submit() {\n    if (!ctx?.login) return;\n    if (type === \"post\") {\n      LotideService.replyToPost(ctx, id, text).then(() => navigation.pop());\n    } else {\n      LotideService.replyToReply(ctx, id, text).then(() => navigation.pop());\n    }\n  }\n\n  function scrollToBottom() {\n    if (scrollRef.current) {\n      scrollRef.current.scrollToEnd({ animated: true });\n    }\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n      style={{ flex: 1, backgroundColor: theme.background }}\n    >\n      <ScrollView ref={scrollRef}>\n        <Pressable\n          style={styles.root}\n          onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n        >\n          <Text>Reply to {type}</Text>\n          {!!title && <Text style={styles.title}>{title}</Text>}\n          {!!html && <ContentDisplay contentHtml={html} />}\n          <TextInput\n            style={styles.input}\n            multiline\n            placeholder=\"Type your reply\"\n            value={text}\n            onChangeText={setText}\n            onFocus={scrollToBottom}\n          />\n          <Button title=\"Submit\" color={theme.tint} onPress={submit} />\n        </Pressable>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: { padding: 20, paddingBottom: 100 },\n  title: {\n    fontSize: 20,\n    marginVertical: 10,\n  },\n  input: {\n    marginVertical: 20,\n    minHeight: 100,\n  },\n});\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../store/reduxStore\";\nimport { useLotideCtx } from \"./useLotideCtx\";\nimport * as LotideService from \"../services/LotideService\";\nimport { editReply, setReplyMulti } from \"../slices/replySlice\";\nimport { editPost } from \"../slices/postSlice\";\n\n/**\n * Gets child reply IDs\n */\nexport default function useReplies(\n  type: ContentType,\n  id: number,\n): { replies?: Paged<ReplyId>; loadNextPage: () => void } {\n  const dispatch = useDispatch();\n  const replies: Paged<ReplyId> | undefined = useSelector((state: RootState) =>\n    type == \"post\"\n      ? state.posts.posts[id]?.replies\n      : state.replies.replies[id]?.replies,\n  );\n  const ctx = useLotideCtx();\n\n  useEffect(() => {\n    if (!replies && type == \"post\") {\n      loadNextPage();\n    }\n  }, [!!replies]);\n\n  function loadNextPage() {\n    if (!ctx) return;\n    if (replies && replies.next_page === null) return;\n    switch (type) {\n      case \"post\":\n        LotideService.getPostReplies(\n          ctx,\n          id,\n          replies?.next_page || undefined,\n        ).then(newReplies => {\n          dispatch(setReplyMulti({ replies: newReplies[1] }));\n          dispatch(\n            editPost({\n              id,\n              post: {\n                replies: {\n                  items: [\n                    ...(replies?.items || []),\n                    ...(newReplies[0]?.items || []),\n                  ],\n                  next_page: newReplies[0]?.next_page || null,\n                },\n              },\n            }),\n          );\n        });\n        break;\n      case \"reply\":\n        LotideService.getReplyReplies(\n          ctx,\n          id,\n          replies?.next_page || undefined,\n        ).then(newReplies => {\n          dispatch(setReplyMulti({ replies: newReplies[1] }));\n          dispatch(\n            editReply({\n              id,\n              reply: {\n                replies: {\n                  items: [\n                    ...(replies?.items || []),\n                    ...(newReplies[0]?.items || []),\n                  ],\n                  next_page: newReplies[0]?.next_page || null,\n                },\n              },\n            }),\n          );\n        });\n        break;\n    }\n  }\n\n  return {\n    replies,\n    loadNextPage,\n  };\n}\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../store/reduxStore\";\nimport { useLotideCtx } from \"./useLotideCtx\";\nimport * as LotideService from \"../services/LotideService\";\nimport { setReplyMulti } from \"../slices/replySlice\";\n\n/**\n * Gets a single reply\n *\n * For child replies, see useReplies\n */\nexport default function useReply(replyId?: ReplyId): Reply | undefined {\n  const dispatch = useDispatch();\n  const reply: Reply | undefined = useSelector((state: RootState) =>\n    replyId ? state.replies.replies[replyId] : undefined,\n  );\n  const ctx = useLotideCtx();\n\n  useEffect(() => {\n    if (!ctx) return;\n    if (!replyId) return;\n    if (!reply) {\n      LotideService.getReply(ctx, replyId)\n        .then(replies => {\n          dispatch(setReplyMulti({ replies }));\n        })\n        .catch(() => console.log(`Reply ${replyId} could not be loaded`));\n    }\n  }, [reply?.id]);\n\n  return (\n    reply && {\n      ...reply,\n      replies: undefined,\n    }\n  );\n}\n","import React from \"react\";\nimport { ColorValue, Pressable, StyleSheet, View } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport ElapsedTime from \"./ElapsedTime\";\nimport ContentDisplay from \"./ContentDisplay\";\nimport VoteCounter from \"./VoteCounter\";\nimport ActorDisplay from \"./ActorDisplay\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\nimport useReplies from \"../hooks/useReplies\";\nimport useReply from \"../hooks/useReply\";\nimport useSelectedReply from \"../hooks/useSelectedReply\";\n\nexport interface RepliesDisplayProps {\n  parentType: ContentType;\n  parentId: number;\n  navigation: any;\n  layer?: number;\n  postId?: PostId;\n  highlightedReplies?: ReplyId[];\n}\n\nexport default function RepliesDisplay({\n  parentType,\n  parentId,\n  navigation,\n  layer = 0,\n  postId,\n  highlightedReplies = [],\n}: RepliesDisplayProps) {\n  const { replies, loadNextPage } = useReplies(parentType, parentId);\n  const theme = useTheme();\n  const ctx = useLotideCtx();\n  if (!ctx) return null;\n  const layerColors = [\n    theme.text,\n    theme.red,\n    theme.orange,\n    theme.yellow,\n    theme.green,\n    theme.teal,\n    theme.blue,\n    theme.indigo,\n    theme.purple,\n  ];\n\n  if (!replies) return <Text>Can't find replies</Text>;\n\n  return (\n    <View>\n      {replies.items.map(replyId => (\n        <ReplyDisplay\n          replyId={replyId}\n          layer={layer}\n          key={replyId}\n          navigation={navigation}\n          layerColors={layerColors}\n          postId={postId}\n          highlightedReplies={highlightedReplies}\n        />\n      ))}\n      {replies.next_page !== null && (\n        <Pressable hitSlop={5} onPress={loadNextPage}>\n          <Text style={{ color: theme.tint, paddingTop: 5, paddingBottom: 10 }}>\n            More replies <Icon name=\"chevron-down-outline\" />\n          </Text>\n        </Pressable>\n      )}\n      {replies.next_page === null && layer === 0 && (\n        <Text style={{ margin: 17, color: theme.secondaryText }}>\n          {replies.items.length > 0 ? \"No more replies\" : \"No replies yet\"}\n        </Text>\n      )}\n    </View>\n  );\n}\n\nfunction ReplyDisplay({\n  replyId,\n  layer = 0,\n  navigation,\n  layerColors,\n  postId,\n  highlightedReplies = [],\n}: {\n  replyId: ReplyId;\n  layer: number;\n  navigation: any;\n  layerColors: ColorValue[];\n  postId?: PostId;\n  highlightedReplies?: ReplyId[];\n}) {\n  const reply = useReply(replyId);\n  const { replies, loadNextPage } = useReplies(\"reply\", replyId);\n  const [showChildren, setShowChildren] = React.useState(true);\n  const theme = useTheme();\n  const ctx = useLotideCtx();\n  const [selectedReply, setSelectedReply] = useSelectedReply();\n\n  if (!ctx) return null;\n\n  if (!reply) return <Text>Failed to load reply</Text>;\n\n  return (\n    <View style={{ paddingLeft: 0 }}>\n      <View\n        style={{\n          paddingVertical: 8,\n          borderTopWidth: 0.5,\n          borderTopColor: theme.secondaryBackground,\n        }}\n      >\n        <Pressable\n          onPress={() =>\n            setSelectedReply(selectedReply != reply.id ? reply.id : undefined)\n          }\n        >\n          <View\n            style={{\n              borderLeftWidth: 2,\n              borderColor: layerColors[layer % layerColors.length],\n              paddingLeft: 15,\n              paddingVertical: 3,\n              backgroundColor: highlightedReplies.includes(reply.id)\n                ? theme.secondaryBackground\n                : theme.background,\n            }}\n          >\n            <View\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                flexWrap: \"wrap\",\n                marginBottom: 5,\n              }}\n            >\n              <ActorDisplay\n                name={reply.author.username}\n                host={reply.author.host}\n                local={reply.author.local}\n                showHost=\"only_foreign\"\n                colorize=\"only_foreign\"\n                style={{ fontSize: 16, fontWeight: \"500\" }}\n                userId={reply.author.id}\n              />\n              <View\n                style={{\n                  marginRight: 15,\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Text>{!showChildren && \"...    \"}</Text>\n                <Icon\n                  name={reply.your_vote ? \"heart\" : \"heart-outline\"}\n                  size={14}\n                  color={theme.text}\n                  light\n                />\n                <Text>{` ${reply.score}   `}</Text>\n                <ElapsedTime time={reply.created} />\n              </View>\n            </View>\n            {showChildren && !!reply.content_html && (\n              <ContentDisplay\n                contentHtml={reply.content_html}\n                contentText={reply.content_text}\n              />\n            )}\n          </View>\n          {selectedReply == reply.id && (\n            <View style={styles.buttons}>\n              <VoteCounter\n                type=\"reply\"\n                content={reply}\n                hideCount\n                style={styles.button}\n              />\n              {/* <Pressable style={styles.button}>\n                <Icon color={theme.text} size={20} name=\"bookmark-outline\" />\n              </Pressable> */}\n              <Pressable\n                style={styles.button}\n                onPress={() => {\n                  Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n                  navigation.navigate(\"Reply\", {\n                    id: reply.id,\n                    title: reply.author.username,\n                    html: reply.content_html,\n                    type: \"reply\",\n                  });\n                }}\n              >\n                <Icon color={theme.text} size={20} name=\"arrow-undo-outline\" />\n              </Pressable>\n              <Pressable\n                style={styles.button}\n                onPress={() => {\n                  setShowChildren(s => !s);\n                }}\n              >\n                <Icon\n                  color={\n                    (reply.replies?.items.length || 0) > 0\n                      ? theme.text\n                      : theme.secondaryText\n                  }\n                  size={20}\n                  name={\n                    showChildren ? \"chevron-up-outline\" : \"chevron-down-outline\"\n                  }\n                />\n              </Pressable>\n              {/* <Pressable style={styles.button}>\n                <Icon\n                  color={theme.text}\n                  size={20}\n                  name=\"ellipsis-vertical-outline\"\n                />\n              </Pressable> */}\n            </View>\n          )}\n        </Pressable>\n      </View>\n      {replies &&\n        replies.items.length > 0 &&\n        (showChildren ? (\n          <View style={{ paddingLeft: 15 }}>\n            <RepliesDisplay\n              parentType=\"reply\"\n              parentId={replyId}\n              layer={layer + 1}\n              navigation={navigation}\n              postId={postId}\n              highlightedReplies={highlightedReplies}\n            />\n          </View>\n        ) : (\n          <Text>...</Text>\n        ))}\n      {replies == undefined && (\n        <Pressable hitSlop={5} onPress={loadNextPage}>\n          <View style={{ paddingHorizontal: 15, paddingBottom: 10 }}>\n            <Text style={{ color: theme.tint }}>\n              More replies <Icon name=\"chevron-forward-outline\" />\n            </Text>\n          </View>\n        </Pressable>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    paddingHorizontal: 15,\n  },\n  button: {\n    padding: 10,\n    paddingHorizontal: 15,\n  },\n});\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { setSelectedReply } from \"../slices/replySlice\";\nimport { RootState } from \"../store/reduxStore\";\n\nexport default function useSelectedReply(): [\n  ReplyId | undefined,\n  (id?: ReplyId) => void,\n] {\n  const dispatch = useDispatch();\n  const selectedReply = useSelector(\n    (state: RootState) => state.replies.selectedReply,\n  );\n  function set(id?: ReplyId) {\n    dispatch(setSelectedReply(id));\n  }\n  return [selectedReply, set];\n}\n","import Icon from \"@expo/vector-icons/Ionicons\";\nimport React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  StatusBar,\n  ScrollView,\n  Pressable,\n  Share,\n} from \"react-native\";\nimport * as Haptics from \"../services/HapticService\";\nimport PostDisplay from \"../components/PostDisplay\";\nimport { View, Text } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport RepliesDisplay from \"../components/RepliesDisplay\";\nimport usePost from \"../hooks/usePost\";\n\nexport default function ModalScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Post\">) {\n  const postId = route.params.postId;\n  const post = usePost(postId);\n  const [highlightedReplies, setHighlightedReplies] = useState(\n    route.params.highlightedReplies,\n  );\n  const theme = useTheme();\n\n  if (!post) return <Text>No post</Text>;\n\n  return (\n    <ScrollView style={{ backgroundColor: theme.background }}>\n      <View\n        style={{\n          ...styles.item,\n          backgroundColor: theme.background,\n        }}\n      >\n        <PostDisplay postId={post.id} navigation={navigation} showAuthor />\n        <View style={styles.actions}>\n          <Icon name=\"bookmark-outline\" size={25} color={theme.text} />\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              navigation.navigate(\"Reply\", {\n                id: post.id,\n                title: post.title,\n                html: post.content_html,\n                type: \"post\",\n              });\n            }}\n          >\n            <Icon name=\"arrow-undo-outline\" size={25} color={theme.text} />\n          </Pressable>\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              Share.share({\n                message: post.title,\n                url: `https://dev.goldandblack.xyz/p/posts/${post.id}`,\n                title: \"Hoot\",\n              });\n            }}\n          >\n            <Icon name=\"share-outline\" size={25} color={theme.text} />\n          </Pressable>\n        </View>\n        {highlightedReplies && (\n          <Pressable onPress={() => setHighlightedReplies(undefined)}>\n            <Text style={{ color: theme.tint, paddingVertical: 10 }}>\n              Show all replies\n            </Text>\n          </Pressable>\n        )}\n        <RepliesDisplay\n          parentType=\"post\"\n          parentId={post.id}\n          navigation={navigation}\n          postId={post.id}\n          highlightedReplies={highlightedReplies}\n        />\n        <View style={{ height: 300 }} />\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    backgroundColor: \"#8884\",\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n    borderBottomColor: \"#8884\",\n    borderBottomWidth: 2,\n  },\n  by: {\n    fontSize: 11,\n  },\n  actions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    padding: 10,\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import { useNavigation } from \"@react-navigation/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { FlatList, Pressable, StyleSheet } from \"react-native\";\nimport ActorDisplay from \"../components/ActorDisplay\";\nimport ContentDisplay from \"../components/ContentDisplay\";\nimport SuggestLogin from \"../components/SuggestLogin\";\n\nimport { Text, View } from \"../components/Themed\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\nimport usePost from \"../hooks/usePost\";\nimport useReply from \"../hooks/useReply\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as LotideService from \"../services/LotideService\";\nimport { RootTabScreenProps } from \"../types\";\n\nexport default function NotificationScreen({\n  navigation,\n}: RootTabScreenProps<\"NotificationScreen\">) {\n  const [notifications, setNotifications] = useState<FullNotification[]>([]);\n  const [isRefreshing, setIsRefreshing] = useState(true);\n  const [focusId, setFocusId] = useState(0);\n  const theme = useTheme();\n  const ctx = useLotideCtx();\n\n  useEffect(() => {\n    if (!ctx?.login) return;\n    LotideService.getNotifications(ctx)\n      .then(setNotifications)\n      .then(() => setIsRefreshing(false));\n  }, [focusId]);\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(i => i + 1)),\n    [],\n  );\n\n  if (!ctx?.login) return <SuggestLogin />;\n\n  const renderItem = ({ item }: { item: FullNotification }) => (\n    <Item item={item} />\n  );\n\n  return (\n    <FlatList\n      style={[styles.container, { backgroundColor: theme.background }]}\n      data={notifications}\n      renderItem={renderItem}\n      keyExtractor={(item, index) => `${item.replyId}-${index}`}\n      refreshing={isRefreshing}\n      onRefresh={() => {\n        setIsRefreshing(true);\n        setFocusId(i => i + 1);\n      }}\n    ></FlatList>\n  );\n}\n\nconst Item = ({ item }: { item: FullNotification }) => {\n  const post = usePost(item.postId);\n  const originReply = useReply(\n    item.origin.type == \"reply\" ? item.origin.id : undefined,\n  );\n  const reply = useReply(item.replyId);\n  const theme = useTheme();\n  const navigation = useNavigation();\n\n  if (!post || !reply || (item.origin.type === \"reply\" && !originReply))\n    return null;\n\n  return (\n    <Pressable\n      style={[\n        styles.item,\n        {\n          borderBottomColor: theme.secondaryBackground,\n        },\n      ]}\n      onPress={() => {\n        const highlightedReplies =\n          item.origin.type === \"reply\"\n            ? [item.origin.id, item.replyId]\n            : [item.replyId];\n        navigation.navigate(\"Post\", {\n          postId: item.postId,\n          highlightedReplies,\n        });\n      }}\n    >\n      <Text>\n        New reply to your {item.origin.type == \"post\" ? \"Post\" : \"Reply\"}\n      </Text>\n      <Text style={styles.title}>{post.title}</Text>\n      <ActorDisplay\n        name={post.author.username}\n        host={post.author.host}\n        local={post.author.local}\n        showHost=\"only_foreign\"\n        colorize=\"never\"\n        userId={post.author.id}\n      />\n      {item.origin.type === \"reply\" && originReply ? (\n        <>\n          <View style={[styles.level1, { borderColor: theme.secondaryText }]}>\n            <ActorDisplay\n              name={originReply.author.username}\n              host={originReply.author.host}\n              local={originReply.author.local}\n              showHost=\"only_foreign\"\n              colorize=\"only_foreign\"\n              userId={originReply.author.id}\n            />\n            <ContentDisplay\n              contentHtml={originReply.content_html}\n              contentText={originReply.content_text}\n            />\n          </View>\n          <View\n            style={[\n              styles.level2,\n              {\n                borderColor: theme.tint,\n                backgroundColor: theme.secondaryBackground,\n              },\n            ]}\n          >\n            <ActorDisplay\n              name={reply.author.username}\n              host={reply.author.host}\n              local={reply.author.local}\n              showHost=\"only_foreign\"\n              colorize=\"only_foreign\"\n            />\n            <ContentDisplay\n              contentHtml={reply.content_html}\n              contentText={reply.content_text}\n            />\n          </View>\n        </>\n      ) : (\n        <>\n          <View\n            style={[\n              styles.level1,\n              {\n                borderColor: theme.tint,\n                backgroundColor: theme.secondaryBackground,\n              },\n            ]}\n          >\n            <ActorDisplay\n              name={reply.author.username}\n              host={reply.author.host}\n              local={reply.author.local}\n              showHost=\"only_foreign\"\n              colorize=\"only_foreign\"\n            />\n            <ContentDisplay\n              contentHtml={reply.content_html}\n              contentText={reply.content_text}\n            />\n          </View>\n        </>\n      )}\n      <View style={styles.community}>\n        <ActorDisplay\n          name={post.community.name}\n          host={post.community.host}\n          local={post.community.local}\n          showHost={\"always\"}\n          colorize={\"never\"}\n          newLine\n        />\n      </View>\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  item: {\n    borderBottomWidth: 5,\n    padding: 15,\n  },\n  title: {\n    fontSize: 20,\n    marginTop: 15,\n  },\n  level1: {\n    marginTop: 15,\n    borderLeftWidth: 2,\n    paddingLeft: 15,\n    padding: 5,\n  },\n  level2: {\n    marginTop: 5,\n    marginLeft: 15,\n    borderLeftWidth: 2,\n    paddingLeft: 15,\n    padding: 5,\n  },\n  name: {\n    fontWeight: \"600\",\n    marginBottom: 3,\n  },\n  thin: {\n    fontWeight: \"200\",\n  },\n  community: {\n    marginTop: 15,\n  },\n});\n","import { lotideRequest } from \"./util\";\n\nexport async function getNotifications(\n  ctx: LotideContext,\n): Promise<FullNotification[]> {\n  return lotideRequest(ctx, \"GET\", \"users/~me/notifications\")\n    .then(data => data.json())\n    .then((data: UserNotification[]) =>\n      data.map(x => transformToFullNotification(x)),\n    );\n}\n\nexport function transformToFullNotification(\n  notification: UserNotification,\n): FullNotification {\n  return {\n    unseen: notification.unseen,\n    replyId: notification.reply.id,\n    origin: notification.comment\n      ? { type: \"reply\", id: notification.comment! }\n      : { type: \"post\", id: notification.post.id },\n    postId: notification.post.id,\n  };\n}\n","import React, { useState } from \"react\";\nimport { Alert, Button, StyleSheet, TextInput } from \"react-native\";\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\n\nexport default function NewCommunityScreen({\n  navigation,\n}: RootStackScreenProps<\"NewCommunity\">) {\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const theme = useTheme();\n  const ctx = useLotideCtx();\n\n  if (!ctx) return null;\n\n  function submit() {\n    if (!ctx?.login) return;\n    LotideService.newCommunity(ctx, name)\n      .then(async data => {\n        const id = data.community.id;\n        if (description) {\n          await LotideService.editCommunity(ctx, id, description);\n        }\n        await LotideService.followCommunity(ctx, id);\n        const community = await LotideService.getCommunity(ctx, id);\n        navigation.replace(\"Community\", { community });\n      })\n      .catch(e => Alert.alert(\"Failed to create community\", e));\n  }\n\n  return (\n    <View style={styles.root}>\n      <TextInput\n        style={[styles.input, { fontSize: 20, color: theme.text }]}\n        placeholder=\"Community Name\"\n        placeholderTextColor={theme.placeholderText}\n        value={name}\n        onChangeText={setName}\n      />\n      {name.length >= 4 ? (\n        <>\n          <TextInput\n            style={[styles.input, { color: theme.text }]}\n            placeholder=\"Description (Optional)\"\n            placeholderTextColor={theme.placeholderText}\n            value={description}\n            onChangeText={setDescription}\n          />\n          <Button\n            title=\"Submit\"\n            color={theme.tint}\n            onPress={submit}\n            accessibilityLabel=\"Create new community\"\n          />\n        </>\n      ) : (\n        <Text>{name.length > 0 && 4 - name.length}</Text>\n      )}\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"flex-start\",\n    padding: 15,\n    height: \"100%\",\n    width: \"100%\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    paddingVertical: 10,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  item: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginBottom: 1,\n  },\n});\n","import React, { useState } from \"react\";\nimport { RootStackScreenProps } from \"../types\";\nimport { Text, TextInput, View } from \"../components/Themed\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as LotideService from \"../services/LotideService\";\n\nexport default function ForgotPasswordScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"ForgotPassword\">) {\n  const [isAwaitingKey, setIsAwaitingKey] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [validKey, setValidKey] = useState<string>();\n  const [password, setPassword] = useState(\"\");\n  const theme = useTheme();\n\n  function submitEmail() {\n    if (!email)\n      return Alert.alert(\n        \"Email address required\",\n        \"An email with a password reset key will be emailed to you\",\n      );\n    LotideService.forgotPasswordRequestKey(\n      { apiUrl: `https://${route.params.node}/api/unstable` },\n      email,\n    )\n      .then(() => {\n        setIsAwaitingKey(true);\n      })\n      .catch(e => Alert.alert(\"Failed to send reset key\", e));\n  }\n\n  function submitPassword() {\n    if (!password) return Alert.alert(\"Password required\");\n    if (!validKey) return Alert.alert(\"No key\", \"Fail. This shouldn't happen\");\n    LotideService.forgotPasswordReset(\n      { apiUrl: `https://${route.params.node}/api/unstable` },\n      validKey,\n      password,\n    ).then(() => navigation.popToTop());\n  }\n\n  function keyChange(key: string) {\n    if (key.length < 6) return;\n    LotideService.forgotPasswordTestKey(\n      { apiUrl: `https://${route.params.node}/api/unstable` },\n      key,\n    ).then(() => setValidKey(key));\n  }\n\n  return (\n    <Pressable\n      style={{ flex: 1 }}\n      onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n    >\n      <KeyboardAvoidingView style={styles.root} behavior=\"padding\">\n        <Pressable>\n          <Text>{route.params.node}</Text>\n        </Pressable>\n        {!isAwaitingKey ? (\n          <>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Email Address\"\n              value={email}\n              onChangeText={setEmail}\n              keyboardType=\"email-address\"\n              textContentType=\"emailAddress\"\n              autoCompleteType=\"email\"\n              returnKeyType=\"go\"\n              autoCapitalize=\"none\"\n            />\n            <Button title=\"Submit\" onPress={submitEmail} color={theme.tint} />\n          </>\n        ) : (\n          <>\n            {validKey ? (\n              <>\n                <TextInput\n                  placeholder=\"New Password\"\n                  style={styles.input}\n                  value={password}\n                  onChangeText={setPassword}\n                  autoCapitalize=\"none\"\n                  secureTextEntry={true}\n                  textContentType=\"password\"\n                  autoCompleteType=\"password\"\n                />\n                <View style={styles.actionButtons}>\n                  <Button\n                    title=\"Go Back\"\n                    onPress={() => setIsAwaitingKey(false)}\n                    color={theme.secondaryTint}\n                  />\n                  <Button\n                    title=\"Submit\"\n                    onPress={submitPassword}\n                    color={theme.tint}\n                  />\n                </View>\n              </>\n            ) : (\n              <TextInput\n                placeholder=\"Key\"\n                style={styles.input}\n                onChangeText={keyChange}\n                autoCapitalize=\"none\"\n              />\n            )}\n          </>\n        )}\n      </KeyboardAvoidingView>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 30,\n  },\n  input: {\n    width: \"100%\",\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    marginTop: 15,\n  },\n  actionButtons: {\n    display: \"flex\",\n    width: \"100%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n});\n","import React, { useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport { TextInput } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport ActorDisplay from \"../components/ActorDisplay\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\n\nexport default function ReplyScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"EditCommunity\">) {\n  const community = route.params.community;\n  const [description, setDescription] = useState(community.description || \"\");\n  const theme = useTheme();\n  const ctx = useLotideCtx();\n\n  function submit() {\n    if (!ctx) return;\n    LotideService.editCommunity(ctx, community.id, description)\n      .then(() => LotideService.getCommunity(ctx, community.id))\n      .then(data =>\n        navigation.navigate(\"Community\", {\n          community: { ...data, description },\n        }),\n      )\n      .catch(e => Alert.alert(\"Failed to edit community\", e));\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n    >\n      <Pressable\n        style={styles.root}\n        onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n      >\n        <ActorDisplay\n          name={community.name}\n          host={community.host}\n          local={community.local}\n          showHost=\"always\"\n          newLine\n          style={styles.title}\n        />\n        <TextInput\n          style={styles.input}\n          multiline\n          placeholder=\"Add a description\"\n          value={description}\n          onChangeText={setDescription}\n        />\n        <Button title=\"Submit\" color={theme.tint} onPress={submit} />\n      </Pressable>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: { padding: 20, paddingBottom: 100 },\n  title: {\n    fontSize: 20,\n    marginVertical: 10,\n  },\n  input: {\n    marginVertical: 20,\n    minHeight: 100,\n  },\n});\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport React, { useEffect, useState } from \"react\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport {\n  ActionSheetIOS,\n  ColorSchemeName,\n  Platform,\n  Pressable,\n  useWindowDimensions,\n} from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport {\n  RootStackParamList,\n  RootTabParamList,\n  RootTabScreenProps,\n} from \"../types\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\n\nimport FeedScreen from \"../screens/FeedScreen\";\nimport SearchScreen from \"../screens/SearchScreen\";\nimport ProfileScreen from \"../screens/ProfileScreen\";\nimport NewPostScreen from \"../screens/NewPostScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen/SettingsScreen\";\nimport CommunityScreen from \"../screens/CommunityScreen\";\nimport ReplyScreen from \"../screens/ReplyScreen\";\nimport ModalScreen from \"../screens/ModalScreen\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport NotificationScreen from \"../screens/NotificationScreen\";\nimport NewCommunityScreen from \"../screens/NewCommunity\";\nimport ForgotPasswordScreen from \"../screens/ForgotPasswordScreen\";\nimport EditCommunityScreen from \"../screens/EditCommunityScreen\";\nimport { useLotideCtx } from \"../hooks/useLotideCtx\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\n\nexport default function Navigation({\n  colorScheme,\n}: {\n  colorScheme: ColorSchemeName;\n}) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n    >\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  const dimensions = useWindowDimensions();\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Root\"\n        component={\n          dimensions.width < 1200 ? BottomTabNavigator : DrawerNavigator\n        }\n        options={{ headerShown: false }}\n      />\n      <Stack.Screen name=\"Web\" component={ModalScreen} />\n      <Stack.Screen name=\"Post\" component={ModalScreen} />\n      <Stack.Screen name=\"Reply\" component={ReplyScreen} />\n      <Stack.Screen name=\"Community\" component={CommunityScreen} />\n      <Stack.Screen name=\"NewCommunity\" component={NewCommunityScreen} />\n      <Stack.Screen name=\"EditCommunity\" component={EditCommunityScreen} />\n      <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n      <Stack.Screen\n        name=\"ForgotPassword\"\n        component={ForgotPasswordScreen}\n        options={{ title: \"Forgot Password\" }}\n      />\n      <Stack.Screen\n        name=\"NotFound\"\n        component={NotFoundScreen}\n        options={{ title: \"Oops!\" }}\n      />\n      <Stack.Group screenOptions={{ presentation: \"modal\" }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator({ navigation }: any) {\n  const [sort, setSort] = useState<SortOption>(\"hot\");\n  const ctx = useLotideCtx();\n  const colorScheme = useColorScheme();\n\n  useEffect(() => {\n    if ((ctx?.apiVersion || 0) < 10 && sort == \"top\") {\n      setSort(\"hot\");\n      navigation.navigate(\"FeedScreen\", { sort: \"hot\" });\n    }\n  }, [ctx?.apiVersion]);\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"FeedScreen\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint as unknown as string,\n        tabBarShowLabel: false,\n      }}\n    >\n      <BottomTab.Screen\n        name=\"FeedScreen\"\n        component={FeedScreen}\n        initialParams={{ sort }}\n        options={({ navigation }: RootTabScreenProps<\"FeedScreen\">) => ({\n          title: \"Hoot\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"newspaper-outline\" color={color} />\n          ),\n          headerRight: () => (\n            <Pressable\n              onPress={() => {\n                console.log(ctx);\n                if (Platform.OS == \"ios\") {\n                  ActionSheetIOS.showActionSheetWithOptions(\n                    {\n                      options: [\n                        \"Cancel\",\n                        \"Hot\",\n                        \"New\",\n                        (ctx?.apiVersion || 0) >= 10 ? \"Top\" : \"\",\n                      ].filter(x => !!x),\n                      title: \"Sort by:\",\n                      cancelButtonIndex: 0,\n                    },\n                    buttonIndex => {\n                      const newSort = [sort, \"hot\", \"new\", \"top\"][\n                        buttonIndex\n                      ] as SortOption;\n                      setSort(newSort);\n                      navigation.navigate(\"FeedScreen\", { sort: newSort });\n                    },\n                  );\n                } else {\n                  const sortSwitch: { [key: string]: SortOption } = {\n                    top: \"hot\",\n                    hot: \"new\",\n                    new: (ctx?.apiVersion || 0) < 10 ? \"hot\" : \"top\",\n                  };\n                  const newSort: SortOption = sortSwitch[sort];\n                  setSort(newSort);\n                  navigation.navigate(\"FeedScreen\", { sort: newSort });\n                }\n              }}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}\n            >\n              <Icon\n                name={\n                  {\n                    hot: \"flame-outline\",\n                    new: \"time-outline\",\n                    top: \"trophy-outline\",\n                  }[sort] as any\n                }\n                size={25}\n                color={Colors[colorScheme].tint}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"SearchScreen\"\n        component={SearchScreen}\n        options={{\n          title: \"Communities\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"search-outline\" color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"NewPostScreen\"\n        component={NewPostScreen}\n        initialParams={{ community: undefined }}\n        options={{\n          title: \"New Post\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"add-outline\" color={color} size={40} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"NotificationScreen\"\n        component={NotificationScreen}\n        options={{\n          title: \"Notifications\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"notifications-outline\" color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{\n          title: \"Profile\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"person-circle-outline\" color={color} />\n          ),\n          headerLeft: () => (\n            <Pressable\n              onPress={() => {\n                navigation.navigate(\"Settings\");\n              }}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}\n            >\n              <Icon\n                name=\"cog-outline\"\n                size={25}\n                color={Colors[colorScheme].secondaryText}\n                style={{ marginLeft: 15 }}\n              />\n            </Pressable>\n          ),\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\nconst Drawer = createDrawerNavigator<RootTabParamList>();\n\nfunction DrawerNavigator({ navigation }: any) {\n  const [sort, setSort] = useState<SortOption>(\"hot\");\n  const ctx = useLotideCtx();\n  const colorScheme = useColorScheme();\n\n  return (\n    <Drawer.Navigator\n      initialRouteName=\"FeedScreen\"\n      screenOptions={{\n        drawerActiveTintColor: \"orange\",\n        drawerType: \"permanent\",\n      }}\n    >\n      <Drawer.Screen\n        name=\"FeedScreen\"\n        component={FeedScreen}\n        initialParams={{ sort }}\n        options={({ navigation }: RootTabScreenProps<\"FeedScreen\">) => ({\n          title: \"Hoot\",\n          drawerIcon: ({ color }) => (\n            <TabBarIcon name=\"newspaper-outline\" color={color} />\n          ),\n          headerRight: () => (\n            <Pressable\n              onPress={() => {\n                const sortSwitch: { [key: string]: SortOption } = {\n                  top: \"hot\",\n                  hot: \"new\",\n                  new: (ctx?.apiVersion || 0) < 10 ? \"hot\" : \"top\",\n                };\n                const newSort: SortOption = sortSwitch[sort];\n                setSort(newSort);\n                navigation.navigate(\"FeedScreen\", { sort: newSort });\n              }}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}\n            >\n              <Icon\n                name={\n                  {\n                    hot: \"flame-outline\",\n                    new: \"time-outline\",\n                    top: \"arrow-up-outline\",\n                  }[sort] as any\n                }\n                size={25}\n                color={Colors[colorScheme].tint}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <Drawer.Screen\n        name=\"SearchScreen\"\n        component={SearchScreen}\n        options={{\n          title: \"Communities\",\n          drawerIcon: ({ color }) => (\n            <TabBarIcon name=\"search-outline\" color={color} />\n          ),\n        }}\n      />\n      <Drawer.Screen\n        name=\"NewPostScreen\"\n        component={NewPostScreen}\n        initialParams={{ community: undefined }}\n        options={{\n          title: \"New Post\",\n          drawerIcon: ({ color }) => (\n            <TabBarIcon name=\"add-outline\" color={color} size={40} />\n          ),\n        }}\n      />\n      <Drawer.Screen\n        name=\"NotificationScreen\"\n        component={NotificationScreen}\n        options={{\n          title: \"Notifications\",\n          drawerIcon: ({ color }) => (\n            <TabBarIcon name=\"notifications-outline\" color={color} />\n          ),\n        }}\n      />\n      <Drawer.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{\n          title: \"Profile\",\n          drawerIcon: ({ color }) => (\n            <TabBarIcon name=\"person-circle-outline\" color={color} />\n          ),\n          headerRight: () => (\n            <Pressable\n              onPress={() => {\n                navigation.navigate(\"Settings\");\n              }}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}\n            >\n              <Icon\n                name=\"settings-outline\"\n                size={25}\n                color={Colors[colorScheme].secondaryText}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        }}\n      />\n    </Drawer.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof Icon>[\"name\"];\n  color: string;\n  size?: number;\n}) {\n  const size = props.size || 30;\n  return (\n    <Icon\n      size={size}\n      style={{\n        marginBottom: -3,\n        height: size,\n        width: size,\n      }}\n      {...props}\n    />\n  );\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport postReducer from \"../slices/postSlice\";\nimport lotideReducer from \"../slices/lotideSlice\";\nimport replyReducer from \"../slices/replySlice\";\n\nconst store = configureStore({\n  reducer: {\n    lotide: lotideReducer,\n    posts: postReducer,\n    replies: replyReducer,\n  },\n});\n\nexport default store;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect } from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\nimport * as StorageService from \"./services/StorageService\";\nimport * as LotideService from \"./services/LotideService\";\nimport { Provider, useDispatch } from \"react-redux\";\nimport { setCtx } from \"./slices/lotideSlice\";\nimport reduxStore from \"./store/reduxStore\";\nimport { useLotideCtx } from \"./hooks/useLotideCtx\";\nimport { Alert } from \"react-native\";\n\nfunction App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n  const ctx = useLotideCtx();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    StorageService.lotideContext.query().then(ctx => {\n      if (ctx !== undefined) {\n        dispatch(setCtx(ctx));\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!ctx?.apiUrl) return;\n    LotideService.getInstanceInfo(ctx)\n      .then(data => {\n        console.log(ctx);\n        console.log(\"version\", data.apiVersion);\n        if (data.apiVersion < 8 || data.apiVersion > 10) throw \"Bad version\";\n        if (data.apiVersion == ctx.apiVersion) return;\n        applyNewContext({\n          ...ctx,\n          apiVersion: data.apiVersion,\n        });\n      })\n      .catch(e => {\n        Alert.alert(\"Failed to login\", e);\n        StorageService.lotideContextKV\n          .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n          .then(() => applyNewContext({}));\n      });\n    if (!ctx.login) return;\n    LotideService.getUserData(ctx, ctx.login.user.id).catch(() => {\n      StorageService.lotideContextKV\n        .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n        .then(() => applyNewContext({}));\n    });\n  }, [ctx?.apiUrl, ctx?.apiVersion]);\n\n  function applyNewContext(ctx: LotideContext) {\n    StorageService.lotideContextKV\n      .store(ctx)\n      .then(() => AsyncStorage.setItem(\"@lotide_ctx\", JSON.stringify(ctx)))\n      .then(() => dispatch(setCtx(ctx)));\n  }\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n\nexport default function () {\n  return (\n    <Provider store={reduxStore}>\n      <App />\n    </Provider>\n  );\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}
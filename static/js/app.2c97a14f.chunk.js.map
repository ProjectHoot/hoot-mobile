{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","navigation/LinkingConfiguration.ts","hooks/useTheme.ts","components/Themed.tsx","hooks/useElapsedTime.ts","components/ElapsedTime.tsx","services/HapticService.ts","store/LotideContext.ts","services/LotideService.ts","components/VoteCounter.tsx","components/ContentDisplay.tsx","components/ActorDisplay.tsx","components/PostDisplay.tsx","hooks/lotide.ts","hooks/useRefreshableData.ts","constants/KnownHosts.ts","services/StorageService.ts","components/HostList.tsx","components/Login.tsx","components/SuggestLogin.tsx","screens/FeedScreen.tsx","components/CommunityFinder.tsx","screens/SearchScreen.tsx","screens/ProfileScreen.tsx","screens/NewPostScreen.tsx","screens/SettingsScreen.tsx","screens/RegisterScreen.tsx","screens/CommunityScreen.tsx","screens/ReplyScreen.tsx","components/RepliesDisplay.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","transformers/NotificationTransformer.ts","screens/NotificationScreen.tsx","screens/NewCommunity.tsx","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","PlatformColor","Platform","OS","require","light","buildIOS","tint","secondaryTint","text","secondaryText","placeholderText","background","secondaryBackground","tertiaryBackground","tabIconDefault","tabIconSelected","red","orange","yellow","green","teal","blue","indigo","purple","dark","linking","prefixes","Linking","config","screens","Root","TabOne","TabOneScreen","TabTwo","TabTwoScreen","Modal","NotFound","useTheme","colorScheme","Colors","useThemeColor","props","colorName","theme","colorFromProps","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","TextInput","forwardRef","ref","placeholderTextColor","themeStyle","paddingHorizontal","paddingVertical","borderRadius","useElapsedTime","time","useMemo","seconds","Math","round","Date","now","parse","minutes","hours","days","weeks","calculateElapsedTime","ElapsedTime","elapsedTime","styles","root","name","size","StyleSheet","create","impactAsync","a","async","Haptics","defaultLotideContext","apiUrl","login","undefined","createContext","ctx","setContext","register","username","password","email","lotideRequest","email_address","then","data","json","getPost","postId","getReply","replyId","getPostReplies","page","getReplyReplies","getCommunities","onlyFollowing","getCommunity","communityId","getUserData","userId","followCommunity","try_wait_for_accept","editCommunity","id","description","getInstanceInfo","method","path","body","noLogin","fetch","headers","buildHeaders","JSON","stringify","res","ok","catch","e","console","error","Authorization","token","VoteCounter","useState","isUpvoted","setIsUpvoted","useContext","LotideContext","isUpvotedByAPI","post","your_vote","toggleVote","Light","LotideService","Alert","alert","useEffect","scoreColor","shouldAddOne","shouldSubtractOne","Pressable","onPress","hitSlop","score","display","flexDirection","alignItems","fontSize","minWidth","ContentDisplay","html","contentHtml","markdown","contentMarkdown","replace","trim","contentText","RootComponent","value","renderNode","stylesheet","cite","fontStyle","del","textDecorationLine","textDecorationStyle","dfn","ins","samp","fontFamily","small","textComponentProps","onLinkLongPress","url","node","index","siblings","parent","defaultRenderer","includes","children","key","attribs","title","padding","borderLeftWidth","borderColor","paddingLeft","Details","width","alignSelf","borderBottomWidth","hairlineWidth","isOpen","setIsOpen","filter","x","toString","summary","realChildren","ActorDisplay","colorize","showHost","shouldDoIfLocal","when","local","shouldColorize","shouldShowHost","nameStyle","styleName","host","styleHost","newLine","fontWeight","PostDisplay","imgAspect","setImgAspect","isImage","href","some","ext","endsWith","sticky","Image","image","aspectRatio","source","uri","onLoad","event","max","nativeEvent","height","link","Medium","openURL","showHtmlContent","content_html","content_text","foot","navigation","navigate","community","by","author","showCommunityHost","created","footText","replies_count_total","item","marginVertical","marginHorizontal","resizeMode","justifyContent","actions","usePosts","sort","inYourFollows","posts","setPosts","setPage","nextPage","setNextPage","loadingPage","setLoadingPage","reloadId","setReloadId","effect","deps","refreshCount","setRefreshCount","isLoading","setIsLoading","c","useRefreshableData","stopLoading","join","p","items","next_page","refresh","KnownHosts","domain","lotideContext","AsyncStorage","getItem","ctxStr","lotideContextKV","user","serviceKV","store","k","query","listKeys","remove","storeStr","v","setItem","Object","keys","HostList","hostText","setHostText","knownHosts","setKnowHosts","existingProfiles","setExistingProfiles","map","h","i","d","hosts","h2","j","instanceInfo","object","entries","ScrollView","length","subtitle","split","paddingBottom","placeholder","onChangeText","onSubmitEditing","onSelect","toLowerCase","keyboardType","returnKeyType","enabled","software","version","startsWith","renderItem","flex","marginBottom","Login","isRegistering","setIsRegistering","setUsername","setPassword","setEmail","usernameRef","useRef","passwordRef","fail","message","submit","Keyboard","dismiss","KeyboardAvoidingView","behavior","hostName","loginRegister","input","textContentType","autoCompleteType","current","focus","secureTextEntry","actionButtons","Button","onGoBack","SuggestLogin","setHostName","setDomain","container","FeedScreen","route","params","isLoadingPosts","refreshPosts","loadNextPage","hasLogin","log","FlatList","keyExtractor","refreshing","onRefresh","onEndReachedThreshold","onEndReached","Item","onLongPress","Heavy","borderBottomColor","CommunityFinder","communities","setCommunities","filterText","setFilterText","communitiesToDisplay","onlyWhenTyping","you_are_moderator","your_follow","accepted","marginLeft","contentContainerStyle","list","marginTop","SearchScreen","ProfileScreen","profile","setProfile","profileList","setProfileList","isEditing","setIsEditing","StorageService","header","avatar","accessibilityLabel","editView","editViewText","multiline","editViewActionButtons","altProfileButton","paddingTop","followingTitle","margin","separator","inputContainer","borderWidth","NewPostScreen","setCommunity","setTitle","setLink","content","setContent","addListener","TouchableWithoutFeedback","content_markdown","SettingsScreen","RegisterScreen","setHost","passwordConf","setPasswordConf","fHost","pop","CommunityScreen","isFollowing","ReplyScreen","setText","scrollRef","type","onFocus","scrollToEnd","animated","minHeight","RepliesDisplay","replies","layer","highlightedReplies","nextPageData","setNextPageData","layerColors","reply","ReplyDisplay","React","showChildren","setShowChildren","borderTopWidth","borderTopColor","s","ModalScreen","setHighlightedReplies","focusId","setFocusId","setReplies","useReplies","Share","share","StatusBar","currentHeight","NotFoundScreen","TouchableOpacity","linkText","originFromComment","commentId","comment","originFromPost","NotificationScreen","notifications","setNotifications","isRefreshing","setIsRefreshing","promises","n","notification","origin","unseen","transformToFullNotification","Promise","all","level1","level2","thin","NewCommunityScreen","setName","setDescription","Navigation","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","component","BottomTabNavigator","options","headerShown","Group","screenOptions","presentation","BottomTab","createBottomTabNavigator","setSort","initialRouteName","tabBarActiveTintColor","tabBarShowLabel","initialParams","tabBarIcon","TabBarIcon","headerRight","ActionSheetIOS","showActionSheetWithOptions","cancelButtonIndex","buttonIndex","newSort","opacity","pressed","hot","new","marginRight","headerLeft","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","FontAwesome","font","warn","useCachedResources","applyNewContext","Provider","module","exports"],"mappings":"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","file":"static/js/app.2c97a14f.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import { ColorValue, Platform } from \"react-native\";\nconst PlatformColor =\n  Platform.OS === \"web\" ? () => {} : require(\"react-native\").PlatformColor;\n\nexport interface ColorsObject {\n  tint: ColorValue;\n  secondaryTint: ColorValue;\n  text: ColorValue;\n  secondaryText: ColorValue;\n  placeholderText: ColorValue;\n  background: ColorValue;\n  secondaryBackground: ColorValue;\n  tertiaryBackground: ColorValue;\n  tabIconDefault: ColorValue;\n  tabIconSelected: ColorValue;\n\n  red: ColorValue;\n  orange: ColorValue;\n  yellow: ColorValue;\n  green: ColorValue;\n  teal: ColorValue;\n  blue: ColorValue;\n  indigo: ColorValue;\n  purple: ColorValue;\n}\n\nexport default {\n  light: Platform.OS === \"ios\" ? buildIOS() : buildAltLight(),\n  dark: Platform.OS === \"ios\" ? buildIOS() : buildAltDark(),\n};\n\nfunction buildIOS(): ColorsObject {\n  return {\n    tint: PlatformColor(\"systemOrange\"),\n    secondaryTint: PlatformColor(\"systemPurple\"),\n    text: PlatformColor(\"label\"),\n    secondaryText: PlatformColor(\"secondaryLabel\"),\n    placeholderText: PlatformColor(\"placeholderText\"),\n    background: PlatformColor(\"systemBackground\"),\n    secondaryBackground: PlatformColor(\"secondarySystemBackground\"),\n    tertiaryBackground: PlatformColor(\"tertiarySystemBackground\"),\n    tabIconDefault: PlatformColor(\"secondaryLabel\"),\n    tabIconSelected: PlatformColor(\"systemOrange\"),\n\n    red: PlatformColor(\"systemRed\"),\n    orange: PlatformColor(\"systemOrange\"),\n    yellow: PlatformColor(\"systemYellow\"),\n    green: PlatformColor(\"systemGreen\"),\n    teal: PlatformColor(\"systemTeal\"),\n    blue: PlatformColor(\"systemBlue\"),\n    indigo: PlatformColor(\"systemIndigo\"),\n    purple: PlatformColor(\"systemPurple\"),\n  };\n}\n\nfunction buildAltLight(): ColorsObject {\n  return {\n    tint: \"orange\",\n    secondaryTint: \"purple\",\n    text: \"#111\",\n    secondaryText: \"#333\",\n    placeholderText: \"#444\",\n    background: \"#fff\",\n    secondaryBackground: \"#eee\",\n    tertiaryBackground: \"#ccc\",\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: \"orange\",\n\n    red: \"red\",\n    orange: \"orange\",\n    yellow: \"yellow\",\n    green: \"green\",\n    teal: \"eeal\",\n    blue: \"blue\",\n    indigo: \"indigo\",\n    purple: \"purple\",\n  };\n}\n\nfunction buildAltDark(): ColorsObject {\n  return {\n    tint: \"orange\",\n    secondaryTint: \"purple\",\n    text: \"#fff\",\n    secondaryText: \"#666\",\n    placeholderText: \"#aaa\",\n    background: \"#111\",\n    secondaryBackground: \"#222\",\n    tertiaryBackground: \"#222\",\n    tabIconDefault: \"#ccc\",\n    tabIconSelected: \"orange\",\n\n    red: \"red\",\n    orange: \"orange\",\n    yellow: \"yellow\",\n    green: \"green\",\n    teal: \"eeal\",\n    blue: \"#68f\",\n    indigo: \"indigo\",\n    purple: \"purple\",\n  };\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","import Colors from \"../constants/Colors\";\nimport useColorScheme from \"./useColorScheme\";\n\nexport default function useTheme() {\n  const colorScheme = useColorScheme();\n  return Colors[colorScheme];\n}\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport React, { forwardRef } from \"react\";\nimport {\n  ColorValue,\n  Text as DefaultText,\n  View as DefaultView,\n  TextInput as DefaultTextInput,\n} from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport function useThemeColor(\n  props: { light?: ColorValue; dark?: ColorValue },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark,\n): ColorValue {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: ColorValue;\n  darkColor?: ColorValue;\n};\n\nexport type TextProps = ThemeProps & DefaultText[\"props\"];\nexport type ViewProps = ThemeProps & DefaultView[\"props\"];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, \"text\");\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor(\n    { light: lightColor, dark: darkColor },\n    \"background\",\n  );\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n\nexport const TextInput = forwardRef<\n  DefaultTextInput,\n  DefaultTextInput[\"props\"]\n>((props: DefaultTextInput[\"props\"], ref) => {\n  const { style, placeholderTextColor, ...otherProps } = props;\n  const theme = useTheme();\n\n  const themeStyle = {\n    backgroundColor: theme.secondaryBackground,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 8,\n    color: theme.text,\n  };\n  return (\n    <DefaultTextInput\n      ref={ref}\n      style={[themeStyle, style]}\n      placeholderTextColor={placeholderTextColor || theme.placeholderText}\n      {...otherProps}\n    />\n  );\n});\n","import { useMemo } from \"react\";\n\nexport default function useElapsedTime(time: string): string {\n  return useMemo(() => calculateElapsedTime(time), [time]);\n}\n\nexport function calculateElapsedTime(time: string): string {\n  const seconds = Math.round((Date.now() - Date.parse(time)) / 1000);\n  const minutes = Math.round(seconds / 60);\n  const hours = Math.round(minutes / 60);\n  const days = Math.round(hours / 24);\n  const weeks = Math.round(days / 7);\n  const displayTime =\n    (minutes < 60 && `${minutes}m`) ||\n    (hours < 24 && `${hours}h`) ||\n    (days < 7 && `${days}d`) ||\n    `${weeks}w`;\n  return displayTime;\n}\n","import { Ionicons as Icon } from \"@expo/vector-icons\";\nimport React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Text } from \"./Themed\";\nimport useElapsedTime from \"../hooks/useElapsedTime\";\n\nexport interface ElapsedTimeProps {\n  time: string;\n}\n\nexport default function ElapsedTime(props: ElapsedTimeProps) {\n  const elapsedTime = useElapsedTime(props.time);\n  return (\n    <Text style={styles.root}>\n      <Icon name=\"time-outline\" size={14} /> {elapsedTime}\n    </Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {},\n});\n","import { Platform } from \"react-native\";\nimport * as Haptics from \"expo-haptics\";\n\nexport { ImpactFeedbackStyle } from \"expo-haptics\";\n\nexport async function impactAsync(style: Haptics.ImpactFeedbackStyle) {\n  if (Platform.OS === \"web\") return;\n  await Haptics.impactAsync(style);\n}\n","import { createContext } from \"react\";\n\nexport const defaultLotideContext: LotideContext = {\n  apiUrl: \"https://hoot.goldandblack.xyz/api/unstable\",\n  login: undefined,\n};\n\nexport default createContext({\n  ctx: defaultLotideContext,\n  setContext: (ctx: LotideContext) => {},\n});\n","export type RequestMethod = \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n\n// ** UTILS **\n\nexport function hasLogin(ctx: LotideContext): boolean {\n  return !!ctx.apiUrl && !!ctx.login;\n}\n\n// ** API FUNCTIONS **\n\nexport async function login(\n  apiUrl: string,\n  username: string,\n  password: string,\n): Promise<Login> {\n  return lotideRequest(\n    { apiUrl },\n    \"POST\",\n    \"logins\",\n    { username, password },\n    true,\n  ).then(data => data.json());\n}\n\nexport async function register(\n  apiUrl: string,\n  username: string,\n  password: string,\n  email?: string,\n): Promise<Login> {\n  return lotideRequest(\n    { apiUrl },\n    \"POST\",\n    \"users\",\n    {\n      username,\n      password,\n      email_address: email,\n      login: true,\n    },\n    true,\n  ).then(data => data.json());\n}\n\nexport async function logout(ctx: LotideContext) {\n  return lotideRequest(ctx, \"DELETE\", \"logins/~current\");\n}\n\nexport async function getNotifications(\n  ctx: LotideContext,\n): Promise<UserNotification[]> {\n  return lotideRequest(ctx, \"GET\", \"users/~me/notifications\").then(data =>\n    data.json(),\n  );\n}\n\nexport async function getPost(\n  ctx: LotideContext,\n  postId: PostId,\n): Promise<Post> {\n  return lotideRequest(ctx, \"GET\", `posts/${postId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function getPosts(\n  ctx: LotideContext,\n  page: string | null,\n  sort: SortOption = \"hot\",\n  inYourFollows?: boolean,\n  communityId?: CommunityId,\n): Promise<Paged<Post>> {\n  const url = [\n    page === null ? `posts?sort=${sort}` : `posts?page=${page}&sort=${sort}`,\n    `include_your=true`,\n    inYourFollows !== undefined && `in_your_follows=${inYourFollows}`,\n    communityId && `community=${communityId}`,\n  ]\n    .filter(x => x)\n    .join(\"&\");\n  return lotideRequest(ctx, \"GET\", url).then(data => data.json());\n}\n\nexport async function submitPost(\n  ctx: LotideContext,\n  post: NewPost,\n): Promise<{ id: PostId }> {\n  return lotideRequest(ctx, \"POST\", \"posts\", post).then(data => data.json());\n}\n\nexport async function getReply(\n  ctx: LotideContext,\n  replyId: ReplyId,\n): Promise<Reply> {\n  return lotideRequest(ctx, \"GET\", `comments/${replyId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function getPostReplies(\n  ctx: LotideContext,\n  postId: PostId,\n  page?: string,\n): Promise<Paged<Reply>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `posts/${postId}/replies?limit=10` + (page ? `&page=${page}` : \"\"),\n    undefined,\n    true,\n  ).then(data => data.json());\n}\n\nexport async function getReplyReplies(\n  ctx: LotideContext,\n  replyId: ReplyId,\n  page?: string,\n): Promise<Paged<Reply>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `comments/${replyId}/replies?limit=10` + (page ? `&page=${page}` : \"\"),\n    undefined,\n    true,\n  ).then(data => data.json());\n}\n\nexport async function replyToPost(\n  ctx: LotideContext,\n  postId: PostId,\n  content: string,\n): Promise<{ id: number }> {\n  return lotideRequest(ctx, \"POST\", `posts/${postId}/replies`, {\n    content_markdown: content,\n  }).then(data => data.json());\n}\n\nexport async function replyToReply(\n  ctx: LotideContext,\n  replyId: number,\n  content: string,\n): Promise<{ id: number }> {\n  return lotideRequest(ctx, \"POST\", `comments/${replyId}/replies`, {\n    content_markdown: content,\n  }).then(data => data.json());\n}\n\nexport async function getCommunities(\n  ctx: LotideContext,\n  onlyFollowing: boolean = false,\n  page?: string,\n): Promise<Paged<Community>> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `communities?include_your=true&limit=100${\n      onlyFollowing ? \"&your_follow.accepted=true\" : \"\"\n    }${page ? `&page=${page}` : \"\"}`,\n  )\n    .then(data => data.json())\n    .then(data => {\n      return data;\n    });\n}\n\nexport async function getCommunity(\n  ctx: LotideContext,\n  communityId: CommunityId,\n): Promise<Community> {\n  return lotideRequest(\n    ctx,\n    \"GET\",\n    `communities/${communityId}?include_your=true`,\n  ).then(data => data.json());\n}\n\nexport async function getUserData(ctx: LotideContext, userId: number) {\n  return lotideRequest(ctx, \"GET\", `users/${userId}`, undefined, true).then(\n    data => data.json(),\n  );\n}\n\nexport async function followCommunity(\n  ctx: LotideContext,\n  communityId: number,\n): Promise<{ accepted: boolean }> {\n  return lotideRequest(ctx, \"POST\", `communities/${communityId}/follow`, {\n    try_wait_for_accept: true,\n  }).then(data => data.json());\n}\n\nexport async function unfollowCommunity(\n  ctx: LotideContext,\n  communityId: number,\n) {\n  return lotideRequest(ctx, \"POST\", `communities/${communityId}/unfollow`);\n}\n\nexport async function newCommunity(\n  ctx: LotideContext,\n  name: string,\n): Promise<{ community: { id: CommunityId } }> {\n  return lotideRequest(ctx, \"POST\", \"communities\", { name }).then(data =>\n    data.json(),\n  );\n}\n\nexport async function editCommunity(\n  ctx: LotideContext,\n  id: CommunityId,\n  description: string,\n) {\n  return lotideRequest(ctx, \"PATCH\", `communities/${id}`, { description });\n}\n\nexport async function applyVote(ctx: LotideContext, postId: number) {\n  return lotideRequest(ctx, \"PUT\", `posts/${postId}/your_vote`);\n}\n\nexport async function removeVote(ctx: LotideContext, postId: number) {\n  return lotideRequest(ctx, \"DELETE\", `posts/${postId}/your_vote`);\n}\n\nexport async function getInstanceInfo(\n  ctx: LotideContext,\n): Promise<InstanceInfo> {\n  return lotideRequest(ctx, \"GET\", \"instance\", undefined, true).then(data =>\n    data.json(),\n  );\n}\n\n// ** UTIL **\n\nexport async function lotideRequest(\n  ctx: LotideContext,\n  method: RequestMethod,\n  path: string,\n  body?: any,\n  noLogin: boolean = false,\n): Promise<any | undefined> {\n  if (!ctx.apiUrl) throw \"No API url\";\n  if (!noLogin && ctx.login == undefined) throw \"Not logged in\";\n  return fetch(`${ctx.apiUrl}/${path}`, {\n    method,\n    headers: buildHeaders(ctx),\n    body: body !== undefined ? JSON.stringify(body) : undefined,\n  })\n    .then(async res => {\n      if (res.ok) {\n        return res;\n      } else {\n        throw await res.text();\n      }\n    })\n    .catch(e => {\n      console.error(\n        `Lotide Service Error: ${method} ${ctx.apiUrl}/${path}\\n${e}`,\n        ctx,\n      );\n      throw e;\n    });\n}\n\nexport function buildHeaders(ctx: LotideContext): HeadersInit | undefined {\n  return ctx.login !== undefined\n    ? {\n        Authorization: `Bearer ${ctx.login.token}`,\n        \"Content-Type\": \"application/json\",\n      }\n    : undefined;\n}\n","import { Ionicons as Icon } from \"@expo/vector-icons\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Alert, Pressable, StyleSheet } from \"react-native\";\nimport { View, Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport LotideContext from \"../store/LotideContext\";\nimport * as LotideService from \"../services/LotideService\";\n\nexport interface VoteCounterProps {\n  post: Post;\n  isUpvoted: boolean;\n  onVote?: (isUpvote: boolean) => void;\n}\n\nexport default function VoteCounter(props: VoteCounterProps) {\n  const [isUpvoted, setIsUpvoted] = useState(false);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  const isUpvotedByAPI =\n    props.post.your_vote !== null && props.post.your_vote !== undefined;\n\n  useEffect(() => setIsUpvoted(isUpvotedByAPI), [props.post.your_vote]);\n\n  function toggleVote() {\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n\n    if (ctx.login === undefined) {\n      Alert.alert(\n        \"Login to like\",\n        \"Leave a like when you login to a community\",\n      );\n      return;\n    }\n\n    if (isUpvoted) {\n      LotideService.removeVote(ctx, props.post.id).then(() =>\n        setIsUpvoted(false),\n      );\n    } else {\n      LotideService.applyVote(ctx, props.post.id).then(() =>\n        setIsUpvoted(true),\n      );\n    }\n  }\n\n  let scoreColor = theme.text;\n\n  if (isUpvoted) {\n    scoreColor = theme.red;\n  }\n\n  const shouldAddOne = isUpvoted && !isUpvotedByAPI;\n  const shouldSubtractOne = !isUpvoted && isUpvotedByAPI;\n\n  return (\n    <Pressable onPress={() => toggleVote()} hitSlop={7}>\n      <View style={styles.root}>\n        <Icon\n          name={isUpvoted ? \"heart\" : \"heart-outline\"}\n          color={scoreColor}\n          size={25}\n        />\n\n        <Text style={{ ...styles.score, color: scoreColor }}>{`  ${\n          props.post.score + +shouldAddOne - +shouldSubtractOne\n        }  `}</Text>\n      </View>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  score: {\n    fontSize: 18,\n    minWidth: 28,\n  },\n});\n","import React, { ReactNode, useMemo, useState } from \"react\";\nimport { Text, View } from \"react-native\";\nimport { Platform, Pressable, StyleSheet } from \"react-native\";\nimport HTMLView, { HTMLViewNode } from \"react-native-htmlview\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport useTheme from \"../hooks/useTheme\";\nimport { Alert } from \"react-native\";\nimport { ColorsObject } from \"../constants/Colors\";\n\nexport interface ContentDisplayProps {\n  contentHtml?: string;\n  contentText?: string;\n  contentMarkdown?: string;\n}\n\nexport default function ContentDisplay(props: ContentDisplayProps) {\n  const theme = useTheme();\n  const html = useMemo(\n    () =>\n      props.contentHtml ||\n      parseMarkdown(props.contentMarkdown) ||\n      `<p>${props.contentText}</p>`,\n    [props.contentHtml, props.contentMarkdown, props.contentText],\n  );\n  return (\n    <HTMLView\n      RootComponent={Text}\n      value={html.replace(/\\n/g, \"\")}\n      renderNode={renderNode(theme)}\n      stylesheet={{\n        a: { color: theme.secondaryTint },\n        cite: { fontStyle: \"italic\" },\n        del: {\n          textDecorationLine: \"line-through\",\n          textDecorationStyle: \"solid\",\n        },\n        dfn: { fontStyle: \"italic\" },\n        ins: { textDecorationLine: \"underline\" },\n        samp: { fontFamily: Platform.OS === \"ios\" ? \"Menlo\" : \"monospace\" },\n        small: { fontSize: 10 },\n      }}\n      textComponentProps={{ style: { color: theme.text } }}\n      onLinkLongPress={url => Alert.alert(\"Link\", url)}\n    />\n  );\n}\n\nconst renderNode =\n  (theme: ColorsObject) =>\n  (\n    node: HTMLViewNode,\n    index: number,\n    siblings: HTMLViewNode,\n    parent: HTMLViewNode,\n    defaultRenderer: (node: HTMLViewNode, parent: HTMLViewNode) => ReactNode,\n  ) => {\n    if ([\"iframe\", \"script\"].includes(node.name || \"\")) {\n      return null;\n    }\n\n    function children() {\n      return defaultRenderer((node as any).children, parent);\n    }\n\n    switch (node.name) {\n      case \"abbr\":\n        return (\n          <Pressable\n            key={index}\n            onPress={() => Alert.alert(\"Abbr.\", node.attribs.title)}\n          >\n            <Text\n              style={{\n                textDecorationLine: \"underline\",\n                textDecorationStyle: \"dotted\",\n              }}\n            >\n              {children()}\n            </Text>\n          </Pressable>\n        );\n      case \"blockquote\":\n        return (\n          <Text key={index}>\n            <View style={{ padding: 10 }}>\n              <View\n                style={{\n                  borderLeftWidth: 2,\n                  borderColor: theme.secondaryText,\n                  paddingLeft: 10,\n                  paddingVertical: 5,\n                }}\n              >\n                {children()}\n              </View>\n            </View>\n            {\"\\n\"}\n          </Text>\n        );\n      case \"details\":\n        return (\n          <Details key={index}>{children() as React.ReactChild[]}</Details>\n        );\n      case \"dl\":\n      case \"dt\":\n      case \"dd\":\n        return (\n          <Text key={index}>\n            {children()}\n            {\"\\n\"}\n          </Text>\n        );\n      case \"figure\":\n        return <View key={index}>{children()}</View>;\n      case \"hr\":\n        return (\n          <View\n            key={index}\n            style={{\n              width: 200,\n              alignSelf: \"stretch\",\n              borderBottomWidth: StyleSheet.hairlineWidth || 1,\n              borderColor: theme.secondaryText,\n            }}\n          />\n        );\n      case \"kbd\":\n        return (\n          <Text\n            key={index}\n            style={{ backgroundColor: theme.tertiaryBackground }}\n          >\n            {\" \"}\n            {children()}{\" \"}\n          </Text>\n        );\n      case \"img\":\n        return <Text key={index}>[Image not displayed]</Text>;\n      case \"li\":\n        return (\n          <Text key={index}>\n            {\"\\u2022 \"}\n            {children()}\n            {\"\\n\"}\n          </Text>\n        );\n      case \"sub\":\n        return (\n          <Text key={index} style={{ fontSize: 10 }}>\n            {children()}\n          </Text>\n        );\n      case \"summary\":\n        return <Text key={index}>{children()}</Text>;\n      case \"sup\":\n        return (\n          <View key={index}>\n            <Text style={{ fontSize: 10 }}>{children()}</Text>\n          </View>\n        );\n      default:\n        return undefined;\n    }\n  };\n\nfunction parseMarkdown(markdown?: string): string | undefined {\n  if (markdown === \"\" || markdown === undefined) return undefined;\n  return markdown\n    .replace(/^### (.*$)/gim, \"<h3>$1</h3>\")\n    .replace(/^## (.*$)/gim, \"<h2>$1</h2>\")\n    .replace(/^# (.*$)/gim, \"<h1>$1</h1>\")\n    .replace(/^\\> (.*$)/gim, \"<blockquote>$1</blockquote>\")\n    .replace(/\\*\\*(.*)\\*\\*/gim, \"<b>$1</b>\")\n    .replace(/\\*(.*)\\*/gim, \"<i>$1</i>\")\n    .replace(/!\\[(.*?)\\]\\((.*?)\\)/gim, \"<img alt='$1' src='$2' />\")\n    .replace(/\\[(.*?)\\]\\((.*?)\\)/gim, \"<a href='$2'>$1</a>\")\n    .replace(/\\n$/gim, \"<br />\")\n    .trim();\n}\n\nfunction Details({ children }: { children: React.ReactChild[] }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const theme = useTheme();\n\n  const [summary, ...realChildren] = children.filter(\n    (x: any) => x.props.children.toString().trim() !== \"\",\n  );\n\n  return (\n    <View>\n      <Pressable hitSlop={5} onPress={() => setIsOpen(x => !x)}>\n        <Text style={{ color: theme.secondaryTint }}>\n          {isOpen ? (\n            <Icon name=\"chevron-down-outline\" />\n          ) : (\n            <Icon name=\"chevron-forward-outline\" />\n          )}\n          {summary}\n        </Text>\n      </Pressable>\n      {isOpen && realChildren}\n    </View>\n  );\n}\n","import React from \"react\";\nimport { StyleSheet, TextStyle } from \"react-native\";\nimport { Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport interface ActorDisplayProps {\n  name: string;\n  host: string;\n  local: boolean;\n  colorize?: \"always\" | \"never\" | \"only_foreign\";\n  showHost?: \"always\" | \"never\" | \"only_foreign\";\n  newLine?: boolean;\n  style?: TextStyle;\n  styleName?: TextStyle;\n  styleHost?: TextStyle;\n}\n\nexport default function ActorDisplay(props: ActorDisplayProps) {\n  const theme = useTheme();\n  const colorize = props.colorize || \"never\";\n  const showHost = props.showHost || \"only_foreign\";\n\n  const shouldDoIfLocal = (\n    when: \"always\" | \"never\" | \"only_foreign\",\n    local: boolean,\n  ) => {\n    if (when === \"always\") return true;\n    if (when === \"never\") return false;\n    return !local;\n  };\n\n  const shouldColorize = shouldDoIfLocal(colorize, props.local);\n  const shouldShowHost = shouldDoIfLocal(showHost, props.local);\n\n  const nameStyle = shouldColorize\n    ? { color: props.local ? theme.blue : theme.green }\n    : {};\n\n  return (\n    <Text style={[styles.root, props.style]}>\n      <Text style={[styles.name, nameStyle, props.styleName]}>\n        {props.name}\n      </Text>\n      {shouldShowHost && (\n        <Text\n          style={[styles.host, { color: theme.secondaryText }, props.styleHost]}\n        >\n          {props.newLine && \"\\n\"}\n          {!props.newLine && \"@\"}\n          {props.host}\n        </Text>\n      )}\n    </Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {},\n  name: {\n    fontWeight: \"500\",\n  },\n  host: {\n    fontWeight: \"200\",\n  },\n});\n","import Icon from \"@expo/vector-icons/Ionicons\";\nimport { openURL } from \"expo-linking\";\nimport React, { useMemo, useState } from \"react\";\nimport { StyleSheet, Image, Pressable } from \"react-native\";\nimport ElapsedTime from \"./ElapsedTime\";\nimport VoteCounter from \"./VoteCounter\";\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport ContentDisplay from \"./ContentDisplay\";\nimport ActorDisplay from \"./ActorDisplay\";\n\nexport interface PostDisplayProps {\n  post: Post;\n  navigation: any;\n  showHtmlContent?: boolean;\n  showCommunityHost?: boolean;\n}\n\nexport default function PostDisplay(props: PostDisplayProps) {\n  const [imgAspect, setImgAspect] = useState(1);\n  const isImage = useMemo(() => isImageUrl(props.post.href), [props.post.href]);\n  const theme = useTheme();\n\n  const post = props.post;\n\n  return (\n    <View>\n      <Text style={styles.title}>\n        {props.post.sticky && (\n          <>\n            <Icon name=\"pin\" size={25} color={theme.secondaryTint} />{\" \"}\n          </>\n        )}\n        {props.post.title}\n      </Text>\n      {props.post.href &&\n        (isImage ? (\n          <Image\n            style={{\n              ...styles.image,\n              aspectRatio: imgAspect,\n              backgroundColor: theme.secondaryBackground,\n            }}\n            source={{\n              uri: props.post.href,\n            }}\n            onLoad={event =>\n              setImgAspect(\n                Math.max(\n                  event.nativeEvent.source.width /\n                    event.nativeEvent.source.height,\n                  0.5,\n                ),\n              )\n            }\n          />\n        ) : (\n          <Pressable\n            style={[\n              styles.link,\n              { backgroundColor: theme.secondaryBackground },\n            ]}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              if (props.post.href) {\n                openURL(props.post.href);\n              }\n            }}\n          >\n            <Text>{props.post.href}</Text>\n          </Pressable>\n        ))}\n      {props.showHtmlContent && !!props.post.content_html && (\n        <View style={{ paddingHorizontal: 15 }}>\n          <ContentDisplay\n            contentHtml={props.post.content_html}\n            contentText={props.post.content_text}\n          />\n        </View>\n      )}\n      <View style={styles.foot}>\n        <View>\n          <Pressable\n            hitSlop={8}\n            onPress={() =>\n              props.navigation.navigate(\"Community\", {\n                community: props.post.community,\n              })\n            }\n          >\n            <ActorDisplay\n              name={post.community.name}\n              host={post.community.host}\n              local={post.community.local}\n              showHost={\"only_foreign\"}\n              colorize={\"never\"}\n              newLine={true}\n            />\n          </Pressable>\n          <Text style={styles.by}>by {props.post.author.username}</Text>\n          {props.showCommunityHost && (\n            <Text style={styles.by}>on {props.post.community.host}</Text>\n          )}\n        </View>\n        <View>\n          <ElapsedTime time={props.post.created} />\n        </View>\n        <View>\n          <Text style={styles.footText}>\n            <Icon name=\"chatbubble-outline\" size={12} />{\" \"}\n            {props.post.replies_count_total}\n          </Text>\n        </View>\n        <View>\n          <VoteCounter post={props.post} isUpvoted={false} />\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n  },\n  footText: {},\n  by: {\n    fontSize: 11,\n  },\n  score: {\n    fontSize: 18,\n  },\n  actions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    padding: 10,\n  },\n});\n\nfunction isImageUrl(url?: string): boolean {\n  if (!url) return false;\n  return [\".png\", \".jpg\", \".jpeg\", \".bmp\", \".gif\", \".webp\"].some(ext =>\n    url.endsWith(ext),\n  );\n}\n","import { useState, useEffect, useContext } from \"react\";\nimport LotideContext from \"../store/LotideContext\";\nimport * as LotideService from \"../services/LotideService\";\nimport { useRefreshableData } from \"./useRefreshableData\";\n\nexport function usePosts(\n  sort?: SortOption,\n  inYourFollows?: boolean,\n  community?: CommunityId,\n): [Post[], boolean, () => void, () => void] {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [page, setPage] = useState<string | null>(null);\n  const [nextPage, setNextPage] = useState<string | null>(null);\n  const [loadingPage, setLoadingPage] =\n    useState<string | null | undefined>(undefined);\n  const [reloadId, setReloadId] = useState(0);\n  const ctx = useContext(LotideContext).ctx;\n\n  const [isLoading, refresh] = useRefreshableData(\n    stopLoading => {\n      if (!ctx.login) return;\n      if (loadingPage !== undefined) return;\n      setLoadingPage(page);\n      LotideService.getPosts(ctx, page, sort, inYourFollows, community)\n        .then(data => {\n          setPosts(p => [...p, ...data.items]);\n          setNextPage(data.next_page);\n          setLoadingPage(undefined);\n        })\n        .then(() => stopLoading())\n        .catch(e => {\n          stopLoading();\n          setPosts(p => [\n            ...p,\n            {\n              id: -1,\n              title: \"Lotide error\",\n              content_html: `<p>Error: ${e}</p>`,\n              created: \"\",\n              replies_count_total: 0,\n              score: 0,\n              sticky: true,\n              author: {\n                id: -1,\n                username: \"Failure\",\n                local: false,\n                host: \"hoot-mobile\",\n              },\n              community: {\n                id: -1,\n                name: \"something-went-wrong\",\n                local: false,\n                host: \"hoot-mobile\",\n              },\n            },\n          ]);\n        });\n    },\n    [reloadId, page],\n  );\n\n  useEffect(() => {\n    setPosts([]);\n    setPage(null);\n    setNextPage(null);\n    refresh();\n  }, [ctx, sort]);\n\n  function loadNextPage() {\n    if (nextPage !== null) {\n      setPage(nextPage);\n    }\n  }\n\n  function refreshData() {\n    setPosts([]);\n    setPage(null);\n    setNextPage(null);\n    setReloadId(id => id + 1);\n    refresh();\n  }\n\n  return [posts, isLoading, refreshData, loadNextPage];\n}\n\nexport function useReplies(\n  ctx: LotideContext,\n  postId: PostId,\n  deps: any[],\n  replyId?: ReplyId,\n): Paged<Reply> {\n  const [replies, setReplies] = useState({\n    items: [] as Reply[],\n  } as Paged<Reply>);\n  useEffect(() => {\n    if (replyId) {\n      LotideService.getReply(ctx, replyId).then(async reply => {\n        reply.replies = await LotideService.getReplyReplies(ctx, reply.id);\n        setReplies({ items: [reply], next_page: null });\n      });\n    } else {\n      LotideService.getPostReplies(ctx, postId).then(data => {\n        setReplies(data);\n      });\n    }\n  }, deps);\n  return replies;\n}\n","import { useState, useEffect } from \"react\";\n\nexport function useRefreshableData<T>(\n  effect: (stopLoading: () => void) => void | (() => void | undefined),\n  deps: any[],\n): [boolean, () => void] {\n  const [refreshCount, setRefreshCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    effect(() => setIsLoading(false));\n  }, [refreshCount, ...deps]);\n\n  function refresh() {\n    setRefreshCount(c => c + 1);\n    setIsLoading(true);\n  }\n\n  return [isLoading, refresh];\n}\n","export interface KnownHost {\n  name: string;\n  domain: string;\n}\n\nexport const KnownHosts: KnownHost[] = [\n  {\n    name: \"Gold&Black\",\n    domain: \"hoot.goldandblack.xyz\",\n  },\n  {\n    name: \"Narwhal.City\",\n    domain: \"narwhal.city\",\n  },\n  {\n    name: \"Tide C\",\n    domain: \"c.tide.tk\",\n  },\n  {\n    name: \"Exopla\",\n    domain: \"lotide.exopla.net.eu.org\",\n  },\n  {\n    name: \"Narwhal.City (Dev)\",\n    domain: \"dev.narwhal.city\",\n  },\n  {\n    name: \"Tide B\",\n    domain: \"b.tide.tk\",\n  },\n  {\n    name: \"Tide A\",\n    domain: \"a.tide.tk\",\n  },\n];\n\nexport default KnownHosts;\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport const lotideContext = {\n  async store(ctx: LotideContext) {\n    return AsyncStorage.setItem(\"@lotide_ctx\", JSON.stringify(ctx));\n  },\n  async remove() {\n    return AsyncStorage.removeItem(\"@lotide_ctx\");\n  },\n  async query(): Promise<LotideContext | undefined> {\n    return AsyncStorage.getItem(\"@lotide_ctx\").then(ctxStr => {\n      if (ctxStr !== null) {\n        return JSON.parse(ctxStr) as LotideContext;\n      } else {\n        return undefined;\n      }\n    });\n  },\n};\n\nexport const lotideContextKV = {\n  async store(ctx: LotideContext) {\n    if (!ctx.login) return;\n    const name = `${ctx.login.user.username}@${ctx.apiUrl}`;\n    serviceKV.store(\"@lotide_ctx_arr\", name, ctx);\n  },\n  async query(k: string): Promise<LotideContext | undefined> {\n    return serviceKV.query<LotideContext>(\"@lotide_ctx_arr\", k);\n  },\n  async listKeys(): Promise<string[]> {\n    return serviceKV.listKeys(\"@lotide_ctx_arr\");\n  },\n  async remove(k: string): Promise<LotideContext | undefined> {\n    return serviceKV.remove(\"@lotide_ctx_arr\", k);\n  },\n  async getStore(): Promise<{ [key: string]: LotideContext }> {\n    const storeStr = await AsyncStorage.getItem(\"@lotide_ctx_arr\");\n    return storeStr ? JSON.parse(storeStr) : {};\n  },\n};\n\nconst serviceKV = {\n  async store<T>(path: string, k: string, v: T) {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    store[k] = v;\n    await AsyncStorage.setItem(path, JSON.stringify(store));\n  },\n\n  async query<T>(path: string, k: string): Promise<T | undefined> {\n    const storeStr = await AsyncStorage.getItem(path);\n    return storeStr ? JSON.parse(storeStr)[k] : undefined;\n  },\n\n  async listKeys(path: string): Promise<string[]> {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    return Object.keys(store);\n  },\n\n  async remove<T>(path: string, k: string): Promise<T | undefined> {\n    const storeStr = await AsyncStorage.getItem(path);\n    const store = storeStr ? JSON.parse(storeStr) : {};\n    const v = store[k];\n    delete store[k];\n    await AsyncStorage.setItem(path, JSON.stringify(store));\n    return v;\n  },\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Platform, Pressable, ScrollView, StyleSheet } from \"react-native\";\nimport KnownHosts from \"../constants/KnownHosts\";\nimport ActorDisplay from \"./ActorDisplay\";\nimport { Text, TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport useTheme from \"../hooks/useTheme\";\nimport { lotideContextKV } from \"../services/StorageService\";\nimport LotideContext from \"../store/LotideContext\";\n\nexport interface HostListProps {\n  onSelect: (domain: string, name?: string) => void;\n}\n\ninterface HostData {\n  name: string;\n  domain: string;\n  instanceInfo?: InstanceInfo | null;\n}\n\nexport default function HostList(props: HostListProps) {\n  const [hostText, setHostText] = useState(\"\");\n  const [knownHosts, setKnowHosts] = useState<HostData[]>(KnownHosts);\n  const [existingProfiles, setExistingProfiles] = useState<\n    [string, LotideContext][]\n  >([]);\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n\n  useEffect(() => {\n    KnownHosts.map((h, i) => {\n      return LotideService.getInstanceInfo({\n        apiUrl: `https://${h.domain}/api/unstable`,\n      })\n        .then(d => {\n          setKnowHosts(hosts =>\n            hosts.map((h2, j) =>\n              i !== j\n                ? h2\n                : { name: h2.name, domain: h2.domain, instanceInfo: d },\n            ),\n          );\n        })\n        .catch(() => {\n          setKnowHosts(hosts =>\n            hosts.map((h2, j) =>\n              i !== j\n                ? h2\n                : { name: h2.name, domain: h2.domain, instanceInfo: null },\n            ),\n          );\n        });\n    });\n  }, []);\n\n  useEffect(() => {\n    lotideContextKV\n      .getStore()\n      .then(object => Object.entries(object))\n      .then(setExistingProfiles);\n  }, []);\n\n  const renderItem = ({ item }: { item: HostData }) => {\n    const enabled = item.instanceInfo?.software.version.startsWith(\"0.9.\");\n    const color = enabled ? theme.text : theme.secondaryText;\n    return (\n      <View\n        style={{\n          borderBottomWidth: 1,\n          borderColor: theme.secondaryBackground,\n          paddingVertical: 10,\n        }}\n      >\n        <Pressable\n          onPress={() => enabled && props.onSelect(item.domain, item.name)}\n        >\n          <ActorDisplay\n            name={item.name}\n            host={item.domain}\n            local={false}\n            newLine={true}\n            styleName={{\n              fontSize: 24,\n              fontWeight: \"300\",\n              fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n              color,\n            }}\n          />\n          {item.instanceInfo ? (\n            <>\n              <Text style={{ color: theme.secondaryText }}>\n                {item.instanceInfo.software.version}\n                {!enabled && \" - Out of date\"}\n              </Text>\n              {!!item.instanceInfo.description && (\n                <Text style={{ color }}>{item.instanceInfo.description}</Text>\n              )}\n            </>\n          ) : item.instanceInfo === null ? (\n            <Text style={{ color }}>Failed to load info</Text>\n          ) : (\n            <Text style={{ color }}>Loading...</Text>\n          )}\n        </Pressable>\n      </View>\n    );\n  };\n  return (\n    <ScrollView style={styles.root}>\n      <Text style={styles.title}>Login to continue</Text>\n      {existingProfiles.length > 0 && (\n        <Text style={styles.subtitle}>Select an existing profile</Text>\n      )}\n      {existingProfiles.map(p => {\n        const [username, url] = p[0].split(\"@\");\n        return (\n          <Pressable\n            key={p[0]}\n            onPress={() => {\n              lotideContext.setContext(p[1]);\n            }}\n          >\n            <ActorDisplay\n              name={username}\n              host={\n                url\n                  .replace(\"http://\", \"\")\n                  .replace(\"https://\", \"\")\n                  .split(/[/?#]/)[0]\n              }\n              local={true}\n              showHost={\"always\"}\n              newLine={true}\n              style={{ paddingVertical: 5, paddingBottom: 10 }}\n            />\n          </Pressable>\n        );\n      })}\n      <Text style={styles.subtitle}>\n        {existingProfiles.length > 0\n          ? \"Or sign into a new acount\"\n          : \"Enter a host or select one below\"}\n      </Text>\n      <TextInput\n        placeholder=\"Host domain\"\n        style={{ paddingVertical: 10, paddingHorizontal: 10 }}\n        value={hostText}\n        onChangeText={setHostText}\n        onSubmitEditing={() => props.onSelect(hostText.toLowerCase())}\n        keyboardType=\"url\"\n        returnKeyType=\"next\"\n      />\n      {knownHosts\n        .filter(\n          x =>\n            hostText === \"\" ||\n            x.domain.includes(hostText.toLowerCase()) ||\n            x.name.toLowerCase().includes(hostText.toLowerCase()),\n        )\n        .map(item => (\n          <View key={item.domain}>{renderItem({ item })}</View>\n        ))}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 10,\n  },\n  subtitle: {\n    fontWeight: \"300\",\n    marginBottom: 10,\n  },\n});\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n  TextInput as DefaultTextInput,\n} from \"react-native\";\nimport { Text, TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport interface LoginProps {\n  hostName?: string;\n  domain: string;\n  onGoBack: () => void;\n}\n\nexport default function Login(props: LoginProps) {\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const usernameRef = useRef<DefaultTextInput>(null);\n  const passwordRef = useRef<DefaultTextInput>(null);\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n\n  function fail(message: string) {\n    Alert.alert(\"Failed to submit\", message);\n  }\n\n  function register() {\n    if (!username) return fail(\"Please enter a username\");\n    if (!password) return fail(\"Enter a password\");\n    if (!email) return fail(\"Please enter an email address\");\n\n    LotideService.register(\n      `https://${props.domain}/api/unstable`,\n      username,\n      password,\n      email,\n    )\n      .then(data => {\n        lotideContext.setContext({\n          apiUrl: `https://${props.domain}/api/unstable`,\n          login: data,\n        });\n      })\n      .catch(e => {\n        Alert.alert(\"Failed to register\", e);\n        console.error(e);\n      });\n  }\n\n  function login() {\n    if (!username) return fail(\"Please enter a username\");\n    if (!password) return fail(\"Enter a password\");\n\n    LotideService.login(\n      `https://${props.domain}/api/unstable`,\n      username,\n      password,\n    )\n      .then(data => {\n        lotideContext.setContext({\n          apiUrl: `https://${props.domain}/api/unstable`,\n          login: data,\n        });\n      })\n      .catch(e => {\n        Alert.alert(\"Failed to login\", e);\n        console.error(e);\n      });\n  }\n\n  function submit() {\n    if (isRegistering) {\n      register();\n    } else {\n      login();\n    }\n  }\n\n  return (\n    <Pressable\n      style={{ flex: 1 }}\n      onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n    >\n      <KeyboardAvoidingView style={styles.root} behavior=\"padding\">\n        {props.hostName ? (\n          <Pressable style={{ alignItems: \"center\" }}>\n            <Text style={styles.name}>{props.hostName}</Text>\n            <Text style={[styles.domain, { color: theme.secondaryText }]}>\n              {props.domain}\n            </Text>\n          </Pressable>\n        ) : (\n          <Pressable>\n            <Text style={{ fontSize: 24 }}>{props.domain}</Text>\n          </Pressable>\n        )}\n        <Pressable hitSlop={5} onPress={() => setIsRegistering(x => !x)}>\n          <Text style={[styles.loginRegister, { color: theme.secondaryText }]}>\n            <Text\n              style={{\n                color: isRegistering\n                  ? theme.secondaryText\n                  : theme.secondaryTint,\n              }}\n            >\n              Login\n            </Text>\n            {\" | \"}\n            <Text\n              style={{\n                color: isRegistering\n                  ? theme.secondaryTint\n                  : theme.secondaryText,\n              }}\n            >\n              Register\n            </Text>\n          </Text>\n        </Pressable>\n        {isRegistering && (\n          <TextInput\n            style={styles.input}\n            placeholder=\"Email Address\"\n            value={email}\n            onChangeText={setEmail}\n            keyboardType=\"email-address\"\n            textContentType=\"emailAddress\"\n            autoCompleteType=\"email\"\n            returnKeyType=\"next\"\n            onSubmitEditing={() => usernameRef.current?.focus()}\n          />\n        )}\n        <TextInput\n          ref={usernameRef}\n          style={styles.input}\n          placeholder=\"Username\"\n          value={username}\n          onChangeText={setUsername}\n          keyboardType=\"ascii-capable\"\n          textContentType=\"username\"\n          autoCompleteType=\"username\"\n          returnKeyType=\"next\"\n          onSubmitEditing={() => passwordRef.current?.focus()}\n        />\n        <TextInput\n          ref={passwordRef}\n          style={styles.input}\n          placeholder=\"Password\"\n          value={password}\n          onChangeText={setPassword}\n          secureTextEntry={true}\n          textContentType={isRegistering ? \"newPassword\" : \"password\"}\n          autoCompleteType=\"password\"\n          returnKeyType=\"done\"\n          onSubmitEditing={submit}\n        />\n        <View style={styles.actionButtons}>\n          <Button\n            title=\"Change Host\"\n            onPress={props.onGoBack}\n            color={theme.secondaryTint}\n          />\n          <Button\n            title={isRegistering ? \"Register\" : \"Login\"}\n            onPress={submit}\n            color={theme.tint}\n          />\n        </View>\n      </KeyboardAvoidingView>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 35,\n  },\n  name: {\n    fontSize: 50,\n    fontFamily: Platform.OS === \"ios\" ? \"Georgia\" : \"serif\",\n  },\n  domain: {\n    fontWeight: \"300\",\n  },\n  loginRegister: {\n    padding: 15,\n  },\n  input: {\n    width: \"100%\",\n    marginVertical: 5,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  actionButtons: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n});\n","import React, { useState } from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { View } from \"./Themed\";\nimport HostList from \"./HostList\";\nimport Login from \"./Login\";\n\nexport default function SuggestLogin() {\n  const [hostName, setHostName] = useState<string>();\n  const [domain, setDomain] = useState<string>();\n\n  return (\n    <View style={styles.root}>\n      {!domain ? (\n        <HostList\n          onSelect={(domain, name) => {\n            setHostName(name);\n            setDomain(domain);\n          }}\n        />\n      ) : (\n        <Login\n          hostName={hostName}\n          domain={domain}\n          onGoBack={() => setDomain(undefined)}\n        />\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  input: {\n    width: \"100%\",\n    marginBottom: 20,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  actionButtons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    width: \"100%\",\n  },\n});\n","import React, { useContext } from \"react\";\nimport { StyleSheet, FlatList, Pressable } from \"react-native\";\n\nimport PostDisplay from \"../components/PostDisplay\";\nimport { View } from \"../components/Themed\";\nimport * as Haptics from \"../services/HapticService\";\nimport { usePosts } from \"../hooks/lotide\";\nimport { RootTabScreenProps } from \"../types\";\nimport useTheme from \"../hooks/useTheme\";\nimport LotideContext from \"../store/LotideContext\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport { hasLogin } from \"../services/LotideService\";\n\nexport default function FeedScreen({\n  navigation,\n  route,\n}: RootTabScreenProps<\"FeedScreen\">) {\n  const sort = route.params.sort;\n  const ctx = useContext(LotideContext).ctx;\n  const [posts, isLoadingPosts, refreshPosts, loadNextPage] = usePosts(\n    sort,\n    true,\n  );\n  if (!hasLogin(ctx)) return <SuggestLogin />;\n  console.log(ctx);\n  const renderItem = ({ item }: { item: Post }) => (\n    <Item post={item} navigation={navigation} />\n  );\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={posts}\n        renderItem={renderItem}\n        keyExtractor={(post, index) => `${post.id}-${index}`}\n        refreshing={isLoadingPosts}\n        onRefresh={refreshPosts}\n        onEndReachedThreshold={2}\n        onEndReached={loadNextPage}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n    borderBottomWidth: 8,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n    color: \"#eee\",\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    backgroundColor: \"#8884\",\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n  },\n  footText: {\n    color: \"#ccc\",\n  },\n  by: {\n    fontSize: 11,\n  },\n  score: {\n    fontSize: 18,\n    color: \"#bbb\",\n  },\n});\n\nconst Item = ({ post, navigation }: { post: Post; navigation: any }) => {\n  const theme = useTheme();\n  return (\n    <Pressable\n      onPress={() => navigation.navigate(\"Post\", { post })}\n      onLongPress={() => {\n        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n        console.log(post);\n      }}\n    >\n      <View\n        style={[styles.item, { borderBottomColor: theme.secondaryBackground }]}\n      >\n        <PostDisplay post={post} navigation={navigation} />\n      </View>\n    </Pressable>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { FlatList, Pressable, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport LotideContext from \"../store/LotideContext\";\nimport { TextInput, View } from \"./Themed\";\nimport * as LotideService from \"../services/LotideService\";\nimport ActorDisplay from \"./ActorDisplay\";\nimport useTheme from \"../hooks/useTheme\";\n\nexport interface CommunityFinderProps {\n  placeholder?: string;\n  onlyWhenTyping?: boolean;\n  onSelect: (community: Community) => void;\n}\n\nexport default function CommunityFinder(props: CommunityFinderProps) {\n  const [communities, setCommunities] = useState<Paged<Community>>();\n  const [filterText, setFilterText] = useState(\"\");\n  const ctx = useContext(LotideContext).ctx;\n  const theme = useTheme();\n\n  const communitiesToDisplay = (() => {\n    if (props.onlyWhenTyping && filterText === \"\") return [];\n    if (!communities) return [];\n    if (filterText === \"\") return communities.items;\n    return communities.items.filter(\n      c =>\n        c.name.toLowerCase().includes(filterText.toLowerCase()) ||\n        c.host.includes(filterText.toLowerCase()),\n    );\n  })();\n\n  useEffect(() => {\n    LotideService.getCommunities(ctx, false).then(setCommunities);\n  }, [ctx.login?.token]);\n\n  const renderItem = ({ item }: { item: Community }) => {\n    return (\n      <Pressable\n        onPress={() => props.onSelect(item)}\n        style={[\n          styles.item,\n          {\n            borderColor: theme.secondaryBackground,\n          },\n        ]}\n      >\n        <ActorDisplay\n          name={item.name}\n          host={item.host}\n          local={item.local}\n          colorize={\"always\"}\n          newLine\n        />\n        <View style={{ display: \"flex\", flexDirection: \"row\" }}>\n          {item.you_are_moderator && (\n            <Icon name=\"shield-outline\" size={20} color={theme.secondaryTint} />\n          )}\n          {item.your_follow?.accepted && (\n            <Icon\n              name=\"checkmark\"\n              size={20}\n              color={theme.secondaryTint}\n              style={{ marginLeft: 5 }}\n            />\n          )}\n        </View>\n      </Pressable>\n    );\n  };\n\n  return (\n    <View>\n      <TextInput\n        placeholder={props.placeholder || \"Filter communities\"}\n        value={filterText}\n        onChangeText={setFilterText}\n        style={styles.input}\n      />\n      <FlatList\n        data={communitiesToDisplay}\n        renderItem={renderItem}\n        keyExtractor={(item, index) => `${item.id}-${index}`}\n        contentContainerStyle={styles.list}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  input: {\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginTop: 20,\n  },\n  list: {\n    padding: 20,\n    paddingBottom: 100,\n  },\n  item: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    height: 50,\n    borderBottomWidth: 1,\n    paddingHorizontal: 20,\n  },\n});\n","import React, { useContext } from \"react\";\nimport LotideContext from \"../store/LotideContext\";\nimport { RootTabScreenProps } from \"../types\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport CommunityFinder from \"../components/CommunityFinder\";\n\nexport default function SearchScreen({\n  navigation,\n}: RootTabScreenProps<\"SearchScreen\">) {\n  const ctx = useContext(LotideContext).ctx;\n\n  if (!ctx.login) return <SuggestLogin />;\n\n  return (\n    <CommunityFinder\n      onSelect={community => navigation.navigate(\"Community\", { community })}\n    />\n  );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Alert, Button, Pressable, ScrollView, StyleSheet } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { View, Text, TextInput } from \"../components/Themed\";\nimport { getUserData } from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { RootTabScreenProps } from \"../types\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport * as LotideService from \"../services/LotideService\";\nimport * as StorageService from \"../services/StorageService\";\nimport useTheme from \"../hooks/useTheme\";\nimport ActorDisplay from \"../components/ActorDisplay\";\n\nexport default function ProfileScreen({\n  navigation,\n}: RootTabScreenProps<\"ProfileScreen\">) {\n  const [profile, setProfile] = useState<Profile>();\n  const [profileList, setProfileList] = useState<string[]>([]);\n  const [communities, setCommunities] = useState<Community[]>([]);\n  const [isEditing, setIsEditing] = useState(false);\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n  const ctx = lotideContext.ctx;\n\n  useEffect(() => {\n    if (!ctx.login) return;\n    // TODO: Use the pagination feature\n    LotideService.getCommunities(ctx, true).then(communities =>\n      setCommunities(communities.items),\n    );\n  }, [ctx.login?.user.id]);\n\n  useEffect(() => {\n    if (ctx.login !== undefined && ctx.login.user !== undefined) {\n      getUserData(ctx, ctx.login?.user.id || 0).then(setProfile);\n    }\n  }, [ctx.login?.token]);\n\n  useEffect(() => {\n    StorageService.lotideContextKV\n      .listKeys()\n      .then(keys => setProfileList(keys));\n  }, [ctx]);\n\n  if (ctx.login === undefined) {\n    return <SuggestLogin />;\n  }\n\n  function logout() {\n    Alert.alert(\n      \"Log out\",\n      \"Would you like to keep the login profile handy for later?\",\n      [\n        {\n          text: \"Remove\",\n          onPress: () => {\n            StorageService.lotideContextKV\n              .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n              .then(() => LotideService.logout(ctx))\n              .then(() => lotideContext.setContext({}));\n          },\n        },\n        {\n          text: \"Keep\",\n          style: \"default\",\n          onPress: () => {\n            lotideContext.setContext({});\n          },\n        },\n      ],\n    );\n  }\n\n  return (\n    <ScrollView\n      style={[styles.container, { backgroundColor: theme.background }]}\n    >\n      <View style={styles.header}>\n        <View>\n          <Pressable hitSlop={10} onPress={() => setIsEditing(x => !x)}>\n            <Text style={styles.title}>\n              {profile?.username}\n              {\"  \"}\n              <Icon\n                name=\"pencil-outline\"\n                size={20}\n                color={theme.secondaryText}\n              />\n            </Text>\n          </Pressable>\n          <Text style={{ color: theme.secondaryText }}>{profile?.host}</Text>\n          {!!profile?.avatar && <Text>{profile?.avatar?.url}</Text>}\n          {!!profile?.description && <Text>{profile?.description}</Text>}\n        </View>\n        <Button\n          onPress={logout}\n          title=\"Log Out\"\n          color={theme.secondaryTint}\n          accessibilityLabel=\"Log out of the Hoot network\"\n        />\n      </View>\n      {isEditing && (\n        <View style={styles.editView}>\n          <TextInput style={styles.editViewText} placeholder=\"New email\" />\n          <TextInput\n            style={styles.editViewText}\n            placeholder=\"User bio\"\n            multiline={true}\n          />\n          <TextInput style={styles.editViewText} placeholder=\"New password\" />\n          <TextInput\n            style={styles.editViewText}\n            placeholder=\"Confirm new password\"\n          />\n          <View style={styles.editViewActionButtons}>\n            <Button\n              onPress={() => setIsEditing(false)}\n              title=\"Cancel\"\n              color={theme.secondaryTint}\n              accessibilityLabel=\"Add profile\"\n            />\n            <Button\n              onPress={() => Alert.alert(\"unimplemented\")}\n              title=\"Submit\"\n              color={theme.tint}\n              accessibilityLabel=\"Add profile\"\n            />\n          </View>\n        </View>\n      )}\n      <Button\n        onPress={() => lotideContext.setContext({})}\n        title=\"Add Profile\"\n        color={theme.tint}\n        accessibilityLabel=\"Add profile\"\n      />\n      {profileList\n        .map(p => [p, ...p.split(\"@\")] as string[])\n        .map(p => [\n          p[0],\n          p[1],\n          p[2].replace(\"http://\", \"\").replace(\"https://\", \"\").split(/[/?#]/)[0],\n        ])\n        .map(p => (\n          <Pressable\n            key={p[0]}\n            style={[\n              styles.altProfileButton,\n              { borderColor: theme.secondaryBackground },\n            ]}\n            onPress={() => {\n              StorageService.lotideContextKV.query(p[0]).then(ctx => {\n                if (ctx !== undefined) {\n                  lotideContext.setContext(ctx);\n                  setIsEditing(false);\n                }\n              });\n            }}\n          >\n            <ActorDisplay\n              name={p[1]}\n              host={p[2]}\n              local={true}\n              showHost={\"always\"}\n              colorize={\"never\"}\n              newLine={true}\n            />\n          </Pressable>\n        ))}\n      <View style={{ paddingTop: 10 }}>\n        <Button\n          onPress={() => navigation.navigate(\"NewCommunity\")}\n          title=\"Create Community\"\n          color={theme.tint}\n          accessibilityLabel=\"Create a new community\"\n        />\n      </View>\n      <Text style={styles.followingTitle}>Communities You Follow:</Text>\n      {communities.map(community => (\n        <View\n          key={community.id}\n          style={[\n            styles.altProfileButton,\n            { borderColor: theme.secondaryBackground },\n          ]}\n        >\n          <ActorDisplay\n            name={community.name}\n            host={community.host}\n            local={community.local}\n            showHost={\"always\"}\n            colorize={\"always\"}\n            newLine={true}\n          />\n        </View>\n      ))}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\",\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  followingTitle: {\n    fontSize: 18,\n    fontWeight: \"500\",\n    padding: 20,\n  },\n  editView: {\n    margin: 20,\n  },\n  editViewText: {\n    marginBottom: 15,\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n  },\n  editViewActionButtons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    height: 40,\n    borderWidth: 1,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  altProfileButton: {\n    marginHorizontal: 20,\n    paddingVertical: 15,\n    borderBottomWidth: 1,\n  },\n});\n","import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n  TextInput,\n  TouchableWithoutFeedback,\n} from \"react-native\";\nimport { View, Text } from \"../components/Themed\";\nimport LotideContext from \"../store/LotideContext\";\nimport { RootTabScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport useTheme from \"../hooks/useTheme\";\nimport SuggestLogin from \"../components/SuggestLogin\";\nimport CommunityFinder from \"../components/CommunityFinder\";\nimport ActorDisplay from \"../components/ActorDisplay\";\n\nexport default function NewPostScreen({\n  navigation,\n}: RootTabScreenProps<\"NewPostScreen\">) {\n  const [community, setCommunity] = useState<Community | null>();\n  const [title, setTitle] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n  const ctx = lotideContext.ctx;\n\n  useEffect(() => {\n    return navigation.addListener(\"focus\", () => {\n      console.log(community);\n      if (community === null) {\n        setCommunity(undefined);\n      }\n    });\n  }, [community, community?.id]);\n\n  if (ctx.login === undefined) {\n    return <SuggestLogin />;\n  }\n\n  if (community === null)\n    return <CommunityFinder onSelect={setCommunity} onlyWhenTyping />;\n\n  function submit() {\n    if (!community) return;\n    LotideService.submitPost(ctx, {\n      community: community.id,\n      title,\n      href: link || undefined,\n      content_markdown: content || undefined,\n    })\n      .then(data => {\n        LotideService.getPost(ctx, data.id).then(post => {\n          reset();\n          navigation.navigate(\"Post\", { post });\n        });\n      })\n      .catch(e => Alert.alert(\"Could not submit post\", e));\n  }\n\n  function reset() {\n    setCommunity(undefined);\n    setTitle(\"\");\n    setLink(\"\");\n    setContent(\"\");\n  }\n\n  return (\n    <KeyboardAvoidingView style={{ width: \"100%\", height: \"100%\" }}>\n      <TouchableWithoutFeedback\n        onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n      >\n        <View style={styles.container}>\n          <Pressable onPress={() => setCommunity(null)}>\n            {community ? (\n              <ActorDisplay\n                name={community.name}\n                host={community.host}\n                local={community.local}\n                colorize={\"always\"}\n                showHost={\"always\"}\n                newLine\n                style={styles.input}\n              />\n            ) : (\n              <Text style={[styles.input, { color: theme.secondaryText }]}>\n                Select a Community\n              </Text>\n            )}\n          </Pressable>\n          <TextInput\n            style={[styles.input, styles.title, { color: theme.text }]}\n            placeholder=\"Add a Title\"\n            placeholderTextColor={theme.placeholderText}\n            value={title}\n            onChangeText={setTitle}\n          />\n          {title.length >= 4 ? (\n            <>\n              <TextInput\n                style={[styles.input, { color: theme.text }]}\n                placeholder=\"Link\"\n                placeholderTextColor={theme.placeholderText}\n                value={link}\n                onChangeText={setLink}\n                keyboardType=\"url\"\n                textContentType=\"URL\"\n              />\n              <TextInput\n                style={[styles.input, { color: theme.text }]}\n                placeholder=\"Add post content\"\n                placeholderTextColor={theme.placeholderText}\n                value={content}\n                onChangeText={setContent}\n              />\n            </>\n          ) : (\n            <Text style={{ color: theme.secondaryText }}>\n              {title.length > 0 && 4 - title.length}\n            </Text>\n          )}\n          {!!community && (!!link || content.length > 10) && (\n            <Button\n              onPress={submit}\n              title=\"Submit\"\n              color={theme.tint}\n              accessibilityLabel=\"Submit new post\"\n            />\n          )}\n          {content.length < 11 && content.length > 0 && (\n            <Text style={{ color: theme.secondaryText }}>\n              {11 - content.length}\n            </Text>\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"flex-start\",\n    padding: 15,\n    height: \"100%\",\n    width: \"100%\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    paddingVertical: 10,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  item: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginBottom: 1,\n  },\n});\n","import React from \"react\";\nimport { View, Text } from \"../components/Themed\";\n\nexport default function SettingsScreen() {\n  return (\n    <View>\n      <Text>Settings screen. It'll be implemented eventually.</Text>\n    </View>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  Alert,\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { View, Text, TextInput } from \"../components/Themed\";\nimport { RootStackScreenProps } from \"../types\";\n\nexport default function RegisterScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Register\">) {\n  const [username, setUsername] = useState(\"\");\n  const [host, setHost] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordConf, setPasswordConf] = useState(\"\");\n  const theme = useTheme();\n  const lotideContext = useContext(LotideContext);\n\n  function submit() {\n    // if (password !== passwordConf) {\n    //   Alert.alert(\"Passwords don't match\", \"Make sure your passwords match\");\n    //   return;\n    // }\n    const fHost = host || \"https://hoot.goldandblack.xyz/api/unstable\";\n    LotideService.register(fHost, username, password)\n      .then(data => {\n        lotideContext.setContext({ apiUrl: fHost, login: data });\n        navigation.pop();\n      })\n      .catch(console.error);\n  }\n\n  return (\n    <View style={styles.root}>\n      <Pressable\n        style={styles.container}\n        onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n      >\n        <Text style={{ fontWeight: \"300\", fontSize: 18, marginBottom: 25 }}>\n          Register a new account\n        </Text>\n        <KeyboardAvoidingView style={{ width: \"100%\" }} behavior=\"position\">\n          <View\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginBottom: 20,\n            }}\n          >\n            <TextInput\n              style={[\n                styles.input,\n                { marginBottom: 0, width: \"auto\", flex: 1 },\n              ]}\n              placeholder=\"Host URL\"\n              value={host}\n              onChangeText={setHost}\n              textContentType=\"URL\"\n            />\n            <Pressable onPress={() => Alert.alert(\"unimplemented\")}>\n              <Icon\n                name=\"search-outline\"\n                size={25}\n                color={theme.secondaryText}\n                style={{ marginLeft: 15 }}\n              />\n            </Pressable>\n          </View>\n          <TextInput\n            style={styles.input}\n            placeholder=\"Username\"\n            textContentType=\"username\"\n            value={username}\n            onChangeText={setUsername}\n          />\n          <TextInput\n            style={styles.input}\n            placeholder=\"Password\"\n            textContentType=\"password\"\n            secureTextEntry={true}\n            value={password}\n            onChangeText={setPassword}\n          />\n          <TextInput\n            style={styles.input}\n            placeholder=\"Confirm Password\"\n            textContentType=\"password\"\n            secureTextEntry={true}\n            value={passwordConf}\n            onChangeText={setPasswordConf}\n          />\n          <View style={styles.actionButtons}>\n            <Button\n              onPress={submit}\n              title=\"Register\"\n              color={theme.tint}\n              accessibilityLabel=\"Login to the Hoot network\"\n            />\n          </View>\n        </KeyboardAvoidingView>\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    padding: 20,\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  input: {\n    width: \"100%\",\n    marginBottom: 20,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  actionButtons: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    width: \"100%\",\n  },\n});\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Alert, Button, FlatList, Pressable, StyleSheet } from \"react-native\";\nimport { View, Text } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as Haptics from \"../services/HapticService\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { usePosts } from \"../hooks/lotide\";\nimport PostDisplay from \"../components/PostDisplay\";\n\nexport default function CommunityScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Community\">) {\n  const [community, setCommunity] = useState(route.params.community);\n  const [posts, isLoadingPosts, refreshPosts, loadNextPage] = usePosts(\n    \"hot\",\n    undefined,\n    community.id,\n  );\n  const [reloadId, setReloadId] = useState(0);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  useEffect(() => {\n    LotideService.getCommunity(ctx, community.id).then(setCommunity);\n  }, [route.params.community.id, reloadId]);\n\n  const renderItem = ({ item }: { item: Post }) => (\n    <Item post={item} navigation={navigation} />\n  );\n\n  const isFollowing = community.your_follow?.accepted || false;\n\n  function follow() {\n    LotideService.followCommunity(ctx, community.id).then(data => {\n      if (data.accepted === false) {\n        Alert.alert(\n          \"Follow request rejected.\",\n          \"This could be an issue with the node you are connected to.\",\n        );\n      }\n      setReloadId(x => x + 1);\n    });\n  }\n\n  function unfollow() {\n    LotideService.unfollowCommunity(ctx, community.id).then(() => {\n      setReloadId(x => x + 1);\n    });\n  }\n\n  return (\n    <View style={[styles.root, { backgroundColor: theme.background }]}>\n      <View\n        style={[\n          styles.header,\n          { borderBottomColor: theme.secondaryBackground },\n        ]}\n      >\n        <View>\n          <Text style={[styles.title]}>{community.name}</Text>\n          <Text\n            style={{\n              color: community.local ? theme.blue : theme.green,\n              fontWeight: \"500\",\n            }}\n          >\n            {community.host}\n          </Text>\n          {community.description !== \"\" && (\n            <Text>\n              {\"\\n\"}\n              {community.description}\n            </Text>\n          )}\n        </View>\n        {isFollowing ? (\n          <Button\n            onPress={unfollow}\n            title=\"Unfollow\"\n            color={theme.tint}\n            accessibilityLabel=\"Stop seeing posts from this community\"\n          />\n        ) : (\n          <Button\n            onPress={follow}\n            title=\"Follow\"\n            color={theme.tint}\n            accessibilityLabel=\"See posts from this community in your feed\"\n          />\n        )}\n      </View>\n      <FlatList\n        data={posts}\n        renderItem={renderItem}\n        keyExtractor={(post, index) => `${post.id}-${index}`}\n        refreshing={isLoadingPosts}\n        onRefresh={refreshPosts}\n        onEndReachedThreshold={2}\n        onEndReached={loadNextPage}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    height: \"100%\",\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    padding: 20,\n    borderBottomWidth: 1,\n  },\n  title: {\n    fontSize: 20,\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n    borderBottomWidth: 8,\n  },\n});\n\nconst Item = ({ post, navigation }: { post: Post; navigation: any }) => {\n  const theme = useTheme();\n  return (\n    <Pressable\n      onPress={() => navigation.navigate(\"Post\", { post })}\n      onLongPress={() => {\n        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n      }}\n    >\n      <View\n        style={[styles.item, { borderBottomColor: theme.secondaryBackground }]}\n      >\n        <PostDisplay post={post} navigation={navigation} />\n      </View>\n    </Pressable>\n  );\n};\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n  Button,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  StyleSheet,\n} from \"react-native\";\nimport { Text, TextInput } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport ContentDisplay from \"../components/ContentDisplay\";\nimport { ScrollView } from \"react-native-gesture-handler\";\n\nexport default function ReplyScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Reply\">) {\n  const [text, setText] = useState(\"\");\n  const scrollRef = useRef<ScrollView>(null);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n  const id = route.params.id;\n  const title = route.params.title;\n  const html = route.params.html;\n  const type = route.params.type;\n\n  function submit() {\n    if (type === \"post\") {\n      LotideService.replyToPost(ctx, id, text).then(() => navigation.pop());\n    } else {\n      LotideService.replyToReply(ctx, id, text).then(() => navigation.pop());\n    }\n  }\n\n  function scrollToBottom() {\n    if (scrollRef.current) {\n      scrollRef.current.scrollToEnd({ animated: true });\n    }\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n    >\n      <ScrollView ref={scrollRef}>\n        <Pressable\n          style={styles.root}\n          onPress={() => Platform.OS !== \"web\" && Keyboard.dismiss()}\n        >\n          <Text>Reply to {type}</Text>\n          {!!title && <Text style={styles.title}>From: {title}</Text>}\n          {html && <ContentDisplay contentHtml={html} />}\n          <TextInput\n            style={styles.input}\n            multiline\n            placeholder=\"Type your reply\"\n            value={text}\n            onChangeText={setText}\n            onFocus={scrollToBottom}\n          />\n          <Button title=\"Submit\" color={theme.tint} onPress={submit} />\n        </Pressable>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: { padding: 20, paddingBottom: 100 },\n  title: {\n    fontSize: 20,\n    marginVertical: 10,\n  },\n  input: {\n    marginVertical: 20,\n    minHeight: 100,\n  },\n});\n","import React, { useContext, useState } from \"react\";\nimport { ColorValue, Pressable } from \"react-native\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { View, Text } from \"./Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as Haptics from \"../services/HapticService\";\nimport ElapsedTime from \"./ElapsedTime\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport ContentDisplay from \"./ContentDisplay\";\n\nexport interface RepliesDisplayProps {\n  replies: Paged<Reply>;\n  navigation: any;\n  layer?: number;\n  postId?: PostId;\n  replyId?: ReplyId;\n  highlightedReplies?: ReplyId[];\n}\n\nexport default function RepliesDisplay({\n  replies,\n  navigation,\n  layer = 0,\n  postId,\n  replyId,\n  highlightedReplies = [],\n}: RepliesDisplayProps) {\n  const [nextPageData, setNextPageData] = useState<Paged<Reply>>();\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n  const layerColors = [\n    theme.text,\n    theme.red,\n    theme.orange,\n    theme.yellow,\n    theme.green,\n    theme.teal,\n    theme.blue,\n    theme.indigo,\n    theme.purple,\n  ];\n\n  return (\n    <View>\n      {replies.items.map(reply => (\n        <ReplyDisplay\n          reply={reply}\n          layer={layer}\n          key={reply.id}\n          navigation={navigation}\n          layerColors={layerColors}\n          postId={postId}\n          highlightedReplies={highlightedReplies}\n        />\n      ))}\n      {replies.next_page !== null &&\n        nextPageData === undefined &&\n        (postId || replyId) && (\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              if (replyId) {\n                LotideService.getReplyReplies(\n                  ctx,\n                  replyId,\n                  replies.next_page || undefined,\n                ).then(setNextPageData);\n              } else if (postId) {\n                LotideService.getPostReplies(\n                  ctx,\n                  postId,\n                  replies.next_page || undefined,\n                ).then(setNextPageData);\n              }\n            }}\n          >\n            <Text\n              style={{ color: theme.tint, paddingTop: 5, paddingBottom: 10 }}\n            >\n              More replies <Icon name=\"chevron-down-outline\" />\n            </Text>\n          </Pressable>\n        )}\n      {nextPageData !== undefined && (\n        <RepliesDisplay\n          replies={nextPageData}\n          navigation={navigation}\n          layer={layer}\n          postId={postId}\n          replyId={replyId}\n          highlightedReplies={highlightedReplies}\n        />\n      )}\n      {replies.next_page === null && layer === 0 && (\n        <Text style={{ margin: 17, color: theme.secondaryText }}>\n          {replies.items.length > 0 ? \"No more replies\" : \"No replies yet\"}\n        </Text>\n      )}\n    </View>\n  );\n}\n\nfunction ReplyDisplay({\n  reply,\n  layer = 0,\n  navigation,\n  layerColors,\n  postId,\n  highlightedReplies = [],\n}: {\n  reply: Reply;\n  layer: number;\n  navigation: any;\n  layerColors: ColorValue[];\n  postId?: PostId;\n  highlightedReplies?: ReplyId[];\n}) {\n  const [nextPageData, setNextPageData] = useState<Paged<Reply>>();\n  const [showChildren, setShowChildren] = React.useState(true);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  return (\n    <View style={{ paddingLeft: 0 }}>\n      <View\n        style={{\n          paddingVertical: 8,\n          borderTopWidth: 0.5,\n          borderTopColor: theme.secondaryBackground,\n        }}\n      >\n        <Pressable\n          onPress={() => setShowChildren(s => !s)}\n          onLongPress={() => {\n            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n            navigation.navigate(\"Reply\", {\n              id: reply.id,\n              title: reply.author.username,\n              html: reply.content_html,\n              type: \"reply\",\n            });\n          }}\n        >\n          <View\n            style={{\n              borderLeftWidth: 2,\n              borderColor: layerColors[layer % layerColors.length],\n              paddingLeft: 15,\n              paddingVertical: 3,\n              backgroundColor: highlightedReplies.includes(reply.id)\n                ? theme.secondaryBackground\n                : theme.background,\n            }}\n          >\n            <Text\n              style={{\n                color: theme.text,\n                fontSize: 16,\n                marginBottom: 5,\n                fontWeight: \"500\",\n              }}\n            >\n              {reply.author.username}\n              {\"  \"}\n              <Text style={{ color: theme.text, fontSize: 14 }}>\n                <Icon name=\"heart-outline\" size={14} color={theme.text} light />{\" \"}\n                {reply.score}\n                {\"   \"}\n                <ElapsedTime time={reply.created} />\n              </Text>\n            </Text>\n            {showChildren && !!reply.content_html && (\n              <ContentDisplay\n                contentHtml={reply.content_html}\n                contentText={reply.content_text}\n              />\n            )}\n          </View>\n        </Pressable>\n      </View>\n      {reply.replies !== null\n        ? reply.replies.items.length > 0 &&\n          showChildren && (\n            <View style={{ paddingLeft: 15 }}>\n              <RepliesDisplay\n                replies={reply.replies}\n                layer={layer + 1}\n                navigation={navigation}\n                postId={postId}\n                replyId={reply.id}\n                highlightedReplies={highlightedReplies}\n              />\n            </View>\n          )\n        : nextPageData === undefined && (\n            <Pressable\n              hitSlop={5}\n              onPress={() => {\n                LotideService.getReplyReplies(ctx, reply.id).then(\n                  setNextPageData,\n                );\n              }}\n            >\n              <View style={{ paddingHorizontal: 15, paddingBottom: 10 }}>\n                <Text style={{ color: theme.tint }}>\n                  More replies <Icon name=\"chevron-forward-outline\" />\n                </Text>\n              </View>\n            </Pressable>\n          )}\n      {nextPageData !== undefined && (\n        <View style={{ paddingLeft: 15 }}>\n          <RepliesDisplay\n            replies={nextPageData}\n            navigation={navigation}\n            layer={layer + 1}\n            postId={postId}\n            replyId={reply.id}\n          />\n        </View>\n      )}\n    </View>\n  );\n}\n","import Icon from \"@expo/vector-icons/Ionicons\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  StatusBar,\n  ScrollView,\n  Pressable,\n  Share,\n} from \"react-native\";\nimport * as Haptics from \"../services/HapticService\";\nimport PostDisplay from \"../components/PostDisplay\";\nimport { View, Text } from \"../components/Themed\";\nimport { useReplies } from \"../hooks/lotide\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport LotideContext from \"../store/LotideContext\";\nimport RepliesDisplay from \"../components/RepliesDisplay\";\n\nexport default function ModalScreen({\n  navigation,\n  route,\n}: RootStackScreenProps<\"Post\">) {\n  const post = route.params.post;\n  const [highlightedReplies, setHighlightedReplies] = useState(\n    route.params.highlightedReplies,\n  );\n  const [focusId, setFocusId] = useState(0);\n  const ctx = useContext(LotideContext).ctx;\n  const replies = useReplies(\n    ctx,\n    post.id,\n    [focusId, highlightedReplies?.join(\",\")],\n    highlightedReplies?.[0],\n  );\n  const theme = useTheme();\n\n  useEffect(() => {\n    navigation.addListener(\"focus\", () => {\n      setFocusId(x => x + 1);\n    });\n  });\n\n  return (\n    <ScrollView>\n      <View\n        style={{\n          ...styles.item,\n          backgroundColor: theme.background,\n        }}\n      >\n        <PostDisplay\n          post={post}\n          navigation={navigation}\n          showHtmlContent\n          showCommunityHost\n        />\n        <View style={styles.actions}>\n          <Icon name=\"bookmark-outline\" size={25} color={theme.text} />\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              navigation.navigate(\"Reply\", {\n                id: post.id,\n                title: post.title,\n                html: post.content_html,\n                type: \"post\",\n              });\n            }}\n          >\n            <Icon name=\"arrow-undo-outline\" size={25} color={theme.text} />\n          </Pressable>\n          <Pressable\n            hitSlop={5}\n            onPress={() => {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n              Share.share({\n                message: post.title,\n                url: `https://dev.goldandblack.xyz/p/posts/${post.id}`,\n                title: \"Hoot\",\n              });\n            }}\n          >\n            <Icon name=\"share-outline\" size={25} color={theme.text} />\n          </Pressable>\n        </View>\n        {highlightedReplies && (\n          <Pressable onPress={() => setHighlightedReplies(undefined)}>\n            <Text style={{ color: theme.tint, paddingVertical: 10 }}>\n              Show all replies\n            </Text>\n          </Pressable>\n        )}\n        <RepliesDisplay\n          replies={replies}\n          navigation={navigation}\n          postId={post.id}\n          highlightedReplies={highlightedReplies}\n        />\n        <View style={{ height: 300 }} />\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    marginVertical: 0,\n    marginHorizontal: 0,\n  },\n  title: {\n    fontSize: 20,\n    padding: 15,\n  },\n  contentText: {\n    fontSize: 12,\n  },\n  link: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    backgroundColor: \"#8884\",\n    borderRadius: 5,\n    marginHorizontal: 15,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    resizeMode: \"contain\",\n  },\n  foot: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n    borderBottomColor: \"#8884\",\n    borderBottomWidth: 2,\n  },\n  by: {\n    fontSize: 11,\n  },\n  actions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    padding: 10,\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import * as LotideService from \"../services/LotideService\";\n\nexport interface Origin {\n  type: \"post\" | \"comment\";\n  id: number;\n  content_text?: string;\n  content_html?: string;\n  author: Profile;\n}\n\nexport async function transformToFullNotification(\n  ctx: LotideContext,\n  notification: UserNotification,\n): Promise<FullNotification> {\n  const post = LotideService.getPost(ctx, notification.post.id);\n  const origin = notification.comment\n    ? originFromComment(ctx, notification.comment!)\n    : originFromPost(await post);\n  const reply = await LotideService.getReply(ctx, notification.reply.id);\n\n  return {\n    unseen: notification.unseen,\n    reply: {\n      id: reply.id,\n      content_text: reply.content_text,\n      content_html: reply.content_html,\n      author: reply.author,\n    },\n    origin: await origin,\n    post: await post,\n  };\n}\n\nexport async function originFromComment(\n  ctx: LotideContext,\n  commentId: ReplyId,\n): Promise<Origin> {\n  const comment = await LotideService.getReply(ctx, commentId);\n  return {\n    type: \"comment\",\n    id: commentId,\n    content_text: comment.content_text,\n    content_html: comment.content_html,\n    author: comment.author,\n  };\n}\n\nexport async function originFromPost(post: Post): Promise<Origin> {\n  return {\n    type: \"post\",\n    id: post.id,\n    content_text: post.title,\n    author: post.author,\n  };\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { FlatList, Pressable, StyleSheet } from \"react-native\";\nimport ActorDisplay from \"../components/ActorDisplay\";\nimport ContentDisplay from \"../components/ContentDisplay\";\nimport SuggestLogin from \"../components/SuggestLogin\";\n\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\nimport { transformToFullNotification } from \"../transformers/NotificationTransformer\";\nimport { RootTabScreenProps } from \"../types\";\n\nexport default function NotificationScreen({\n  navigation,\n}: RootTabScreenProps<\"NotificationScreen\">) {\n  const [notifications, setNotifications] = useState<FullNotification[]>([]);\n  const [isRefreshing, setIsRefreshing] = useState(true);\n  const [focusId, setFocusId] = useState(0);\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  useEffect(() => {\n    if (!ctx.login) return;\n    LotideService.getNotifications(ctx).then(notifications => {\n      const promises = notifications.map(n =>\n        transformToFullNotification(ctx, n),\n      );\n      Promise.all(promises)\n        .then(setNotifications)\n        .then(() => setIsRefreshing(false));\n    });\n  }, [focusId]);\n\n  useEffect(\n    () => navigation.addListener(\"focus\", () => setFocusId(i => i + 1)),\n    [],\n  );\n\n  if (!ctx.login) return <SuggestLogin />;\n\n  const renderItem = ({ item }: { item: FullNotification }) => {\n    return (\n      <Pressable\n        style={[styles.item, { borderColor: theme.secondaryBackground }]}\n        onPress={() => {\n          const highlightedReplies =\n            item.origin.type === \"comment\"\n              ? [item.origin.id, item.reply.id]\n              : [item.reply.id];\n          navigation.navigate(\"Post\", {\n            post: item.post,\n            highlightedReplies,\n          });\n        }}\n      >\n        <Text style={styles.name}>{item.post.author.username}</Text>\n        <Text style={styles.title}>{item.post.title}</Text>\n        <Text>\n          In{\" \"}\n          <ActorDisplay\n            name={item.post.community.name}\n            host={item.post.community.host}\n            local={item.post.community.local}\n            showHost={\"always\"}\n            colorize={\"never\"}\n          />\n        </Text>\n        {item.origin.type === \"comment\" ? (\n          <>\n            <View style={[styles.level1, { borderColor: theme.secondaryText }]}>\n              <Text style={styles.name}>{item.origin.author.username}</Text>\n              <ContentDisplay\n                contentHtml={item.origin.content_html}\n                contentText={item.origin.content_text}\n              />\n            </View>\n            <View style={[styles.level2, { borderColor: theme.tint }]}>\n              <Text style={styles.name}>{item.reply.author.username}</Text>\n              <ContentDisplay\n                contentHtml={item.reply.content_html}\n                contentText={item.reply.content_text}\n              />\n            </View>\n          </>\n        ) : (\n          <>\n            <View style={[styles.level1, { borderColor: theme.tint }]}>\n              <Text style={styles.name}>{item.reply.author.username}</Text>\n              <ContentDisplay\n                contentHtml={item.reply.content_html}\n                contentText={item.reply.content_text}\n              />\n            </View>\n          </>\n        )}\n      </Pressable>\n    );\n  };\n\n  return (\n    <FlatList\n      style={styles.container}\n      data={notifications}\n      renderItem={renderItem}\n      keyExtractor={(item, index) => `${item.reply.id}-${index}`}\n      refreshing={isRefreshing}\n      onRefresh={() => {\n        setIsRefreshing(true);\n        setFocusId(i => i + 1);\n      }}\n    ></FlatList>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  item: { borderBottomWidth: 5, padding: 15 },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  level1: {\n    marginTop: 5,\n    borderLeftWidth: 2,\n    paddingLeft: 15,\n    padding: 5,\n  },\n  level2: {\n    marginTop: 5,\n    marginLeft: 15,\n    borderLeftWidth: 2,\n    paddingLeft: 15,\n    padding: 5,\n  },\n  name: {\n    fontWeight: \"600\",\n    marginBottom: 3,\n  },\n  thin: {\n    fontWeight: \"200\",\n  },\n});\n","import React, { useContext, useState } from \"react\";\nimport { Alert, Button, StyleSheet, TextInput } from \"react-native\";\nimport { Text, View } from \"../components/Themed\";\nimport useTheme from \"../hooks/useTheme\";\nimport { RootStackScreenProps } from \"../types\";\nimport * as LotideService from \"../services/LotideService\";\nimport LotideContext from \"../store/LotideContext\";\n\nexport default function NewCommunityScreen({\n  navigation,\n}: RootStackScreenProps<\"NewCommunity\">) {\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const theme = useTheme();\n  const ctx = useContext(LotideContext).ctx;\n\n  function submit() {\n    LotideService.newCommunity(ctx, name)\n      .then(async data => {\n        const id = data.community.id;\n        if (description) {\n          await LotideService.editCommunity(ctx, id, description);\n        }\n        await LotideService.followCommunity(ctx, id);\n        const community = await LotideService.getCommunity(ctx, id);\n        navigation.replace(\"Community\", { community });\n      })\n      .catch(e => Alert.alert(\"Failed to create community\", e));\n  }\n\n  return (\n    <View style={styles.root}>\n      <TextInput\n        style={[styles.input, { fontSize: 20, color: theme.text }]}\n        placeholder=\"Community Name\"\n        value={name}\n        onChangeText={setName}\n      />\n      {name.length >= 4 ? (\n        <>\n          <TextInput\n            style={[styles.input, { color: theme.text }]}\n            placeholder=\"Description (Optional)\"\n            value={description}\n            onChangeText={setDescription}\n          />\n          <Button\n            title=\"Submit\"\n            color={theme.tint}\n            onPress={submit}\n            accessibilityLabel=\"Create new community\"\n          />\n        </>\n      ) : (\n        <Text>{name.length > 0 && 4 - name.length}</Text>\n      )}\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: \"flex-start\",\n    padding: 15,\n    height: \"100%\",\n    width: \"100%\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n  inputContainer: {\n    width: \"100%\",\n    padding: 20,\n  },\n  input: {\n    paddingVertical: 10,\n    width: \"100%\",\n    borderRadius: 8,\n  },\n  item: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    marginHorizontal: 20,\n    marginBottom: 1,\n  },\n});\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport React, { useState } from \"react\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { ActionSheetIOS, ColorSchemeName, Pressable } from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport {\n  RootStackParamList,\n  RootTabParamList,\n  RootTabScreenProps,\n} from \"../types\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\n\nimport FeedScreen from \"../screens/FeedScreen\";\nimport SearchScreen from \"../screens/SearchScreen\";\nimport ProfileScreen from \"../screens/ProfileScreen\";\nimport NewPostScreen from \"../screens/NewPostScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport RegisterScreen from \"../screens/RegisterScreen\";\nimport CommunityScreen from \"../screens/CommunityScreen\";\nimport ReplyScreen from \"../screens/ReplyScreen\";\nimport ModalScreen from \"../screens/ModalScreen\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport NotificationScreen from \"../screens/NotificationScreen\";\nimport NewCommunityScreen from \"../screens/NewCommunity\";\n\nexport default function Navigation({\n  colorScheme,\n}: {\n  colorScheme: ColorSchemeName;\n}) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n    >\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Root\"\n        component={BottomTabNavigator}\n        options={{ headerShown: false }}\n      />\n      <Stack.Screen name=\"Web\" component={ModalScreen} />\n      <Stack.Screen name=\"Post\" component={ModalScreen} />\n      <Stack.Screen name=\"Reply\" component={ReplyScreen} />\n      <Stack.Screen name=\"Community\" component={CommunityScreen} />\n      <Stack.Screen name=\"NewCommunity\" component={NewCommunityScreen} />\n      <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n      <Stack.Screen name=\"Register\" component={RegisterScreen} />\n      <Stack.Screen\n        name=\"NotFound\"\n        component={NotFoundScreen}\n        options={{ title: \"Oops!\" }}\n      />\n      <Stack.Group screenOptions={{ presentation: \"modal\" }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator({ navigation }: any) {\n  const [sort, setSort] = useState<SortOption>(\"hot\");\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"FeedScreen\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint as unknown as string,\n        tabBarShowLabel: false,\n      }}\n    >\n      <BottomTab.Screen\n        name=\"FeedScreen\"\n        component={FeedScreen}\n        initialParams={{ sort }}\n        options={({ navigation }: RootTabScreenProps<\"FeedScreen\">) => ({\n          title: \"Hoot\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"newspaper-outline\" color={color} />\n          ),\n          headerRight: () => (\n            <Pressable\n              onPress={() => {\n                ActionSheetIOS.showActionSheetWithOptions(\n                  {\n                    options: [\"Cancel\", \"Hot\", \"New\"],\n                    title: \"Sort by:\",\n                    cancelButtonIndex: 0,\n                  },\n                  buttonIndex => {\n                    const newSort = [sort, \"hot\", \"new\"][\n                      buttonIndex\n                    ] as SortOption;\n                    setSort(newSort);\n                    navigation.navigate(\"FeedScreen\", { sort: newSort });\n                  },\n                );\n              }}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}\n            >\n              <Icon\n                name={\n                  { hot: \"flame-outline\", new: \"time-outline\" }[sort] as any\n                }\n                size={25}\n                color={Colors[colorScheme].tint}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"SearchScreen\"\n        component={SearchScreen}\n        options={{\n          title: \"Communities\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"search-outline\" color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"NewPostScreen\"\n        component={NewPostScreen}\n        options={{\n          title: \"New Post\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"add-outline\" color={color} size={40} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"NotificationScreen\"\n        component={NotificationScreen}\n        options={{\n          title: \"Notifications\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"notifications-outline\" color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{\n          title: \"Profile\",\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"person-circle-outline\" color={color} />\n          ),\n          headerLeft: () => (\n            <Pressable\n              onPress={() => {\n                navigation.navigate(\"Settings\");\n              }}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}\n            >\n              <Icon\n                name=\"cog-outline\"\n                size={25}\n                color={Colors[colorScheme].secondaryText}\n                style={{ marginLeft: 15 }}\n              />\n            </Pressable>\n          ),\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof Icon>[\"name\"];\n  color: string;\n  size?: number;\n}) {\n  return <Icon size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\nimport LotideContext, { defaultLotideContext } from \"./store/LotideContext\";\nimport * as StorageService from \"./services/StorageService\";\nimport * as LotideService from \"./services/LotideService\";\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n  const [ctx, setContext] = useState<LotideContext>(defaultLotideContext);\n\n  useEffect(() => {\n    StorageService.lotideContext.query().then(ctx => {\n      if (ctx !== undefined) {\n        setContext(ctx);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!ctx.apiUrl) return;\n    LotideService.getInstanceInfo(ctx)\n      .then(data => {\n        console.log(data);\n        if (!data.software.version.startsWith(\"0.9.\")) {\n          throw \"Bad version\";\n        }\n      })\n      .catch(() => {\n        StorageService.lotideContextKV\n          .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n          .then(() => applyNewContext({}));\n      });\n    if (!ctx.login) return;\n    LotideService.getUserData(ctx, ctx.login.user.id).catch(() => {\n      StorageService.lotideContextKV\n        .remove(`${ctx.login?.user.username}@${ctx.apiUrl}`)\n        .then(() => applyNewContext({}));\n    });\n  }, [ctx]);\n\n  function applyNewContext(ctx: LotideContext) {\n    StorageService.lotideContextKV\n      .store(ctx)\n      .then(() => AsyncStorage.setItem(\"@lotide_ctx\", JSON.stringify(ctx)))\n      .then(() => setContext(ctx));\n  }\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <LotideContext.Provider\n        value={{\n          ctx,\n          setContext: (ctx: LotideContext) => applyNewContext(ctx),\n        }}\n      >\n        <SafeAreaProvider>\n          <Navigation colorScheme={colorScheme} />\n          <StatusBar />\n        </SafeAreaProvider>\n      </LotideContext.Provider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}